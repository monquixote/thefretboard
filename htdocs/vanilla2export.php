<?php /* This file was automatically generated by make.php. DO NOT EDIT. */ ?>

<?php
/**
 * Vanilla 2 Exporter
 *
 * This script exports other forum databases to the Vanilla 2 import format.
 * To use this script, copy it to your web server and open it in your browser.
 * If you have a large database, make the directory writable so that the export file can be saved locally and zipped.
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */
define('APPLICATION', 'Porter');
define('APPLICATION_VERSION', '2.3');

error_reporting(E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR | E_RECOVERABLE_ERROR);
ini_set('display_errors', 'on');
ini_set('track_errors', 1);

// Make sure a default time zone is set
if (ini_get('date.timezone') == '') {
    date_default_timezone_set('America/Montreal');
}

// Recognize if we're running from cli.
if (PHP_SAPI == 'cli') {
    define('CONSOLE', true);
}

/** @var array Supported forum packages: classname => array(name, prefix, features) */
global $supported;

// Support Files

/* Contents included from class.exportmodel.php */
?><?php
/**
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * Object for exporting other database structures into a format that can be imported.
 */
class ExportModel {

    /** Character constants. */
    const COMMENT = '//';
    const DELIM = ',';
    const ESCAPE = '\\';
    const NEWLINE = "\n";
    const NULL = '\N';
    const QUOTE = '"';

    /** @var bool */
    public $captureOnly = false;

    /** @var array Any comments that have been written during the export. */
    public $comments = array();

    /** @var ExportController * */
    public $controller = null;

    /** @var string The charcter set to set as the connection anytime the database connects. */
    public $characterSet = 'utf8';

    /** @var int The chunk size when exporting large tables. */
    public $chunkSize = 100000;

    /** @var array * */
    public $currentRow = null;

    /** @var string Where we are sending this export: 'file' or 'database'. * */
    public $destination = 'file';

    /** @var string * */
    public $destPrefix = 'GDN_z';

    /** @var array * */
    public static $escapeSearch = array();

    /** @var array * */
    public static $escapeReplace = array();

    /** @var object File pointer */
    public $file = null;

    /** @var string A prefix to put into an automatically generated filename. */
    public $filenamePrefix = '';

    /** @var string Database host. * */
    public $_host = 'localhost';

    /** @var bool Whether mb_detect_encoding() is available. * */
    public static $mb = false;

    /** @var object PDO instance */
    protected $_PDO = null;

    /** @var string Database password. * */
    protected $_password;

    /** @var string The path to the export file. */
    public $path = '';

    /**
     * @var string The database prefix. When you pass a sql string to ExportTable() it will replace occurances of :_ with this property.
     * @see ExportModel::ExportTable()
     */
    public $prefix = '';

    /** @var array * */
    public $queries = array();

    /** @var array * */
    protected $_queryStructures = array();

    /** @var array Tables to limit the export to.  A full export is an empty array. */
    public $restrictedTables = array();

    /** @var string The path to the source of the export in the case where a file is being converted. */
    public $sourcePath = '';

    /** @var string */
    public $sourcePrefix = '';

    /** @var bool * */
    public $scriptCreateTable = true;

    /** @var array Structures that define the format of the export tables. */
    protected $_structures = array();

    /** @var bool Whether to limit results to the $testLimit. */
    public $testMode = false;

    /** @var int How many records to limit when $testMode is enabled. */
    public $testLimit = 10;

    /** @var bool Whether or not to use compression when creating the file. */
    protected $_useCompression = true;

    /** @var string Database username. */
    protected $_username;

    /**
     * Setup.
     */
    public function __construct() {
        self::$mb = function_exists('mb_detect_encoding');

        // Set the search and replace to escape strings.
        self::$escapeSearch = array(self::ESCAPE, self::DELIM, self::NEWLINE, self::QUOTE); // escape must go first
        self::$escapeReplace = array(
            self::ESCAPE . self::ESCAPE,
            self::ESCAPE . self::DELIM,
            self::ESCAPE . self::NEWLINE,
            self::ESCAPE . self::QUOTE
        );

        // Load structure.
        $this->_structures = vanillaStructure();
    }

    /**
     * Create the export file and begin the export.
     *
     * @param string $path The path to the export file.
     * @param string $source The source program that created the export. This may be used by the import routine to do additional processing.
     * @param array $header
     * @return resource Pointer to the file created.
     */
    public function beginExport($path = '', $source = '', $header = array()) {
        $this->comments = array();
        $this->beginTime = microtime(true);

        // Allow us to define where the output file goes.
        if ($path) {
            $this->path = $path;
        } elseif ($this->controller->param('destpath')) {
            $this->path = $this->controller->param('destpath');
            if (strstr($this->path, '/') !== false && substr($this->path, 1, -1) != '/') {
                // We're using slash paths but didn't include a final slash.
                $this->path .= '/';
            }
        }

        // Allow the $path parameter to override this default naming.
        if (!$path) {
            $this->path .= 'export_' . ($this->filenamePrefix ? $this->filenamePrefix . '_' : '') . date('Y-m-d_His') . '.txt' . ($this->useCompression() ? '.gz' : '');
        }

        // Start the file pointer.
        $fp = $this->_openFile();

        // Build meta info about where this file came from.
        $comment = 'Vanilla Export: ' . $this->version();
        if ($source) {
            $comment .= self::DELIM . ' Source: ' . $source;
        }
        foreach ($header as $key => $value) {
            $comment .= self::DELIM . " $key: $value";
        }

        // Add meta info to the output.
        if ($this->captureOnly) {
            $this->comment($comment);
        } else {
            fwrite($fp, $comment . self::NEWLINE . self::NEWLINE);
        }

        $this->comment('Export Started: ' . date('Y-m-d H:i:s'));

        return $fp;
    }

    /**
     * Write a comment to the export file.
     *
     * @param string $message The message to write.
     * @param bool $echo Whether or not to echo the message in addition to writing it to the file.
     */
    public function comment($message, $echo = true) {
        if ($this->destination == 'file') {
            $char = self::COMMENT;
        } else {
            $char = '--';
        }

        $comment = $char . ' ' . str_replace(self::NEWLINE, self::NEWLINE . self::COMMENT . ' ',
                $message) . self::NEWLINE;

        fwrite($this->file, $comment);
        if ($echo) {
            if (defined('CONSOLE')) {
                echo $comment;
            } else {
                $this->comments[] = $message;
            }
        }
    }

    /**
     * End the export and close the export file.
     *
     * This method must be called if BeginExport() has been called or else the export file will not be closed.
     */
    public function endExport() {
        $this->endTime = microtime(true);
        $this->totalTime = $this->endTime - $this->beginTime;

        $this->comment($this->path);
        $this->comment('Export Completed: ' . date('Y-m-d H:i:s'));
        $this->comment(sprintf('Elapsed Time: %s', self::formatElapsed($this->totalTime)));

        if ($this->testMode || $this->controller->param('dumpsql') || $this->captureOnly) {
            $queries = implode("\n\n", $this->queries);
            if ($this->destination == 'database') {
                fwrite($this->file, $queries);
            } else {
                $this->comment($queries, true);
            }
        }

        if ($this->useCompression() && function_exists('gzopen')) {
            gzclose($this->file);
        } else {
            fclose($this->file);
        }
    }

    /**
     * Export a table to the export file.
     *
     * @param string $tableName the name of the table to export. This must correspond to one of the accepted Vanilla tables.
     * @param mixed $query The query that will fetch the data for the export this can be one of the following:
     *  - <b>String</b>: Represents a string of SQL to execute.
     *  - <b>PDOStatement</b>: Represents an already executed query result set.
     *  - <b>Array</b>: Represents an array of associative arrays or objects containing the data in the export.
     * @param array $mappings Specifies mappings, if any, between the source and the export where the keys represent the source columns and the values represent Vanilla columns.
     *      - If you specify a Vanilla column then it must be in the export structure contained in this class.
     *   - If you specify a MySQL type then the column will be added.
     *   - If you specify an array you can have the following keys: Column, and Type where Column represents the new column name and Type represents the MySQL type.
     *  For a list of the export tables and columns see $this->Structure().
     */
    public function exportTable($tableName, $query, $mappings = array()) {
        if (!empty($this->restrictedTables) && !in_array(strtolower($tableName), $this->restrictedTables)) {
            $this->comment("Skipping table: $tableName");
        } else {
            $beginTime = microtime(true);

            $rowCount = $this->_exportTable($tableName, $query, $mappings);

            $endTime = microtime(true);
            $elapsed = self::formatElapsed($beginTime, $endTime);
            $this->comment("Exported Table: $tableName ($rowCount rows, $elapsed)");
            fwrite($this->file, self::NEWLINE);
        }
    }

    /**
     *
     *
     * @param $tableName
     * @param $query
     * @param array $mappings
     */
    protected function _exportTableImport($tableName, $query, $mappings = array()) {
        // Backup the settings.
        $destinationBak = $this->destination;
        $this->destination = 'file';

        $_fileBak = $this->file;
        $path = dirname(__FILE__) . '/' . $tableName . '.csv';
        $this->comment("Exporting To: $path");
        $fp = fopen($path, 'wb');
        $this->file = $fp;

        // First export the file to a file.
        $this->_exportTable($tableName, $query, $mappings, array('NoEndline' => true));

        // Now define a table to import into.
        $this->_createExportTable($tableName, $query, $mappings);

        // Now load the data.
        $sql = "load data local infile '$path' into table {$this->destDb}.{$this->destPrefix}$tableName
         character set utf8
         columns terminated by ','
         optionally enclosed by '\"'
         escaped by '\\\\'
         lines terminated by '\\n'
         ignore 2 lines";
        $this->query($sql);

        // Restore the settings.
        $this->destination = $destinationBak;
        $this->file = $_fileBak;
    }

    /**
     * Convert database blobs into files.
     *
     * @param $sql
     * @param $blobColumn
     * @param $pathColumn
     * @param bool $thumbnail
     */
    public function exportBlobs($sql, $blobColumn, $pathColumn, $thumbnail = false) {
        $this->comment("Exporting blobs...");

        $result = $this->query($sql);
        $count = 0;
        while ($row = mysql_fetch_assoc($result)) {
            // vBulletin attachment hack (can't do this in MySQL)
            if (strpos($row[$pathColumn], '.attach') && strpos($row[$pathColumn], 'attachments/') !== false) {
                $pathParts = explode('/', $row[$pathColumn]); // 3 parts

                // Split up the userid into a path, digit by digit
                $n = strlen($pathParts[1]);
                $dirParts = array();
                for ($i = 0; $i < $n; $i++) {
                    $dirParts[] = $pathParts[1]{$i};
                }
                $pathParts[1] = implode('/', $dirParts);

                // Rebuild full path
                $row[$pathColumn] = implode('/', $pathParts);
            }

            $path = $row[$pathColumn];

            // Build path
            if (!file_exists(dirname($path))) {
                $r = mkdir(dirname($path), 0777, true);
                if (!$r) {
                    die("Could not create " . dirname($path));
                }
            }

            if ($thumbnail) {
                $picPath = str_replace('/avat', '/pavat', $path);
                $fp = fopen($picPath, 'wb');
            } else {
                $fp = fopen($path, 'wb');
            }
            if (!is_resource($fp)) {
                die("Could not open $path.");
            }

            fwrite($fp, $row[$blobColumn]);
            fclose($fp);
            $this->status('.');

            if ($thumbnail) {
                if ($thumbnail === true) {
                    $thumbnail = 50;
                }

                $thumbPath = str_replace('/avat', '/navat', $path);
                generateThumbnail($picPath, $thumbPath, $thumbnail, $thumbnail);
            }
            $count++;
        }
        $this->status("$count Blobs.\n");
        $this->comment("$count Blobs.", false);
    }

    /**
     * Process for writing an entire single table to file.
     *
     * @see ExportTable()
     * @param $tableName
     * @param $query
     * @param array $mappings
     * @param array $options
     * @return int
     */
    protected function _exportTable($tableName, $query, $mappings = array(), $options = array()) {
        $fp = $this->file;

        // Make sure the table is valid for export.
        if (!array_key_exists($tableName, $this->_structures)) {
            $this->comment("Error: $tableName is not a valid export."
                . " The valid tables for export are " . implode(", ", array_keys($this->_structures)));
            fwrite($fp, self::NEWLINE);

            return;
        }

        if ($this->destination == 'database') {
            $this->_exportTableDB($tableName, $query, $mappings);

            return;
        }

        // Check for a chunked query.
        $query = str_replace('{from}', -2000000000, $query);
        $query = str_replace('{to}', 2000000000, $query);

        if (strpos($query, '{from}') !== false) {
            $this->_exportTableDBChunked($tableName, $query, $mappings);

            return;
        }

        // If we are in test mode then limit the query.
        if ($this->testMode && $this->testLimit) {
            $query = rtrim($query, ';');
            if (stripos($query, 'select') !== false && stripos($query, 'limit') === false) {
                $query .= " limit {$this->testLimit}";
            }
        }

        $structure = $this->_structures[$tableName];

        $lastID = 0;
        $IDName = 'NOTSET';
        $firstQuery = true;

        $data = $this->query($query);

        // Loop through the data and write it to the file.
        $rowCount = 0;
        if ($data !== false) {
            while (($row = mysql_fetch_assoc($data)) !== false) {
                $row = (array)$row; // export%202010-05-06%20210937.txt
                $this->currentRow =& $row;
                $rowCount++;

                if ($firstQuery) {
                    // Get the export structure.
                    $exportStructure = $this->getExportStructure($row, $structure, $mappings, $tableName);
                    $revMappings = $this->flipMappings($mappings);
                    $this->writeBeginTable($fp, $tableName, $exportStructure);

                    $firstQuery = false;
                }
                $this->writeRow($fp, $row, $exportStructure, $revMappings);
            }
        }
        if ($data !== false) {
            mysql_free_result($data);
        }
        unset($data);

        if (!isset($options['NoEndline'])) {
            $this->writeEndTable($fp);
        }

        mysql_close();

        return $rowCount;
    }

    /**
     *
     *
     * @param $tableName
     * @param $query
     * @param array $mappings
     */
    protected function _createExportTable($tableName, $query, $mappings = array()) {
        if (!$this->scriptCreateTable) {
            return;
        }

        // Limit the query to grab any additional columns.
        $queryStruct = rtrim($query, ';') . ' limit 1';
        $structure = $this->_structures[$tableName];

        $data = $this->query($queryStruct, true);
//      $mb = function_exists('mb_detect_encoding');

        // Loop through the data and write it to the file.
        if ($data === false) {
            return;
        }

        // Get the export structure.
        while (($row = mysql_fetch_assoc($data)) !== false) {
            $row = (array)$row;

            // Get the export structure.
            $exportStructure = $this->getExportStructure($row, $structure, $mappings, $tableName);

            break;
        }
        mysql_close($data);

        // Build the create table statement.
        $columnDefs = array();
        foreach ($exportStructure as $columnName => $type) {
            $columnDefs[] = "`$columnName` $type";
        }
        $destDb = '';
        if (isset($this->destDb)) {
            $destDb = $this->destDb . '.';
        }

        $this->query("drop table if exists {$destDb}{$this->destPrefix}$tableName");
        $createSql = "create table {$destDb}{$this->destPrefix}$tableName (\n  " . implode(",\n  ",
                $columnDefs) . "\n) engine=innodb";

        $this->query($createSql);
    }

    /**
     *
     *
     * @see _exportTable()
     * @param $tableName
     * @param $query
     * @param array $mappings
     */
    protected function _exportTableDB($tableName, $query, $mappings = array()) {
        if ($this->hasFilter($mappings) || strpos($query, 'union all') !== false) {
            $this->_exportTableImport($tableName, $query, $mappings);

            return;
        }

        // Check for a chunked query.
        if (strpos($query, '{from}') !== false) {
            $this->_exportTableDBChunked($tableName, $query, $mappings);

            return;
        }

        $destDb = '';
        if (isset($this->destDb)) {
            $destDb = $this->destDb . '.';
        }

        // Limit the query to grab any additional columns.
        $queryStruct = $this->getQueryStructure($query, $tableName);
        $structure = $this->_structures[$tableName];

        $exportStructure = $this->getExportStructure($queryStruct, $structure, $mappings, $tableName);

        $mappings = $this->flipMappings($mappings);

        // Build the create table statement.
        $columnDefs = array();
        foreach ($exportStructure as $columnName => $type) {
            $columnDefs[] = "`$columnName` $type";
        }
        if ($this->scriptCreateTable) {
            $this->query("drop table if exists {$destDb}{$this->destPrefix}$tableName");
            $createSql = "create table {$destDb}{$this->destPrefix}$tableName (\n  " . implode(",\n  ",
                    $columnDefs) . "\n) engine=innodb";
            $this->query($createSql);
        }

        $query = rtrim($query, ';');
        // Build the insert statement.
        if ($this->testMode && $this->testLimit) {
            $query .= " limit {$this->testLimit}";
        }

        $insertColumns = array();
        $selectColumns = array();
        foreach ($exportStructure as $columnName => $type) {
            $insertColumns[] = '`' . $columnName . '`';
            if (isset($mappings[$columnName])) {
                $selectColumns[$columnName] = $mappings[$columnName];
            } else {
                $selectColumns[$columnName] = $columnName;
            }
        }

        $query = replaceSelect($query, $selectColumns);

        $insertSql = "replace {$destDb}{$this->destPrefix}$tableName"
            . " (\n  " . implode(",\n   ", $insertColumns) . "\n)\n"
            . $query;

        $this->query($insertSql);
    }

    /**
     *
     *
     * @see _exportTableDB()
     * @param $tableName
     * @param $query
     * @param array $mappings
     */
    protected function _exportTableDBChunked($tableName, $query, $mappings = array()) {
        // Grab the table name from the first from.
        if (preg_match('`\sfrom\s([^\s]+)`', $query, $matches)) {
            $from = $matches[1];
        } else {
            trigger_error("Could not figure out table for $tableName chunking.", E_USER_WARNING);

            return;
        }

        $sql = "show table status like '{$from}';";
        $r = $this->query($sql, true);
        $row = mysql_fetch_assoc($r);
        mysql_free_result($r);
        $max = $row['Auto_increment'];

        if (!$max) {
            $max = 2000000;
        }

        for ($i = 0; $i < $max; $i += $this->chunkSize) {
            $from = $i;
            $to = $from + $this->chunkSize - 1;

            $sql = str_replace(array('{from}', '{to}'), array($from, $to), $query);
            $this->_exportTableDB($tableName, $sql, $mappings);
        }
    }

    /**
     *
     *
     * @param $columns
     * @return array
     */
    public function fixPermissionColumns($columns) {
        $result = array();
        foreach ($columns as $index => $value) {
            if (is_string($value) && strpos($value, '.') !== false) {
                $value = array('Column' => $value, 'Type' => 'tinyint(1)');
            }
            $result[$index] = $value;
        }

        return $result;
    }

    /**
     *
     *
     * @param $mappings
     * @return array
     */
    public function flipMappings($mappings) {
        $result = array();
        foreach ($mappings as $column => $mapping) {
            if (is_string($mapping)) {
                $result[$mapping] = array('Column' => $column);
            } else {
                $col = $mapping['Column'];
                $mapping['Column'] = $column;
                $result[$col] = $mapping;
            }
        }

        return $result;
    }

    /**
     * For outputting how long the export took.
     *
     * @param int $start
     * @param int $end
     * @return string
     */
    public static function formatElapsed($start, $end = null) {
        if ($end === null) {
            $elapsed = $start;
        } else {
            $elapsed = $end - $start;
        }

        $m = floor($elapsed / 60);
        $s = $elapsed - $m * 60;
        $result = sprintf('%02d:%05.2f', $m, $s);

        return $result;
    }

    /**
     *
     *
     * @param $value
     * @return int|mixed|string
     */
    public static function formatValue($value) {
        // Format the value for writing.
        if (is_null($value)) {
            $value = self::NULL;
        } elseif (is_numeric($value)) {
            // Do nothing, formats as is.
        } elseif (is_string($value)) {
            if (self::$mb && mb_detect_encoding($value) != 'UTF-8') {
                $value = utf8_encode($value);
            }

            $value = str_replace(array("\r\n", "\r"), array(self::NEWLINE, self::NEWLINE), $value);
            $value = self::QUOTE
                . str_replace(self::$escapeSearch, self::$escapeReplace, $value)
                . self::QUOTE;
        } elseif (is_bool($value)) {
            $value = $value ? 1 : 0;
        } else {
            // Unknown format.
            $value = self::NULL;
        }

        return $value;
    }

    /**
     * Execute an sql statement and return the result.
     *
     * @param type $sql
     * @param type $indexColumn
     * @return type
     */
    public function get($sql, $indexColumn = false) {
        $r = $this->_query($sql, true);
        $result = array();

        while ($row = mysql_fetch_assoc($r)) {
            if ($indexColumn) {
                $result[$row[$indexColumn]] = $row;
            } else {
                $result[] = $row;
            }
        }

        return $result;
    }

    /**
     * Determine the character set of the origin database.
     *
     * @param string $table
     * @return string|bool Character set name or false.
     */
    public function getCharacterSet($table) {
        // First get the collation for the database.
        $data = $this->query("show table status like ':_{$table}';");
        if (!$data) {
            return false;
        }
        if ($statusRow = mysql_fetch_assoc($data)) {
            $collation = $statusRow['Collation'];
        } else {
            return false;
        }

        // Grab the character set from the database.
        $data = $this->query("show collation like '$collation'");
        if (!$data) {
            return false;
        }
        if ($collationRow = mysql_fetch_assoc($data)) {
            $characterSet = $collationRow['Charset'];
            if (!defined('PORTER_CHARACTER_SET')) {
                define('PORTER_CHARACTER_SET', $characterSet);
            }

            return $characterSet;
        }

        return false;
    }

    /**
     *
     *
     * @return array
     */
    public function getDatabasePrefixes() {
        // Grab all of the tables.
        $data = $this->query('show tables');
        if ($data === false) {
            return array();
        }

        // Get the names in an array for easier parsing.
        $tables = array();
        while (($row = mysql_fetch_array($data, MYSQL_NUM)) !== false) {
            $tables[] = $row[0];
        }
        sort($tables);

        $prefixes = array();

        // Loop through each table and get its prefixes.
        foreach ($tables as $table) {
            $pxFound = false;
            foreach ($prefixes as $pxIndex => $px) {
                $newPx = $this->_getPrefix($table, $px);
                if (strlen($newPx) > 0) {
                    $pxFound = true;
                    if ($newPx != $px) {
                        $prefixes[$pxIndex] = $newPx;
                    }
                    break;
                }
            }
            if (!$pxFound) {
                $prefixes[] = $table;
            }
        }

        return $prefixes;
    }

    /**
     *
     *
     * @param $a
     * @param $b
     * @return string
     */
    protected function _getPrefix($a, $b) {
        $length = min(strlen($a), strlen($b));
        $prefix = '';

        for ($i = 0; $i < $length; $i++) {
            if ($a[$i] == $b[$i]) {
                $prefix .= $a[$i];
            } else {
                break;
            }
        }

        return $prefix;
    }

    /**
     *
     *
     * @param $row
     * @param $tableOrStructure
     * @param $mappings
     * @param string $tableName
     * @return array
     */
    public function getExportStructure($row, $tableOrStructure, &$mappings, $tableName = '_') {
        $exportStructure = array();

        if (is_string($tableOrStructure)) {
            $structure = $this->_structures[$tableOrStructure];
        } else {
            $structure = $tableOrStructure;
        }

        // See what columns to add to the end of the structure.
        foreach ($row as $column => $x) {
            if (array_key_exists($column, $mappings)) {
                $mapping = $mappings[$column];
                if (is_string($mapping)) {
                    if (array_key_exists($mapping, $structure)) {
                        // This an existing column.
                        $destColumn = $mapping;
                        $destType = $structure[$destColumn];
                    } else {
                        // This is a created column.
                        $destColumn = $column;
                        $destType = $mapping;
                    }
                } elseif (is_array($mapping)) {
                    if (!isset($mapping['Column'])) {
                        trigger_error("Mapping for $column does not have a 'Column' defined.", E_USER_ERROR);
                    }

                    $destColumn = $mapping['Column'];

                    if (isset($mapping['Type'])) {
                        $destType = $mapping['Type'];
                    } elseif (isset($structure[$destColumn])) {
                        $destType = $structure[$destColumn];
                    } else {
                        $destType = 'varchar(255)';
                    }
//               $mappings[$column] = $destColumn;
                }
            } elseif (array_key_exists($column, $structure)) {
                $destColumn = $column;
                $destType = $structure[$column];

                // Verify column doesn't exist in Mapping array's Column element
                $mappingExists = false;
                foreach ($mappings as $testMapping) {
                    if ($testMapping == $column) {
                        $mappingExists = true;
                    } elseif (is_array($testMapping) && array_key_exists('Column',
                            $testMapping) && ($testMapping['Column'] == $column)
                    ) {
                        $mappingExists = true;
                    }
                }

                // Also add the column to the mapping.
                if (!$mappingExists) {
                    $mappings[$column] = $destColumn;
                }
            } else {
                $destColumn = '';
                $destType = '';
            }

            // Check to see if we have to add the column to the export structure.
            if ($destColumn && !array_key_exists($destColumn, $exportStructure)) {
                // TODO: Make sure $destType is a valid MySQL type.
                $exportStructure[$destColumn] = $destType;
            }
        }

        // Add filtered mappings since filters can add new columns.
        foreach ($mappings as $source => $options) {
            if (!is_array($options)) {
                // Force the mappings into the expanded array syntax for easier processing later.
                $mappings[$source] = array('Column' => $options);
                continue;
            }

            if (!isset($options['Column'])) {
                trigger_error("No column for $tableName(source).$source.", E_USER_NOTICE);
                continue;
            }

            $destColumn = $options['Column'];

            if (!array_key_exists($source, $row) && !isset($options['Type'])) {
                trigger_error("No column for $tableName(source).$source.", E_USER_NOTICE);
            }

            if (isset($exportStructure[$destColumn])) {
                continue;
            }

            if (isset($structure[$destColumn])) {
                $destType = $structure[$destColumn];
            } elseif (isset($options['Type'])) {
                $destType = $options['Type'];
            } else {
                trigger_error("No column for $tableName.$destColumn.", E_USER_NOTICE);
                continue;
            }

            $exportStructure[$destColumn] = $destType;
            $mappings[$source] = $destColumn;
        }

        return $exportStructure;
    }

    /**
     *
     *
     * @param $query
     * @param bool $key
     * @return array
     */
    public function getQueryStructure($query, $key = false) {
        $queryStruct = rtrim($query, ';') . ' limit 1';
        if (!$key) {
            $key = md5($queryStruct);
        }
        if (isset($this->_queryStructures[$key])) {
            return $this->_queryStructures[$key];
        }

        $r = $this->query($queryStruct, true);
        $i = 0;
        $result = array();
        while ($i < mysql_num_fields($r)) {
            $meta = mysql_fetch_field($r, $i);
            $result[$meta->name] = $meta->table;
            $i++;
        }
        $this->_queryStructures[$key] = $result;

        return $result;
    }

    /**
     *
     *
     * @param $sql
     * @param $default
     * @return mixed
     */
    public function getValue($sql, $default) {
        $data = $this->get($sql);
        if (count($data) > 0) {
            $data = array_shift($data); // first row
            $result = array_shift($data); // first column

            return $result;
        } else {
            return $default;
        }
    }

    /**
     *
     *
     * @param $structure
     * @param $globalStructure
     * @return string
     */
    protected function _getTableHeader($structure, $globalStructure) {
        $tableHeader = '';

        foreach ($structure as $column => $type) {
            if (strlen($tableHeader) > 0) {
                $tableHeader .= self::DELIM;
            }
            if (array_key_exists($column, $globalStructure)) {
                $tableHeader .= $column;
            } else {
                $tableHeader .= $column . ':' . $type;
            }
        }

        return $tableHeader;
    }

    /**
     * Are there any filters set on this table?
     *
     * @param $mappings
     * @return bool
     */
    public function hasFilter(&$mappings) {
        foreach ($mappings as $column => $info) {
            if (is_array($info) && isset($info['Filter'])) {
                return true;
            }
        }

        return false;
    }

    /**
     * Do standard HTML decoding in SQL to speed things up.
     *
     * @param string $tableName
     * @param string $columnName
     * @param string $PK
     */
    public function HTMLDecoderDb($tableName, $columnName, $PK) {
        $common = array('&amp;' => '&', '&lt;' => '<', '&gt;' => '>', '&apos;' => "'", '&quot;' => '"', '&#39;' => "'");
        foreach ($common as $from => $to) {
            $fromQ = mysql_escape_string($from);
            $toQ = mysql_escape_string($to);
            $sql = "update :_{$tableName} set $columnName = replace($columnName, '$fromQ', '$toQ') where $columnName like '%$fromQ%'";

            $this->query($sql);
        }

        // Now decode the remaining rows.
        $sql = "select * from :_$tableName where $columnName like '%&%;%'";
        $result = $this->query($sql, true);
        while ($row = mysql_fetch_assoc($result)) {
            $from = $row[$columnName];
            $to = HTMLDecoder($from);

            if ($from != $to) {
                $toQ = mysql_escape_string($to);
                $sql = "update :_{$tableName} set $columnName = '$toQ' where $PK = {$row[$PK]}";
                $this->query($sql, true);
            }
        }
    }

    /**
     * Determine if an index exists in a table
     *
     * @param $indexName Name of the index to verify
     * @param $table Name of the table the target index exists in
     * @return bool True if index exists, false otherwise
     */
    public function indexExists($indexName, $table) {
        $indexName = mysql_real_escape_string($indexName);
        $table = mysql_real_escape_string($table);

        $result = $this->query("show index from `{$table}` WHERE Key_name = '{$indexName}'", true);

        return $result && mysql_num_rows($result);
    }

    /**
     *
     *
     * @return resource
     */
    protected function _openFile() {
        $this->path = str_replace(' ', '_', $this->path);
        if ($this->useCompression()) {
            $fp = gzopen($this->path, 'wb');
        } else {
            $fp = fopen($this->path, 'wb');
        }

        $this->file = $fp;

        return $fp;
    }

    /**
     * Execute a SQL query on the current connection.
     *
     * Wrapper for _Query().
     *
     * @param string $query The sql to execute.
     * @return resource The query cursor.
     */
    public function query($query, $buffer = false) {
        if (!preg_match('`limit 1;$`', $query)) {
            $this->queries[] = $query;
        }

        if ($this->destination == 'database' && $this->captureOnly) {
            if (!preg_match('`^\s*select|show|describe|create`', $query)) {
                return 'SKIPPED';
            }
        }

        return $this->_query($query, $buffer);
    }

    /**
     * Execute a SQL query on the current connection.
     *
     * @see Query()
     * @param $sql
     * @param bool $buffer
     * @return resource
     */
    protected function _query($sql, $buffer = false) {
        if (isset($this->_lastResult) && is_resource($this->_lastResult)) {
            mysql_free_result($this->_lastResult);
        }
        $sql = str_replace(':_', $this->prefix, $sql); // replace prefix.
        if ($this->sourcePrefix) {
            $sql = preg_replace("`\b{$this->sourcePrefix}`", $this->prefix, $sql); // replace prefix.
        }

        $sql = rtrim($sql, ';') . ';';

        $connection = @mysql_connect($this->_host, $this->_username, $this->_password);
        mysql_select_db($this->_dbName);
        mysql_query("set names {$this->characterSet}");

        if ($buffer) {
            $result = mysql_query($sql, $connection);
        } else {
            $result = mysql_unbuffered_query($sql, $connection);
            if (is_resource($result)) {
                $this->_lastResult = $result;
            }
        }

        if ($result === false) {
            echo '<pre>',
            htmlspecialchars($sql),
            htmlspecialchars(mysql_error($connection)),
            '</pre>';
            trigger_error(mysql_error($connection));
        }

        return $result;
    }

    /**
     * Send multiple SQL queries.
     *
     * @param string|array $sqlList An array of single query strings or a string of queries terminated with semi-colons.
     */
    public function queryN($sqlList) {
        if (!is_array($sqlList)) {
            $sqlList = explode(';', $sqlList);
        }

        foreach ($sqlList as $sql) {
            $sql = trim($sql);
            if ($sql) {
                $this->query($sql);
            }
        }
    }

    /**
     * Using RestrictedTables, determine if a table should be exported or not
     *
     * @param string $tableName Name of the table to check
     * @return bool True if table should be exported, false otherwise
     */
    public function shouldExport($tableName) {
        return empty($this->restrictedTables) || in_array(strtolower($tableName), $this->restrictedTables);
    }

    /**
     * Set database connection details.
     *
     * @param null $host
     * @param null $username
     * @param null $password
     * @param null $dbName
     */
    public function setConnection($host = null, $username = null, $password = null, $dbName = null) {
        $this->_host = $host;
        $this->_username = $username;
        $this->_password = $password;
        $this->_dbName = $dbName;
    }

    /**
     * Echo a status message to the console.
     *
     * @param $msg
     */
    public function status($msg) {
        if (defined('CONSOLE')) {
            echo $msg;
        }
    }

    /**
     * Returns an array of all the expected export tables and expected columns in the exports.
     *
     * When exporting tables using ExportTable() all of the columns in this structure will always be exported
     * in the order here, regardless of how their order in the query.
     *
     * @return array
     * @see vnExport::ExportTable()
     */
    public function structures($newStructures = false) {
        if (is_array($newStructures)) {
            $this->_structures = $newStructures;
        }

        return $this->_structures;
    }

    /**
     * Whether or not to use compression on the output file.
     *
     * @param bool $value The value to set or NULL to just return the value.
     * @return bool
     */
    public function useCompression($value = null) {
        if ($value !== null) {
            $this->_useCompression = $value;
        }

        return $this->_useCompression && $this->destination == 'file' && function_exists('gzopen');
    }

    /**
     * Returns the version of export file that will be created with this export.
     * The version is used when importing to determine the format of this file.
     *
     * @return string
     */
    public function version() {
        return APPLICATION_VERSION;
    }

    /**
     * Checks whether or not a table and columns exist in the database.
     *
     * @param string $table The name of the table to check.
     * @param array $columns An array of column names to check.
     * @return bool|array The method will return one of the following
     *  - true: If table and all of the columns exist.
     *  - false: If the table does not exist.
     *  - array: The names of the missing columns if one or more columns don't exist.
     */
    public function exists($table, $columns = array()) {
        static $_exists = array();

        if (!isset($_exists[$table])) {
            $result = $this->query("show table status like ':_$table'", true);
            if (!$result) {
                $_exists[$table] = false;
            } elseif (!mysql_fetch_assoc($result)) {
                $_exists[$table] = false;
            } else {
                mysql_free_result($result);
                $desc = $this->query('describe :_' . $table);
                if ($desc === false) {
                    $_exists[$table] = false;
                } else {
                    if (is_string($desc)) {
                        die($desc);
                    }

                    $cols = array();
                    while (($TD = mysql_fetch_assoc($desc)) !== false) {
                        $cols[$TD['Field']] = $TD;
                    }
                    mysql_free_result($desc);
                    $_exists[$table] = $cols;
                }
            }
        }

        if ($_exists[$table] == false) {
            return false;
        }

        $columns = (array)$columns;

        if (count($columns) == 0) {
            return true;
        }

        $missing = array();
        $cols = array_keys($_exists[$table]);
        foreach ($columns as $column) {
            if (!in_array($column, $cols)) {
                $missing[] = $column;
            }
        }

        return count($missing) == 0 ? true : $missing;
    }

    /**
     * Checks all required source tables are present.
     *
     * @param array $requiredTables
     * @return array|string
     */
    public function verifySource($requiredTables) {
        $missingTables = false;
        $countMissingTables = 0;
        $missingColumns = array();

        foreach ($requiredTables as $reqTable => $reqColumns) {
            $tableDescriptions = $this->query('describe :_' . $reqTable);
            //echo 'describe '.$prefix.$reqTable;
            if ($tableDescriptions === false) { // Table doesn't exist
                $countMissingTables++;
                if ($missingTables !== false) {
                    $missingTables .= ', ' . $reqTable;
                } else {
                    $missingTables = $reqTable;
                }
            } else {
                // Build array of columns in this table
                $presentColumns = array();
                while (($TD = mysql_fetch_assoc($tableDescriptions)) !== false) {
                    $presentColumns[] = $TD['Field'];
                }
                // Compare with required columns
                foreach ($reqColumns as $reqCol) {
                    if (!in_array($reqCol, $presentColumns)) {
                        $missingColumns[$reqTable][] = $reqCol;
                    }
                }

                mysql_free_result($tableDescriptions);
            }
        }

        // Return results
        if ($missingTables === false) {
            if (count($missingColumns) > 0) {
                $result = array();

                // Build a string of missing columns.
                foreach ($missingColumns as $table => $columns) {
                    $result[] = "The $table table is missing the following column(s): " . implode(', ', $columns);
                }

                return implode("<br />\n", $result);
            } else {
                return true;
            } // Nothing missing!
        } elseif ($countMissingTables == count($requiredTables)) {
            $result = 'The required tables are not present in the database. Make sure you entered the correct database name and prefix and try again.';

            // Guess the prefixes to notify the user.
            $prefixes = $this->getDatabasePrefixes();
            if (count($prefixes) == 1) {
                $result .= ' Based on the database you provided, your database prefix is probably ' . implode(', ',
                        $prefixes);
            } elseif (count($prefixes) > 0) {
                $result .= ' Based on the database you provided, your database prefix is probably one of the following: ' . implode(', ',
                        $prefixes);
            }

            return $result;
        } else {
            return 'Missing required database tables: ' . $missingTables;
        }
    }

    /**
     * Start table write to file.
     *
     * @param $fp
     * @param $tableName
     * @param $exportStructure
     */
    public function writeBeginTable($fp, $tableName, $exportStructure) {
        $tableHeader = '';

        foreach ($exportStructure as $key => $value) {
            if (is_numeric($key)) {
                $column = $value;
                $type = '';
            } else {
                $column = $key;
                $type = $value;
            }

            if (strlen($tableHeader) > 0) {
                $tableHeader .= self::DELIM;
            }

            if ($type) {
                $tableHeader .= $column . ':' . $type;
            } else {
                $tableHeader .= $column;
            }
        }

        fwrite($fp, 'Table: ' . $tableName . self::NEWLINE);
        fwrite($fp, $tableHeader . self::NEWLINE);
    }

    /**
     * End table write to file.
     *
     * @param $fp
     */
    public function writeEndTable($fp) {
        fwrite($fp, self::NEWLINE);
    }

    /**
     * Write a table's row to file.
     *
     * @param $fp
     * @param $row
     * @param $exportStructure
     * @param $revMappings
     */
    public function writeRow($fp, $row, $exportStructure, $revMappings) {
        $this->currentRow =& $row;

        // Loop through the columns in the export structure and grab their values from the row.
        $exRow = array();
        foreach ($exportStructure as $field => $type) {
            // Get the value of the export.
            $value = null;
            if (isset($revMappings[$field]) && isset($row[$revMappings[$field]['Column']])) {
                // The column is mapped.
                $value = $row[$revMappings[$field]['Column']];
            } elseif (array_key_exists($field, $row)) {
                // The column has an exact match in the export.
                $value = $row[$field];
            }

            // Check to see if there is a callback filter.
            $filtered = false;
            if (isset($revMappings[$field]['Filter'])) {
                $callback = $revMappings[$field]['Filter'];

                $row2 =& $row;
                $value = call_user_func($callback, $value, $field, $row2, $field);
                $row = $this->currentRow;
                $filtered = true;
            }

            // Format the value for writing.
            if (is_null($value)) {
                $value = self::NULL;
            } elseif (is_integer($value)) {
                // Do nothing, formats as is.
                // Only allow ints because PHP allows weird shit as numeric like "\n\n.1"
            } elseif (is_string($value) || is_numeric($value)) {
                // Check to see if there is a callback filter.
                if (!isset($revMappings[$field])) {
                    //$value = call_user_func($Filters[$field], $value, $field, $row);
                } else {
                    if (self::$mb && mb_detect_encoding($value) != 'UTF-8') {
                        $value = utf8_encode($value);
                    }
                }

                $value = str_replace(array("\r\n", "\r"), array(self::NEWLINE, self::NEWLINE), $value);
                $value = self::QUOTE
                    . str_replace(self::$escapeSearch, self::$escapeReplace, $value)
                    . self::QUOTE;
            } elseif (is_bool($value)) {
                $value = $value ? 1 : 0;
            } else {
                // Unknown format.
                $value = self::NULL;
            }

            $exRow[] = $value;
        }
        // Write the data.
        fwrite($fp, implode(self::DELIM, $exRow));
        // End the record.
        fwrite($fp, self::NEWLINE);
    }

    /**
     * SQL to get the file extension from a string.
     *
     * @param string $columnName
     * @return string SQL.
     */
    public static function fileExtension($columnName) {
        return "right($columnName, instr(reverse($columnName), '.'))";
    }
}

?>
<?php


/* Contents included from class.exportcontroller.php */
?><?php
/**
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * Generic controller implemented by forum-specific ones.
 */
abstract class ExportController {

    /** @var array Database connection info */
    protected $dbInfo = array();

    /** @var array Required tables, columns set per exporter */
    protected $sourceTables = array();

    /** @var ExportModel */
    protected $ex = null;

    /** Forum-specific export routine */
    abstract protected function forumExport($ex);

    /**
     * Construct and set the controller's properties from the posted form.
     */
    public function __construct() {
        global $supported;

        $this->handleInfoForm();

        $this->ex = new ExportModel;
        $this->ex->controller = $this;
        $this->ex->setConnection(
            $this->dbInfo['dbhost'],
            $this->dbInfo['dbuser'],
            $this->dbInfo['dbpass'],
            $this->dbInfo['dbname']
        );

        $this->ex->prefix = '';

        // That's not sexy but it gets the job done :D
        $lcClassName = strtolower(get_class($this));
        $hasDefaultPrefix = !empty($supported[$lcClassName]['prefix']);

        if (isset($this->dbInfo['prefix'])) {
            if ($this->dbInfo['prefix'] === 'PACKAGE_DEFAULT') {
                if ($hasDefaultPrefix) {
                    $this->ex->prefix = $supported[$lcClassName]['prefix'];
                }
            } else {
                $this->ex->prefix = $this->dbInfo['prefix'];
            }
        }

        $this->ex->destination = $this->param('dest', 'file');
        $this->ex->destDb = $this->param('destdb', null);
        $this->ex->testMode = $this->param('test', false);

        /**
         * Selective exports
         * 1. Get the comma-separated list of tables and turn it into an array
         * 2. Trim off the whitespace
         * 3. Normalize case to lower
         * 4. Save to the ExportModel instance
         */
        $restrictedTables = $this->param('tables', false);
        if (!empty($restrictedTables)) {
            $restrictedTables = explode(',', $restrictedTables);

            if (is_array($restrictedTables) && !empty($restrictedTables)) {
                $restrictedTables = array_map('trim', $restrictedTables);
                $restrictedTables = array_map('strtolower', $restrictedTables);

                $this->ex->restrictedTables = $restrictedTables;
            }
        }
    }

    /**
     * Set CDN file prefix if one is given.
     *
     * @return string
     */
    public function cdnPrefix() {
        $cdn = rtrim($this->param('cdn', ''), '/');
        if ($cdn) {
            $cdn .= '/';
        }

        return $cdn;
    }

    /**
     * Logic for export process.
     */
    public function doExport() {
        global $supported;

        // Test connection
        $msg = $this->testDatabase();
        if ($msg === true) {

            // Test src tables' existence structure
            $msg = $this->ex->verifySource($this->sourceTables);
            if ($msg === true) {
                // Good src tables - Start dump
                $this->ex->useCompression(true);
                $this->ex->filenamePrefix = $this->dbInfo['dbname'];
                set_time_limit(60 * 60);

//            ob_start();
                $this->forumExport($this->ex);
//            $Errors = ob_get_clean();

                $msg = $this->ex->comments;

                // Write the results.  Send no path if we don't know where it went.
                $relativePath = ($this->param('destpath', false)) ? false : $this->ex->path;
                viewExportResult($msg, 'Info', $relativePath);
            } else {
                viewForm(array('Supported' => $supported, 'Msg' => $msg, 'Info' => $this->dbInfo));
            } // Back to form with error
        } else {
            viewForm(array('Supported' => $supported, 'Msg' => $msg, 'Info' => $this->dbInfo));
        } // Back to form with error
    }

    /**
     * User submitted db connection info.
     */
    public function handleInfoForm() {
        $this->dbInfo = array(
            'dbhost' => $_POST['dbhost'],
            'dbuser' => $_POST['dbuser'],
            'dbpass' => $_POST['dbpass'],
            'dbname' => $_POST['dbname'],
            'type' => $_POST['type'],
            'prefix' => !isset($_POST['emptyprefix']) ? preg_replace('/[^A-Za-z0-9_-]/', '', $_POST['prefix']) : null,
        );
    }

    /**
     * Retrieve a parameter passed to the export process.
     *
     * @param string $name
     * @param mixed $default Fallback value.
     * @return mixed Value of the parameter.
     */
    public function param($name, $default = false) {
        if (isset($_POST[$name])) {
            return $_POST[$name];
        } elseif (isset($_GET[$name])) {
            return $_GET[$name];
        } else {
            return $default;
        }
    }

    /**
     * Test database connection info.
     *
     * @return string|bool True on success, message on failure.
     */
    public function testDatabase() {
        // Connection
        if (!function_exists('mysql_connect')) {
            $result = 'mysql_connect is an undefined function.  Verify MySQL extension is installed and enabled.';
        } elseif ($c = @mysql_connect($this->dbInfo['dbhost'], $this->dbInfo['dbuser'], $this->dbInfo['dbpass'])) {
            // Database
            if (mysql_select_db($this->dbInfo['dbname'], $c)) {
                mysql_close($c);
                $result = true;
            } else {
                mysql_close($c);
                $result = "Could not find database '{$this->dbInfo['dbname']}'.";
            }
        } else {
            $result = 'Could not connect to ' . $this->dbInfo['dbhost'] . ' as ' . $this->dbInfo['dbuser'] . ' with given password.';
        }

        return $result;
    }
}

?>
<?php


/* Contents included from functions/core-functions.php */
?><?php
/**
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * Error handler.
 *
 * @param $errno
 * @param $errstr
 */
function errorHandler($errno, $errstr, $errFile, $errLine) {
    $reportingLevel = error_reporting();

    // If error reporting is turned off, possibly by @.  Bail out.
    if (!$reportingLevel) {
        return;
    }

    if (defined(DEBUG) || ($errno != E_DEPRECATED && $errno != E_USER_DEPRECATED)) {
        $baseDir = realpath(__DIR__.'/../').'/';
        $errFile = str_replace($baseDir, null, $errFile);

        echo "Error in $errFile line $errLine: ($errno) $errstr\n";
        die();
    }
}

/**
 * Debug echo tool.
 *
 * @param $var
 * @param string $prefix
 */
function decho($var, $prefix = 'debug') {
    echo '<pre><b>' . $prefix . '</b>: ' . htmlspecialchars(print_r($var, true)) . '</pre>';
}

/**
 * Write out a value passed as bytes to its most readable format.
 */
function formatMemorySize($bytes, $precision = 1) {
    $units = array('B', 'K', 'M', 'G', 'T');

    $bytes = max((int)$bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);

    $bytes /= pow(1024, $pow);

    $result = round($bytes, $precision) . $units[$pow];

    return $result;
}

/**
 * Test filesystem permissions.
 */
function testWrite() {
    // Create file
    $file = 'vanilla2test.txt';
    @touch($file);
    if (is_writable($file)) {
        @unlink($file);

        return true;
    } else {
        return false;
    }
}

/**
 *
 *
 * @param $key
 * @param null $collection
 * @param string $default
 * @return string
 */
function getValue($key, $collection = null, $default = '') {
    if (!$collection) {
        $collection = $_POST;
    }
    if (array_key_exists($key, $collection)) {
        return $collection[$key];
    }

    return $default;
}

/**
 * Create a thumbnail from an image file.
 *
 * @param $path
 * @param $thumbPath
 * @param int $height
 * @param int $width
 * @return bool
 */
function generateThumbnail($path, $thumbPath, $height = 50, $width = 50) {
    list($widthSource, $heightSource, $type) = getimagesize($path);

    $XCoord = 0;
    $YCoord = 0;
    $heightDiff = $heightSource - $height;
    $widthDiff = $widthSource - $width;
    if ($widthDiff > $heightDiff) {
        // Crop the original width down
        $newWidthSource = round(($width * $heightSource) / $height);

        // And set the original x position to the cropped start point.
        $XCoord = round(($widthSource - $newWidthSource) / 2);
        $widthSource = $newWidthSource;
    } else {
        // Crop the original height down
        $newHeightSource = round(($height * $widthSource) / $width);

        // And set the original y position to the cropped start point.
        $YCoord = round(($heightSource - $newHeightSource) / 2);
        $heightSource = $newHeightSource;
    }

    try {
        switch ($type) {
            case 1:
                $sourceImage = imagecreatefromgif($path);
                break;
            case 2:
                $sourceImage = imagecreatefromjpeg($path);
                break;
            case 3:
                $sourceImage = imagecreatefrompng($path);
                imagealphablending($sourceImage, true);
                break;
        }

        $targetImage = imagecreatetruecolor($width, $height);
        imagecopyresampled($targetImage, $sourceImage, 0, 0, $XCoord, $YCoord, $width, $height, $widthSource,
            $heightSource);
        imagedestroy($sourceImage);

        switch ($type) {
            case 1:
                imagegif($targetImage, $thumbPath);
                break;
            case 2:
                imagejpeg($targetImage, $thumbPath);
                break;
            case 3:
                imagepng($targetImage, $thumbPath);
                break;
        }
        imagedestroy($targetImage);
    } catch (Exception $e) {
        echo "Could not generate a thumnail for " . $targetImage;
    }
}

/**
 *
 *
 * @param $sql
 * @return array
 */
function parseSelect($sql) {
    if (!preg_match('`^\s*select\s+(.+)\s+from\s+(.+)\s*`is', $sql, $matches)) {
        trigger_error("Could not parse '$sql'", E_USER_ERROR);
    }
    $result = array('Select' => array(), 'From' => '');
    $select = $matches[1];
    $from = $matches[2];

    // Replace commas within function calls.
    $select = preg_replace_callback('`\(([^)]+?)\)`', '_ReplaceCommas', $select);
//   echo($select);
    $parts = explode(',', $select);

    $selects = array();
    foreach ($parts as $expr) {
        $expr = trim($expr);
        $expr = str_replace('!COMMA!', ',', $expr);

        // Check for the star match.
        if (preg_match('`(\w+)\.\*`', $expr, $matches)) {
            $result['Star'] = $matches[1];
        }

        // Check for an alias.
        if (preg_match('`^(.*)\sas\s(.*)$`is', $expr, $matches)) {
//         decho($matches, 'as');
            $alias = trim($matches[2], '`');
            $selects[$alias] = $matches[1];
        } elseif (preg_match('`^[a-z_]?[a-z0-9_]*$`i', $expr)) {
            // We are just selecting one column.
            $selects[$expr] = $expr;
        } elseif (preg_match('`^[a-z_]?[a-z0-9_]*\.([a-z_]?[a-z0-9_]*)$`i', $expr, $matches)) {
            // We are looking at an alias'd select.
            $alias = $matches[1];
            $selects[$alias] = $expr;
        } else {
            $selects[] = $expr;
        }
    }

    $result['Select'] = $selects;
    $result['From'] = $from;
    $result['Source'] = $sql;

    return $result;
}

/**
 * Replace commas with a temporary placeholder.
 *
 * @param $matches
 * @return mixed
 */
function _replaceCommas($matches) {
    return str_replace(',', '!COMMA!', $matches[0]);
}

/**
 *
 * @param type $sql
 * @param array $columns An array in the form Alias => Column or just Column
 * @return type
 */
function replaceSelect($sql, $columns) {
    if (is_string($sql)) {
        $parsed = parseSelect($sql);
    } else {
        $parsed = $sql;
    }

    // Set a prefix for new selects.
    if (isset($parsed['Star'])) {
        $px = $parsed['Star'] . '.';
    } else {
        $px = '';
    }

    $select = $parsed['Select'];

    $newSelect = array();
    foreach ($columns as $index => $value) {
        if (is_numeric($index)) {
            $alias = $value;
        } else {
            $alias = $index;
        }

        if (isset($select[$value])) {
            $newSelect[$alias] = $select[$value];
        } else {
            $newSelect[$alias] = $px . $value;
        }
    }
    $parsed['Select'] = $newSelect;

    if (is_string($sql)) {
        return selectString($parsed);
    } else {
        return $parsed;
    }
}

/**
 *
 *
 * @param $parsed
 * @return string
 */
function selectString($parsed) {
    // Build the select.
    $parts = $parsed['Select'];
    $selects = array();
    foreach ($parts as $alias => $expr) {
        if (is_numeric($alias) || $alias == $expr) {
            $selects[] = $expr;
        } else {
            $selects[] = "$expr as `$alias`";
        }
    }
    $select = implode(",\n  ", $selects);

    $from = $parsed['From'];

    $result = "select\n  $select\nfrom $from";

    return $result;
}

/**
 *
 *
 * @param $paths
 * @param string $delimiter
 * @return mixed
 */
function combinePaths($paths, $delimiter = '/') {
    if (is_array($paths)) {
        $mungedPath = implode($delimiter, $paths);
        $mungedPath = str_replace(array($delimiter . $delimiter . $delimiter, $delimiter . $delimiter),
            array($delimiter, $delimiter), $mungedPath);

        return str_replace(array('http:/', 'https:/'), array('http://', 'https://'), $mungedPath);
    } else {
        return $paths;
    }
}

/**
 * Take the template package, add our new name, and make a new package from it.
 *
 * @param string $name
 */
function spawnPackage($name) {

    if ($name && strlen($name) > 2) {
        $name = preg_replace('/[^A-Za-z0-9]/', '', $name);
        $template = file_get_contents(__DIR__ . '/../tpl_package.txt');
        file_put_contents(__DIR__ . '/../packages/' . $name . '.php', str_replace('__NAME__', $name, $template));
        echo "Created new package: " . $name . "\n";
    } else {
        echo "Invalid name: 2+ alphanumeric characters only.";
    }
}

?>
<?php


/* Contents included from functions/render-functions.php */
?><?php
/**
 * Views for Vanilla 2 export tools.
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * HTML header.
 */
function pageHeader() {
$vanillaLogoBase64Encoded = '';
?>
<!DOCTYPE html>
<html>
<head>
    <title>Vanilla Porter - Forum Export Tool</title>
    <meta charset="UTF-8">
    <!-- Contents included from style.css -->
<style>
body {
   font-family: 'lucida grande','Lucida Sans Unicode', tahoma, sans-serif;
   background: url('http://vanillaforums.com/porter/slicesplash.jpg') top center no-repeat #C7E6FB;
   margin: 0px;
   padding: 0px;
   text-align: center;
}
a,
a:link,
a:active,
a:visited {
   color: #2786C2;
   text-decoration: none;
   }
a:hover {
   color: #FF0084 !important;
   text-decoration: underline;
   }
div.Title {
   background:#E2F4FF none repeat scroll 0 0;
   border-top: 1px solid #A5D0E7;
   border-bottom: 1px solid #A5D0E7;
   margin: 50px 0;
   padding: 32px 0 4px;
}
div.Title h1 {
   text-align: left;
   width: 600px;
   margin: 0 auto;
}
div.Title img {
   top: 52px;
   position: absolute;
}
div.Title p {
   padding: 0 0 0 270px;
   margin: 0;
   font-size: 30px;
}

h1 {
   font-family: Helvetica, Arial, Verdana;
   color: #02455B;
   width: 568px;
   margin: 0 auto;
   padding: 0;
   font-size: 180%;
}
div.Form {
   text-align: center;
}
div.Form ul {
   width: 500px;
   margin: 0 auto;
   padding: 0;
}

div.Errors {
   background: #d00;
   padding: 20px 8px !important;
   margin: 0 0 10px;
   border-bottom: 1px solid #C0E7F5;
}
.Errors li {
   padding: 4px 0 !important;
   border: 0px !important;
   margin: 0px !important;
   color: #fff !important;
   font-size: 16px;
   line-height: 150%;
}
.Errors li pre,
.Errors li code {
   border-radius: 3px;
   -moz-border-radius: 3px;
   -webkit-border-radius: 3px;
   border: 1px solid #b00;
   background: #c00;
   margin: 10px 0 0;
   padding: 4px 8px;
   display: block;
   font-size: 13px;
   font-weight: normal;
   font-family: monospace;
}
.Errors li a {
   color: #ffff00;
   text-decoration: underline;
}
.Errors li a:hover {
   color: #ff0 !important;
   text-decoration: none;
}
.Hidden {
   display: none;
}
/* Forms */
form {
   margin: 0 0 20px;
   text-align: right;
}
form ul {
   text-align: left;
   list-style: none;
   margin: 0px;
   padding: 10px;
}
form ul li {
   padding: 10px 0;
   font-size: 18px;
}
form ul li.Warning {
   padding-bottom: 0;
   border-bottom: 0;
   font-size: 17px;
}
form ul li.Warning div {
   font-size: 14px;
   line-height: 1.6;
   color: #000;
   padding: 16px 0 8px;
}
form label {
   font-family: Arial, Helvetica, Verdana;
   font-weight: bold;
   display: block;
   padding: 8px 0 0;
   font-size: 110%;
   color: #02455B;
}
form label span {
   font-size: 13px;
   color: #555;
   font-weight: normal;
   padding: 0 0 0 10px;
}
form select {
   border-radius: 4px;
   -moz-border-radius: 4px;
   -webkit-border-radius: 4px;
   font-size: 110%;
   padding: 8px;
   width: 496px;
   border: 1px solid #ccc;
   color: #555;
}
form input.InputBox {
   border-radius: 4px;
   -moz-border-radius: 4px;
   -webkit-border-radius: 4px;
   font-size: 110%;
   padding: 8px;
   width: 480px;
   border: 1px solid #ccc;
   color: #555;
}
form input.InputBox:focus {
   color: #000;
   background: #FFFEDE;
   border: 1px solid #aaa;
}
form li.Last {
   padding: 12px 0 2px;
   border-bottom: 0;
}

form fieldset:disabled legend,
form fieldset:disabled label,
form label.disabled {
   color: gray;
}
div.Button {
   text-align: right;
   padding: 12px 0 30px;
   width: 496px;
   margin: 0 auto;
}
div.Button a,
input.Button {
   cursor: pointer;
   font-family: arial, helvetica, verdana;
   font-size: 25px;
   font-weight: bold;
   color: #02475A;
   text-shadow: 0 1px 0 #fff;
   margin: 0;
   padding: 3px 10px;
   background: url('http://vanillaforums.com/porter/buttonbg.png') repeat-x center left #f8f8f8;
   border: 1px solid #999;
   border-radius: 3px;
   -moz-border-radius: 3px;
   -webkit-border-radius: 3px;
   box-shadow: 0px 0px 2px #999;
   -moz-box-shadow: 0px 0px 2px #999;
   -webkit-box-shadow: 0px 0px 2px #999;
}
div.Button a {
   padding: 4px 8px;
}
div.Button a:hover,
input.Button:hover {
   text-decoration: none;
   color: #111;
   border: 1px solid #666;
}
div.Button a:focus,
input.Button:focus {
   background: #eee;
}
/* readme.html */
div.Info {
   text-align: left;
   width: 568px;
   margin: 0 auto 0px;
   line-height: 1.6;
}
div.Info h1 {
   padding: 6px 0 0;
   margin: 0;
}
div.Info p {
   color: #000;
   padding: 3px 0 6px;
   margin: 0;
}
div.Info li {
   color: #000;
   padding: 1px 0;
   margin: 0;
}
.Version {
   font-size: 9pt;
   font-weight: normal;
}
.Info .DownloadLink {
   padding: 10px 0 100px;
}

/* Feature list */
.Info dl { }
.Info dt {
   float: left;
   clear: left;
   width: 180px;

}
.Info dt, dd {
   border-bottom: 1px solid #E2F4FF;
   height: 30px;
}

/* Feature table */
table.Features {
   padding: 0 0 50px;
   margin: 90px auto 0;
}
table.Features td {
   padding: 2px 12px;
   border-right: 1px solid #E2F4FF;
   border-bottom: 1px dashed #E2F4FF;
}
.FeatureName {
   text-align: left;
}
.No {
   color: darkred;
   font-width: bold;
   font-size: 1.2em;
}
.Yes {
   color: limegreen;
   text-shadow: 0px 1px #555;
   font-width: bold;
   font-size: 1.2em;
}
.FeatureTitle {
   margin-bottom: 0;
}

/* Feature table column headings */
th.Platform {
  /* Something you can count on */
  height: 140px;
  white-space: nowrap;
  font-weight: normal;
}
th.Platform > div {
  transform:
    /* Magic Numbers */
    translate(25px, 51px)
    /* 45 is really 360 - 45 */
    rotate(315deg);
  width: 30px;
}
th.Platform > div > span {
  border-bottom: 1px solid #E2F4FF;
  padding: 5px 4px;
}
</style>
    <!-- Contents included from jquery.min.js -->
<script>
/*! jQuery v2.1.4 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b="length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}});function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+K.uid++}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){
    return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=L.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var aa=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ba=/<([\w:]+)/,ca=/<|&#?\w+;/,da=/<(?:script|style|link)/i,ea=/checked\s*(?:[^=]|=\s*.checked.)/i,fa=/^$|\/(?:java|ecma)script/i,ga=/^true\/(.*)/,ha=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ia={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ia.optgroup=ia.option,ia.tbody=ia.tfoot=ia.colgroup=ia.caption=ia.thead,ia.th=ia.td;function ja(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function ka(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function la(a){var b=ga.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function ma(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function na(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function oa(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pa(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=oa(h),f=oa(a),d=0,e=f.length;e>d;d++)pa(f[d],g[d]);if(b)if(c)for(f=f||oa(a),g=g||oa(h),d=0,e=f.length;e>d;d++)na(f[d],g[d]);else na(a,h);return g=oa(h,"script"),g.length>0&&ma(g,!i&&oa(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(ca.test(e)){f=f||k.appendChild(b.createElement("div")),g=(ba.exec(e)||["",""])[1].toLowerCase(),h=ia[g]||ia._default,f.innerHTML=h[1]+e.replace(aa,"<$1></$2>")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));k.textContent="",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=oa(k.appendChild(e),"script"),i&&ma(f),c)){j=0;while(e=f[j++])fa.test(e.type||"")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(oa(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&ma(oa(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(oa(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!da.test(a)&&!ia[(ba.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(aa,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(oa(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(oa(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&ea.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(oa(c,"script"),ka),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,oa(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,la),j=0;g>j;j++)h=f[j],fa.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(ha,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qa,ra={};function sa(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function ta(a){var b=l,c=ra[a];return c||(c=sa(a,b),"none"!==c&&c||(qa=(qa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qa[0].contentDocument,b.write(),b.close(),c=sa(a,b),qa.detach()),ra[a]=c),c}var ua=/^margin/,va=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wa=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)};function xa(a,b,c){var d,e,f,g,h=a.style;return c=c||wa(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),va.test(g)&&ua.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function ya(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");if(f.style){f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f);function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),f.removeChild(c),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var za=/^(none|table(?!-c[ea]).+)/,Aa=new RegExp("^("+Q+")(.*)$","i"),Ba=new RegExp("^([+-])=("+Q+")","i"),Ca={position:"absolute",visibility:"hidden",display:"block"},Da={letterSpacing:"0",fontWeight:"400"},Ea=["Webkit","O","Moz","ms"];function Fa(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Ea.length;while(e--)if(b=Ea[e]+c,b in a)return b;return d}function Ga(a,b,c){var d=Aa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Ha(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ia(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wa(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xa(a,b,f),(0>e||null==e)&&(e=a.style[b]),va.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Ha(a,b,c||(g?"border":"content"),d,f)+"px"}function Ja(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",ta(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xa(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fa(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Ba.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fa(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xa(a,b,d)),"normal"===e&&b in Da&&(e=Da[b]),""===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?za.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Ca,function(){return Ia(a,b,d)}):Ia(a,b,d):void 0},set:function(a,c,d){var e=d&&wa(a);return Ga(a,c,d?Ha(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=ya(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ua.test(a)||(n.cssHooks[a+b].set=Ga)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wa(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Ja(this,!0)},hide:function(){return Ja(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Ka(a,b,c,d,e){return new Ka.prototype.init(a,b,c,d,e)}n.Tween=Ka,Ka.prototype={constructor:Ka,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ka.propHooks[this.prop];return a&&a.get?a.get(this):Ka.propHooks._default.get(this)},run:function(a){var b,c=Ka.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ka.propHooks._default.set(this),this}},Ka.prototype.init.prototype=Ka.prototype,Ka.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Ka.propHooks.scrollTop=Ka.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Ka.prototype.init,n.fx.step={};var La,Ma,Na=/^(?:toggle|show|hide)$/,Oa=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pa=/queueHooks$/,Qa=[Va],Ra={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Oa.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Oa.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sa(){return setTimeout(function(){La=void 0}),La=n.now()}function Ta(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ua(a,b,c){for(var d,e=(Ra[b]||[]).concat(Ra["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Va(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?L.get(a,"olddisplay")||ta(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Na.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?ta(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ua(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wa(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xa(a,b,c){var d,e,f=0,g=Qa.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=La||Sa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:La||Sa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wa(k,j.opts.specialEasing);g>f;f++)if(d=Qa[f].call(j,a,k,j.opts))return d;return n.map(k,Ua,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xa,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Ra[c]=Ra[c]||[],Ra[c].unshift(b)},prefilter:function(a,b){b?Qa.unshift(a):Qa.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xa(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pa.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Ta(b,!0),a,d,e)}}),n.each({slideDown:Ta("show"),slideUp:Ta("hide"),slideToggle:Ta("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(La=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),La=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ma||(Ma=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Ma),Ma=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Ya,Za,$a=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Za:Ya)),
    void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Za={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$a[b]||n.find.attr;$a[b]=function(a,b,d){var e,f;return d||(f=$a[b],$a[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$a[b]=f),e}});var _a=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_a.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ab=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||a===!1?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ab," ").indexOf(b)>=0)return!0;return!1}});var bb=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(bb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cb=n.now(),db=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var eb=/#.*$/,fb=/([?&])_=[^&]*/,gb=/^(.*?):[ \t]*([^\r\n]*)$/gm,hb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ib=/^(?:GET|HEAD)$/,jb=/^\/\//,kb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,lb={},mb={},nb="*/".concat("*"),ob=a.location.href,pb=kb.exec(ob.toLowerCase())||[];function qb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function rb(a,b,c,d){var e={},f=a===mb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function sb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function tb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function ub(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ob,type:"GET",isLocal:hb.test(pb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":nb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?sb(sb(a,n.ajaxSettings),b):sb(n.ajaxSettings,a)},ajaxPrefilter:qb(lb),ajaxTransport:qb(mb),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=gb.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||ob)+"").replace(eb,"").replace(jb,pb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=kb.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===pb[1]&&h[2]===pb[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(pb[3]||("http:"===pb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),rb(lb,k,b,v),2===t)return v;i=n.event&&k.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!ib.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(db.test(d)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=fb.test(d)?d.replace(fb,"$1_="+cb++):d+(db.test(d)?"&":"?")+"_="+cb++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+nb+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=rb(mb,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=tb(k,v,f)),u=ub(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),w=v.getResponseHeader("etag"),w&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var vb=/%20/g,wb=/\[\]$/,xb=/\r?\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&").replace(vb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(xb,"\r\n")}}):{name:b.name,value:c.replace(xb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Bb=0,Cb={},Db={0:200,1223:204},Eb=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Cb)Cb[a]()}),k.cors=!!Eb&&"withCredentials"in Eb,k.ajax=Eb=!!Eb,n.ajaxTransport(function(a){var b;return k.cors||Eb&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Bb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Cb[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Db[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Cb[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Fb=[],Gb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Fb.pop()||n.expando+"_"+cb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Gb.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Gb,"$1"+e):b.jsonp!==!1&&(b.url+=(db.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Fb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Hb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Hb)return Hb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Ib=a.document.documentElement;function Jb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Jb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Ib;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ib})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Jb(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=ya(k.pixelPosition,function(a,c){return c?(c=xa(a,b),va.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Kb=a.jQuery,Lb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Lb),b&&a.jQuery===n&&(a.jQuery=Kb),n},typeof b===U&&(a.jQuery=a.$=n),n});
</script>
</head>
<body>
<div id="Frame">
    <div id="Content">
        <div class="Title">
            <h1>
                <img src="data:image/png;base64,<?=$vanillaLogoBase64Encoded?>" alt="Vanilla">

                <p>Vanilla Porter <span class="Version">Version <?php echo APPLICATION_VERSION; ?></span></p>
            </h1>
        </div>
        <?php
        }

        /**
         * HTML footer.
         */
        function pageFooter() {
        ?>
    </div>
</div>
</body>
</html><?php

}

/**
 * Message: Write permission fail.
 */
function viewNoPermission($msg) {
    pageHeader(); ?>
    <div class="Messages Errors">
        <ul>
            <li><?php echo $msg; ?></li>
        </ul>
    </div>

    <?php pageFooter();
}

/**
 * Form: Database connection info.
 */
function viewForm($data) {
    $forums = getValue('Supported', $data, array());
    $msg = getValue('Msg', $data, '');
    $canWrite = getValue('CanWrite', $data, null);

    if ($canWrite === null) {
        $canWrite = testWrite();
    }
    if (!$canWrite) {
        $msg = 'The porter does not have write permission to write to this folder. You need to give the porter permission to create files so that it can generate the export file.' . $msg;
    }

    if (defined('CONSOLE')) {
        echo $msg . "\n";

        return;
    }

    pageHeader(); ?>
    <div class="Info">
        Howdy, stranger! Glad to see you headed our way.
        For help,
        <a href="http://docs.vanillaforums.com/developers/importing/porter" style="text-decoration:underline;"
           target="_blank">peek at the docs</a>.
        To see what data we can grab from your platform,
        <a href="?features=1" style="text-decoration:underline;">see this table</a>.
    </div>
    <form action="<?php echo $_SERVER['PHP_SELF'] . '?' . http_build_query($_GET); ?>" method="post">
        <input type="hidden" name="step" value="info"/>

        <div class="Form">
            <?php if ($msg != '') : ?>
                <div class="Messages Errors">
                    <ul>
                        <li><?php echo $msg; ?></li>
                    </ul>
                </div>
            <?php endif; ?>
            <ul>
                <li>
                    <label>
                        Source Forum Type
                        <select name="type" id="ForumType">
                            <?php foreach ($forums as $forumClass => $forumInfo) : ?>
                                <option value="<?php echo $forumClass; ?>"<?php
                                if (getValue('type') == $forumClass) {
                                    echo ' selected="selected"';
                                } ?>><?php echo $forumInfo['name']; ?></option>
                            <?php endforeach; ?>
                        </select>
                    </label>
                </li>
                <li>
                    <label>Table Prefix <span>Most installations have a database prefix. If you&rsquo;re sure you don&rsquo;t have one, leave this blank.</span>
                        <input class="InputBox" type="text" name="prefix"
                            value="<?php echo htmlspecialchars(getValue('prefix')) != '' ? htmlspecialchars(getValue('prefix')) : $forums['vanilla1']['prefix']; ?>"
                            id="ForumPrefix"/>
                    </label>
                </li>
                <li>
                    <label>
                        Database Host <span>Usually "localhost".</span>
                        <input class="InputBox" type="text" name="dbhost"
                            value="<?php echo htmlspecialchars(getValue('dbhost', '', 'localhost')) ?>"/>
                    </label>
                </li>
                <li>
                    <label>
                        Database Name
                        <input class="InputBox" type="text" name="dbname"
                            value="<?php echo htmlspecialchars(getValue('dbname')) ?>"/>
                    </label>
                </li>
                <li>
                    <label>
                        Database Username
                        <input class="InputBox" type="text" name="dbuser"
                            value="<?php echo htmlspecialchars(getValue('dbuser')) ?>"/>
                    </label>
                </li>
                <li>
                    <label>Database Password
                        <input class="InputBox" type="password" name="dbpass" value="<?php echo getValue('dbpass') ?>"/>
                    </label>
                </li>
                <li>
                    <label>
                        Export Type
                        <select name="tables" id="ExportTables">
                            <option value="">All supported data</option>
                            <option value="User,Role,UserRole,Permission">Only users and roles</option>
                        </select>
                    </label>
                </li>
                <li id="FileExports">
                    <fieldset>
                        <legend>Export Options:</legend>
                        <label>
                            Avatars
                            <input type="checkbox" name="avatars" value="1">
                        </label>
                        <label>
                            Files
                            <input type="checkbox" name="files" value="1">
                        </label>

                    </fieldset>
                </li>
            </ul>
            <div class="Button">
                <input class="Button" type="submit" value="Begin Export"/>
            </div>
        </div>
    </form>
    <script type="text/javascript">
        $('#ForumType')
            .change(function() {
                var type = $(this).val();
                switch (type) {
                    <?php
                    foreach($forums as $forumClass => $forumInfo) {
                        $exportOptions = "\$('#FileExports > fieldset, #FileExports input').prop('disabled', true);";

                        $hasAvatars = !empty($forumInfo['features']['Avatars']);
                        $hasAttachments = !empty($forumInfo['features']['Attachments']);

                        if ($hasAvatars || $hasAttachments) {
                            $exportOptions = "\$('#FileExports > fieldset').prop('disabled', false);";
                            $exportOptions .= "\$('#FileExports input[name=avatars]').prop('disabled', ".($hasAvatars ? 'false' : 'true').")";
                            if ($hasAvatars) {
                                $exportOptions .= ".parent().removeClass('disabled');";
                            } else {
                                $exportOptions .= ".parent().addClass('disabled');";
                            }
                            $exportOptions .= "\$('#FileExports input[name=files]').prop('disabled', ".($hasAttachments ? 'false' : 'true').")";
                            if ($hasAttachments) {
                                $exportOptions .= ".parent().removeClass('disabled');";
                            } else {
                                $exportOptions .= ".parent().addClass('disabled');";
                            }
                        }
                    ?>
                    case '<?= $forumClass; ?>':
                    <?= $exportOptions; ?>
                        $('#ForumPrefix').val('<?= $forumInfo['prefix']; ?>');
                        break;
                    <?php } ?>
                }
            })
            .trigger('change');
    </script>

    <?php pageFooter();
}

/**
 * Message: Result of export.
 *
 * @param array $msgs Comments / logs from the export.
 * @param string $class CSS class for wrapper.
 * @param string|bool $path Path to file for download, or false.
 */
function viewExportResult($msgs = array(), $class = 'Info', $path = false) {
    if (defined('CONSOLE')) {
        return;
    }

    pageHeader();

    echo "<p class=\"DownloadLink\">Success!";
    if ($path) {
        " <a href=\"$path\"><b>Download exported file</b></a>";
    }
    echo "</p>";

    if (count($msgs)) {
        echo "<div class=\"$class\">";
        echo "<p>Really boring export logs follow:</p>\n";
        foreach ($msgs as $msg) {
            echo "<p>$msg</p>\n";
        }

        echo "<p>It worked! You&rsquo;re free! Sweet, sweet victory.</p>\n";
        echo "</div>";
    }
    pageFooter();
}

/**
 * Output a definition list of features for a single platform.
 *
 * @param string $platform
 * @param array $features
 */
function viewFeatureList($platform, $features = array()) {
    global $supported;

    pageHeader();

    echo '<div class="Info">';
    echo '<h2>' . $supported[$platform]['name'] . '</h2>';
    echo '<dl>';

    foreach ($features as $feature => $trash) {
        echo '
      <dt>' . featureName($feature) . '</dt>
      <dd>' . featureStatus($platform, $feature) . '</dd>';
    }
    echo '</dl>';

    pageFooter();
}

/**
 * Output a table of features per all platforms.
 *
 * @param array $features
 */
function viewFeatureTable($features = array()) {
    global $supported;
    $platforms = array_keys($supported);

    pageHeader();
    echo '<h2 class="FeatureTitle">Data currently supported per platform</h2>';
    echo '<p>Click any platform name for details, or <a href="/" style="text-decoration:underline;">go back</a>.</p>';
    echo '<table class="Features"><thead><tr>';

    // Header row of labels for each platform
    echo '<th><i>Feature</i></th>';
    foreach ($platforms as $slug) {
        echo '<th class="Platform"><div><span><a href="?features=1&type=' . $slug . '">' . $supported[$slug]['name'] . '</a></span></div></th>';
    }

    echo '</tr></thead><tbody>';

    // Checklist of features per platform.
    foreach ($features as $feature => $trash) {
        // Name
        echo '<tr><td class="FeatureName">' . featureName($feature) . '</td>';

        // Status per platform.
        foreach ($platforms as $platform) {
            echo '<td>' . featureStatus($platform, $feature, false) . '</td>';
        }
        echo '</tr>';
    }

    echo '</tbody></table>';
    pageFooter();
}

?>
<?php


/* Contents included from functions/filter-functions.php */
?><?php
/**
 * Filter functions for passing thru values during export.
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * Don't allow zero-equivalent dates.
 *
 * @param $value
 * @return string
 */
function forceDate($value) {
    if (!$value || preg_match('`0000-00-00`', $value)) {
        return gmdate('Y-m-d H:i:s');
    }

    return $value;
}

/**
 * Only allow IPv4 addresses to pass.
 *
 * @param $ip
 * @return string|null Valid IPv4 address or nuthin'.
 */
function forceIP4($ip) {
    if (preg_match('`(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})`', $ip, $m)) {
        $ip = $m[1];
    } else {
        $ip = null;
    }

    return $ip;
}

/**
 * Creates URL codes containing only lowercase Roman letters, digits, and hyphens.
 * Converted from Gdn_Format::Url
 *
 * @param string $str A string to be formatted.
 * @return string
 */
function formatUrl($str) {
    $urlTranslations = array(
        '–' => '-',
        '—' => '-',
        'À' => 'A',
        'Á' => 'A',
        'Â' => 'A',
        'Ã' => 'A',
        'Ä' => 'Ae',
        'Ä' => 'A',
        'Å' => 'A',
        'Ā' => 'A',
        'Ą' => 'A',
        'Ă' => 'A',
        'Æ' => 'Ae',
        'Ç' => 'C',
        'Ć' => 'C',
        'Č' => 'C',
        'Ĉ' => 'C',
        'Ċ' => 'C',
        'Ď' => 'D',
        'Đ' => 'D',
        'Ð' => 'D',
        'È' => 'E',
        'É' => 'E',
        'Ê' => 'E',
        'Ë' => 'E',
        'Ē' => 'E',
        'Ě' => 'E',
        'Ĕ' => 'E',
        'Ė' => 'E',
        'Ĝ' => 'G',
        'Ğ' => 'G',
        'Ġ' => 'G',
        'Ģ' => 'G',
        'Ĥ' => 'H',
        'Ħ' => 'H',
        'Ì' => 'I',
        'Í' => 'I',
        'Î' => 'I',
        'Ï' => 'I',
        'Ī' => 'I',
        'Ĩ' => 'I',
        'Ĭ' => 'I',
        'Į' => 'I',
        'İ' => 'I',
        'Ĳ' => 'IJ',
        'Ĵ' => 'J',
        'Ķ' => 'K',
        'Ł' => 'K',
        'Ľ' => 'K',
        'Ĺ' => 'K',
        'Ļ' => 'K',
        'Ŀ' => 'K',
        'Ñ' => 'N',
        'Ń' => 'N',
        'Ň' => 'N',
        'Ņ' => 'N',
        'Ŋ' => 'N',
        'Ò' => 'O',
        'Ó' => 'O',
        'Ô' => 'O',
        'Õ' => 'O',
        'Ö' => 'Oe',
        'Ö' => 'Oe',
        'Ō' => 'O',
        'Ő' => 'O',
        'Ŏ' => 'O',
        'Œ' => 'OE',
        'Ŕ' => 'R',
        'Ŗ' => 'R',
        'Ś' => 'S',
        'Š' => 'S',
        'Ş' => 'S',
        'Ŝ' => 'S',
        'Ť' => 'T',
        'Ţ' => 'T',
        'Ŧ' => 'T',
        'Ț' => 'T',
        'Ù' => 'U',
        'Ú' => 'U',
        'Û' => 'U',
        'Ü' => 'Ue',
        'Ū' => 'U',
        'Ü' => 'Ue',
        'Ů' => 'U',
        'Ű' => 'U',
        'Ŭ' => 'U',
        'Ũ' => 'U',
        'Ų' => 'U',
        'Ŵ' => 'W',
        'Ý' => 'Y',
        'Ŷ' => 'Y',
        'Ÿ' => 'Y',
        'Ź' => 'Z',
        'Ž' => 'Z',
        'Ż' => 'Z',
        'Þ' => 'T',
        'à' => 'a',
        'á' => 'a',
        'â' => 'a',
        'ã' => 'a',
        'ä' => 'ae',
        'ä' => 'ae',
        'å' => 'a',
        'ā' => 'a',
        'ą' => 'a',
        'ă' => 'a',
        'æ' => 'ae',
        'ç' => 'c',
        'ć' => 'c',
        'č' => 'c',
        'ĉ' => 'c',
        'ċ' => 'c',
        'ď' => 'd',
        'đ' => 'd',
        'ð' => 'd',
        'è' => 'e',
        'é' => 'e',
        'ê' => 'e',
        'ë' => 'e',
        'ē' => 'e',
        'ę' => 'e',
        'ě' => 'e',
        'ĕ' => 'e',
        'ė' => 'e',
        'ƒ' => 'f',
        'ĝ' => 'g',
        'ğ' => 'g',
        'ġ' => 'g',
        'ģ' => 'g',
        'ĥ' => 'h',
        'ħ' => 'h',
        'ì' => 'i',
        'í' => 'i',
        'î' => 'i',
        'ï' => 'i',
        'ī' => 'i',
        'ĩ' => 'i',
        'ĭ' => 'i',
        'į' => 'i',
        'ı' => 'i',
        'ĳ' => 'ij',
        'ĵ' => 'j',
        'ķ' => 'k',
        'ĸ' => 'k',
        'ł' => 'l',
        'ľ' => 'l',
        'ĺ' => 'l',
        'ļ' => 'l',
        'ŀ' => 'l',
        'ñ' => 'n',
        'ń' => 'n',
        'ň' => 'n',
        'ņ' => 'n',
        'ŉ' => 'n',
        'ŋ' => 'n',
        'ò' => 'o',
        'ó' => 'o',
        'ô' => 'o',
        'õ' => 'o',
        'ö' => 'oe',
        'ö' => 'oe',
        'ø' => 'o',
        'ō' => 'o',
        'ő' => 'o',
        'ŏ' => 'o',
        'œ' => 'oe',
        'ŕ' => 'r',
        'ř' => 'r',
        'ŗ' => 'r',
        'š' => 's',
        'ù' => 'u',
        'ú' => 'u',
        'û' => 'u',
        'ü' => 'ue',
        'ū' => 'u',
        'ü' => 'ue',
        'ů' => 'u',
        'ű' => 'u',
        'ŭ' => 'u',
        'ũ' => 'u',
        'ų' => 'u',
        'ŵ' => 'w',
        'ý' => 'y',
        'ÿ' => 'y',
        'ŷ' => 'y',
        'ž' => 'z',
        'ż' => 'z',
        'ź' => 'z',
        'þ' => 't',
        'ß' => 'ss',
        'ſ' => 'ss',
        'А' => 'A',
        'Б' => 'B',
        'В' => 'V',
        'Г' => 'G',
        'Д' => 'D',
        'Е' => 'E',
        'Ё' => 'YO',
        'Ж' => 'ZH',
        'З' => 'Z',
        'Й' => 'Y',
        'К' => 'K',
        'Л' => 'L',
        'М' => 'M',
        'Н' => 'N',
        'О' => 'O',
        'П' => 'P',
        'Р' => 'R',
        'С' => 'S',
        'ș' => 's',
        'ț' => 't',
        'Ț' => 'T',
        'Т' => 'T',
        'У' => 'U',
        'Ф' => 'F',
        'Х' => 'H',
        'Ц' => 'C',
        'Ч' => 'CH',
        'Ш' => 'SH',
        'Щ' => 'SCH',
        'Ъ' => '',
        'Ы' => 'Y',
        'Ь' => '',
        'Э' => 'E',
        'Ю' => 'YU',
        'Я' => 'YA',
        'а' => 'a',
        'б' => 'b',
        'в' => 'v',
        'г' => 'g',
        'д' => 'd',
        'е' => 'e',
        'ё' => 'yo',
        'ж' => 'zh',
        'з' => 'z',
        'и' => 'i',
        'й' => 'y',
        'к' => 'k',
        'л' => 'l',
        'м' => 'm',
        'н' => 'n',
        'о' => 'o',
        'п' => 'p',
        'р' => 'r',
        'с' => 's',
        'т' => 't',
        'у' => 'u',
        'ф' => 'f',
        'х' => 'h',
        'ц' => 'c',
        'ч' => 'ch',
        'ш' => 'sh',
        'щ' => 'sch',
        'ъ' => '',
        'ы' => 'y',
        'ь' => '',
        'э' => 'e',
        'ю' => 'yu',
        'я' => 'ya'
    );

    // Preliminary decoding
    $str = strip_tags(html_entity_decode($str, ENT_COMPAT, 'UTF-8'));
    $str = strtr($str, $urlTranslations);
    $str = preg_replace('`[\']`', '', $str);

    // Test for Unicode PCRE support
    // On non-UTF8 systems this will result in a blank string.
    $unicodeSupport = (preg_replace('`[\pP]`u', '', 'P') != '');

    // Convert punctuation, symbols, and spaces to hyphens
    if ($unicodeSupport) {
        $str = preg_replace('`[\pP\pS\s]`u', '-', $str);
    } else {
        $str = preg_replace('`[\s_[^\w\d]]`', '-', $str);
    }

    // Lowercase, no trailing or repeat hyphens
    $str = preg_replace('`-+`', '-', strtolower($str));
    $str = trim($str, '-');

    return rawurlencode($str);
}

/**
 * Decode the HTML out of a value.
 */
function HTMLDecoder($value) {
    $characterSet = (defined('PORTER_CHARACTER_SET')) ? PORTER_CHARACTER_SET : 'UTF-8';

    switch ($characterSet) {
        case 'latin1':
            $characterSet = 'ISO-8859-1';
            break;
        case 'latin9':
            $characterSet = 'ISO-8859-15';
            break;
        case 'utf8':
            $characterSet = 'UTF-8';
            break;
    }

    return html_entity_decode($value, ENT_QUOTES, $characterSet);
}

/**
 * Inverse int value.
 *
 * @param $value
 * @return int
 */
function notFilter($value) {
    return (int)(!$value);
}

/**
 * Convert a timestamp to MySQL date format.
 *
 * Do this in MySQL with FROM_UNIXTIME() instead whenever possible.
 *
 * @param $value
 * @return null|string
 */
function timestampToDate($value) {
    if ($value == null) {
        return null;
    } else {
        return gmdate('Y-m-d H:i:s', $value);
    }
}

/**
 * Wrapper for long2ip that nulls 'false' values.
 *
 * @param $value
 * @return null|string
 */
function long2ipf($value) {
    if (!$value) {
        return null;
    }

    return long2ip($value);
}

/**
 * Convert 'y/n' to boolean.
 *
 * @param $value
 * @return int
 */
function YNBool($value) {
    if ($value == 'y') {
        return 1;
    } else {
        return 0;
    }
}

/**
 * Guess the Format of the Body.
 *
 * @param $value
 * @return string
 */
function guessFormat($value) {
    if (strpos($value, '[') !== false) {
        return 'BBCode';
    } elseif (strpos($value, '<') !== false) {
        return 'Html';
    } else {
        return 'BBCode';
    }
}

/**
 * Derive mimetype from file extension.
 *
 * @param $value
 * @return string
 */
function mimeTypeFromExtension($value) {

    if (strpos($value, '.') === 0) {
        $value = substr($value, 1);
    }

    switch ($value) {
        case 'png':
        case 'jpg':
        case 'jpeg':
        case 'gif':
        case 'bmp':
            return 'image/' . $value;
        case 'zip':
        case 'doc':
        case 'docx':
        case 'pdf':
        case 'xls':
        case 'swf':
            return 'application/' . $value;
        case 'txt':
        case 'htm':
        case 'html':
            return 'text/' . $value;
        case 'mov':
        case 'avi':
            return 'video/' . $value;
    }
}

/**
 * Change square brackets to braces.
 *
 * @param $value
 * @return mixed
 */
function cleanBodyBrackets($value) {
    if (strpos($value, '[') !== false) {
        $result = str_replace(array('<', '>'), array('[', ']'), $value);

        return $result;
    }

    return $value;
}

?>
<?php


/* Contents included from functions/commandline-functions.php */
?><?php
/**
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$globalOptions = array(
    // Used shortcodes: t, n, u, p, h, x, a, c, f, d, o, s
    'type' => array(
        'Type of forum we\'re freeing you from.',
        'Req' => true,
        'Sx' => ':',
        'Field' => 'type',
        'Short' => 't',
    ),
    'dbname' => array(
        'Database name.',
        'Req' => true,
        'Sx' => ':',
        'Field' => 'dbname',
        'Short' => 'n',
    ),
    'user' => array(
        'Database connection username.',
        'Req' => true,
        'Sx' => ':',
        'Field' => 'dbuser',
        'Short' => 'u',
    ),
    'password' => array(
        'Database connection password.',
        'Sx' => '::',
        'Field' => 'dbpass',
        'Short' => 'p',
        'Default' => '',
    ),
    'host' => array(
        'IP address or hostname to connect to. Default is 127.0.0.1.',
        'Sx' => ':',
        'Field' => 'dbhost',
        'Short' => 'o',
        'Default' => '127.0.0.1',
    ),
    'prefix' => array(
        'The table prefix in the database.',
        'Field' => 'prefix',
        'Sx' => ':',
        'Short' => 'x',
        'Default' => 'PACKAGE_DEFAULT',
    ),
    'avatars' => array(
        'Enables exporting avatars from the database if supported.',
        'Sx' => '::',
        'Field' => 'avatars',
        'Short' => 'a',
        'Default' => false,
    ),
    'cdn' => array(
        'Prefix to be applied to file paths.',
        'Field' => 'cdn',
        'Sx' => ':',
        'Short' => 'c',
        'Default' => '',
    ),
    'files' => array(
        'Enables exporting attachments from database if supported.',
        'Sx' => '::',
        'Short' => 'f',
        'Default' => false,
    ),
    'destpath' => array(
        'Define destination path for the export file.',
        'Sx' => '::',
        'Short' => 'd',
        'Default' => './',
    ),
    'spawn' => array(
        'Create a new package with this name.',
        'Sx' => '::',
        'Short' => 's',
        'Default' => '',
    ),
    'help' => array(
        'Show this help, duh.',
        'Short' => 'h',
    ),
    'tables' => array(
        'Selective export, limited to specified tables, if provided',
        'Sx' => ':',
        'Short' => 's',
    )
);

// Go through all of the supported types and add them to the type description.
if (isset($supported)) {
    $globalOptions['type']['Values'] = array_keys($supported);
}

function getAllCommandLineOptions($sections = false) {
    global $globalOptions, $supported;

    if ($sections) {
        $result['Global Options'] = $globalOptions;
    } else {
        $result = $globalOptions;
    }

    foreach ($supported as $type => $options) {
        $commandLine = v('CommandLine', $options);
        if (!$commandLine) {
            continue;
        }

        if ($sections) {
            $result[$options['name']] = $commandLine;
        } else {
            // We need to add the types to each command line option for validation purposes.
            foreach ($commandLine as $longCode => $row) {
                if (isset($result[$longCode])) {
                    $result[$longCode]['Types'][] = $type;
                } else {
                    $row['Types'] = array($type);
                    $result[$longCode] = $row;
                }
            }
        }
    }

    return $result;
}

function getOptCodes($options) {
    $shortCodes = '';
    $longCodes = array();

    foreach ($options as $longCode => $row) {
        $sx = v('Sx', $row, '');
        $short = v('Short', $row, '');

        if ($short) {
            $shortCodes .= $short . $sx;
        }
        $longCodes[] = $longCode . $sx;
    }

    return array($shortCodes, $longCodes);
}

function parseCommandLine($options = null, $files = null) {
    global $globalOptions, $supported, $argv;

    if (isset($options)) {
        $globalOptions = $options;
    }
    if (!isset($globalOptions)) {
        $globalOptions = array();
    }
    if (!isset($supported)) {
        $supported = array();
    }

    $commandOptions = getAllCommandLineOptions();

    list($shortCodes, $longCodes) = getOptCodes($commandOptions);

    $opts = getOptFromArgv($shortCodes, $longCodes);

    if (isset($opts['help']) || isset($opts['h'])) {
        writeCommandLineHelp();
        die();
    }

    // Spawn new packages from the command line!
    if (isset($opts['spawn']) || isset($opts['s'])) {
        $name = (isset($opts['spawn'])) ? $opts['spawn'] : $opts['s'];
        spawnPackage($name);
        die();
    }

    $opts = validateCommandLine($opts, $commandOptions);

    if (is_array($files)) {
        $opts2 = array();
        foreach ($files as $name) {
            $value = array_pop($argv);
            if (!$value) {
                echo "Missing required parameter: $name";
            } else {
                $opts2[$name] = $value;
            }
        }
        if ($opts2) {
            if ($opts === false) {
                $opts = $opts2;
            } else {
                $opts = array_merge($opts, $opts2);
            }
        }
    }

    if ($opts === false) {
        die();
    }

    $_POST = $opts;

    return $opts;
}

/**
 * Basically does the same thing than getopt() with one minor difference.
 *
 * The difference is that an empty option (-o="" || -o= || --option="" || --option=)
 * will show up in the result as if the the option is set with an empty value.
 *
 * @see getopt
 *
 * @param $shortCodes
 * @param $longCodes
 * @return array
 */
function getOptFromArgv($shortCodes, $longCodes) {
    global $argv;

    $options = array();

    $shortCodesArray = array();
    $longCodesArray = array();

    $matches = array();
    if (strlen($shortCodes) > 1 && preg_match_all('#([a-z\d])(:{0,2})#i', $shortCodes, $matches, PREG_SET_ORDER) != false) {
        foreach($matches as $match) {
            $shortCodesArray[$match[1]] = strlen($match[2]);
        }
    }

    foreach($longCodes as $longCode) {
        $explodedLongCode = explode(':', $longCode);
        $longCodesArray[$explodedLongCode[0]] = count($explodedLongCode) - 1;
    }

    $argvCount = count($argv);
    for ($i = 1; $i < $argvCount; $i++) {
        $currentArg = $argv[$i];

        $matches = array();
        if (preg_match('#^(-{1,2})([a-z\d]+)(?:=(.*))?$#i', $currentArg, $matches) === 1) {

            $optionType = $matches[1];
            $optionName = $matches[2];

            $optionValue = isset($matches[3]) ? $matches[3] : null;

            if ($optionType === '-') {
                $argType = 'short';
            } else {
                $argType = 'long';
            }

            if (!isset(${$argType.'CodesArray'}[$optionName])) {
                continue;
            }

            $optionValueRequirement = ${$argType.'CodesArray'}[$optionName];

            if ($optionValueRequirement === 0) { // 0 = No value permitted
                if ($optionValue !== null) {
                    continue;
                }
            } elseif ($optionValueRequirement === 1) { // 1 = Value required
                if ($optionValue === null) {
                    continue;
                }
            }

            $options[$optionName] = $optionValue;
        }
    }

    return $options;
}

function validateCommandLine($values, $options) {
    $errors = array();
    $result = array();

    $type = v('type', $values, v('t', $values));

    foreach ($options as $longCode => $row) {
        $req = v('Req', $row);
        $short = v('Short', $row);

        $types = v('Types', $row);

        if ($types && !in_array($type, $types)) {
            continue;
        }

        if (array_key_exists($longCode, $values)) {
            $value = $values[$longCode];
            if ($value === null) {
                $value = true;
            }
        } elseif ($short && array_key_exists($short, $values)) {
            $value = $values[$short];
            if ($value === null) {
                $value = true;
            }
        } elseif (isset($row['Default'])) {
            $value = $row['Default'];
        } else {
            $value = null;
        }

        if ($value === null) {
            $default = v('Default', $row, null);
            if ($default === null) {
                if ($req) {
                    $errors[] = "Missing required parameter: $longCode";
                }

                continue;
            } else {
                $value = $default;
            }
        }

        if ($allowedValues = v('Values', $row)) {
            if (!in_array($value, $allowedValues)) {
                $errors[] = "Invalid value for parameter: $longCode. Must be one of: " . implode(', ', $allowedValues);
                continue;
            }
        }

        $field = v('Field', $row, $longCode);
        $result[$field] = $value;
    }

    if (count($errors)) {
        echo implode("\n", $errors) . "\n";

        return false;
    }


    return $result;
}

function writeCommandLineHelp($options = null, $section = '') {
    if ($options === null) {
        $options = getAllCommandLineOptions(true);
        foreach ($options as $section => $options) {
            writeCommandLineHelp($options, $section);
        }

        return;
    }

    echo "$section\n";
    foreach ($options as $longname => $options) {
        $output = "  ";

        if (isset($options['Short'])) {
            $output .= '-' . $options['Short'] . ', ';
        }

        $output .= "--$longname";

        // Align our descriptions by passing
        $output = str_pad($output, 18, ' ');

        if (v('Req', $options)) {
            $output .= 'Required. ';
        }

        $output .= "{$options[0]}\n";

        if ($values = v('Values', $options)) {
            $output .= '    Valid Values: ' . implode(', ', $values) . "\n";
        }

        echo $output;
    }

    echo "\n";
}

function v($name, $array, $default = null) {
    if (isset($array[$name])) {
        return $array[$name];
    }

    return $default;
}

?>
<?php


/* Contents included from functions/structure-functions.php */
?><?php
/**
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * Define acceptable data fields to sent to Vanilla.
 *
 * Format is array of Table => array(Column -> Type).
 *
 * @return array
 */
function vanillaStructure() {
    // Adding new items without matching existing spacing costs 2 toes.
    return array(
        'Activity' => array(
            'ActivityID' => 'int',
            'ActivityTypeID' => 'int',
            'NotifyUserID' => 'int',
            'ActivityUserID' => 'int',
            'RegardingUserID' => 'int',
            'Photo' => 'varchar(255)',
            'HeadlineFormat' => 'varchar(255)',
            'Story' => 'text',
            'Format' => 'varchar(10)',
            'Route' => 'varchar(255)',
            'RecordType' => 'varchar(20)',
            'RecordID' => 'int',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'DateUpdated' => 'datetime',
            'Notified' => 'tinyint',
            'Emailed' => 'tinyint',
            'Data' => 'text'
        ),
        'ActivityComment' => array(
            'ActivityCommentID' => 'int',
            'ActivityID' => 'int',
            'Body' => 'text',
            'Format' => 'varchar(20)',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)'
        ),
        'ActivityType' => array(
            'ActivityTypeID' => 'int',
            'Name' => 'varchar(20)',
            'AllowComments' => 'tinyint',
            'ShowIcon' => 'tinyint',
            'ProfileHeadline' => 'varchar(255)',
            'FullHeadline' => 'varchar(255)',
            'RouteCode' => 'varchar(255)',
            'Notify' => 'tinyint',
            'Public' => 'tinyint'
        ),
        'AnalyticsLocal' => array(
            'TimeSlot' => 'varchar(8)',
            'Views' => 'int',
            'EmbedViews' => 'int'
        ),
        'Attachment' => array(
            'AttachmentID' => 'int',
            'Type' => 'varchar(64)',
            'ForeignID' => 'varchar(50)',
            'ForeignUserID' => 'int',
            'Source' => 'varchar(64)',
            'SourceID' => 'varchar(32)',
            'SourceURL' => 'varchar(255)',
            'Attributes' => 'text',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'InsertIPAddress' => 'varchar(64)',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int',
            'UpdateIPAddress' => 'varchar(15)'
        ),
        'Ban' => array(
            'BanID' => 'int',
            //'BanType' => array('IPAddress','Name','Email'),
            'BanValue' => 'varchar(50)',
            'Notes' => 'varchar(255)',
            'CountUsers' => 'int',
            'CountBlockedRegistrations' => 'int',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'UpdateUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateIPAddress' => 'varchar(15)'
        ),
        'Category' => array(
            'CategoryID' => 'int',
            'ParentCategoryID' => 'int',
            'TreeLeft' => 'int',
            'TreeRight' => 'int',
            'Depth' => 'int',
            'CountDiscussions' => 'int',
            'CountComments' => 'int',
            'DateMarkedRead' => 'datetime',
            'AllowDiscussions' => 'tinyint',
            'Archived' => 'tinyint',
            'Name' => 'varchar(255)',
            'UrlCode' => 'varchar(255)',
            'Description' => 'varchar(500)',
            'Sort' => 'int',
            'CssClass' => 'varchar(50)',
            'Photo' => 'varchar(255)',
            'PermissionCategoryID' => 'int',
            'PointsCategoryID' => 'int',
            'HideAllDiscussions' => 'tinyint',
            //'DisplayAs' => array('Categories','Discussions','Heading','Default'),
            'InsertUserID' => 'int',
            'UpdateUserID' => 'int',
            'DateInserted' => 'datetime',
            'DateUpdated' => 'datetime',
            'LastCommentID' => 'int',
            'LastDiscussionID' => 'int',
            'LastDateInserted' => 'datetime',
            'AllowedDiscussionTypes' => 'varchar(255)',
            'DefaultDiscussionType' => 'varchar(10)',
            'AllowGroups' => 'tinyint'
        ),
        'Comment' => array(
            'CommentID' => 'int',
            'DiscussionID' => 'int',
            'InsertUserID' => 'int',
            'UpdateUserID' => 'int',
            'DeleteUserID' => 'int',
            'Body' => 'text',
            'Format' => 'varchar(20)',
            'DateInserted' => 'datetime',
            'DateDeleted' => 'datetime',
            'DateUpdated' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'UpdateIPAddress' => 'varchar(15)',
            'Flag' => 'tinyint',
            'Score' => 'float',
            'Attributes' => 'text',
            'QnA' => 'varchar(255)', // 'Accepted', 'Rejected'
        ),
        'Conversation' => array(
            'ConversationID' => 'int',
            'Type' => 'varchar(10)',
            'ForeignID' => 'varchar(40)',
            'Subject' => 'varchar(100)',
            'Contributors' => 'varchar(255)',
            'FirstMessageID' => 'int',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'UpdateUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateIPAddress' => 'varchar(15)',
            'CountMessages' => 'int',
            'CountParticipants' => 'int',
            'LastMessageID' => 'int',
            'RegardingID' => 'int'
        ),
        'ConversationMessage' => array(
            'MessageID' => 'int',
            'ConversationID' => 'int',
            'Body' => 'text',
            'Format' => 'varchar(20)',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)'
        ),
        'Discussion' => array(
            'DiscussionID' => 'int',
            'Type' => 'varchar(10)',
            'ForeignID' => 'varchar(32)',
            'CategoryID' => 'int',
            'InsertUserID' => 'int',
            'UpdateUserID' => 'int',
            'FirstCommentID' => 'int',
            'LastCommentID' => 'int',
            'Name' => 'varchar(100)',
            'Body' => 'text',
            'Format' => 'varchar(20)',
            'Tags' => 'text',
            'CountComments' => 'int',
            'CountBookmarks' => 'int',
            'CountViews' => 'int',
            'Closed' => 'tinyint',
            'Announce' => 'tinyint',
            'Sink' => 'tinyint',
            'DateInserted' => 'datetime',
            'DateUpdated' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'UpdateIPAddress' => 'varchar(15)',
            'DateLastComment' => 'datetime',
            'LastCommentUserID' => 'int',
            'Score' => 'float',
            'Attributes' => 'text',
            'RegardingID' => 'int',
            'GroupID' => 'int',
            'QnA' => 'varchar(255)', // 'Accepted', 'Answered', 'Rejected', 'Unanswered',
        ),
        'Draft' => array(
            'DraftID' => 'int',
            'DiscussionID' => 'int',
            'CategoryID' => 'int',
            'InsertUserID' => 'int',
            'UpdateUserID' => 'int',
            'Name' => 'varchar(100)',
            'Tags' => 'varchar(255)',
            'Closed' => 'tinyint',
            'Announce' => 'tinyint',
            'Sink' => 'tinyint',
            'Body' => 'text',
            'Format' => 'varchar(20)',
            'DateInserted' => 'datetime',
            'DateUpdated' => 'datetime'
        ),
        'Event' => array(
            'EventID' => 'int',
            'Name' => 'varchar(255)',
            'Body' => 'text',
            'Format' => 'varchar(10)',
            'DateStarts' => 'datetime',
            'DateEnds' => 'datetime',
            'Timezone' => 'varchar(64)',
            'AllDayEvent' => 'tinyint',
            'Location' => 'varchar(255)',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int',
            'GroupID' => 'int'
        ),
        'Group' => array(
            'GroupID' => 'int',
            'Name' => 'varchar(255)',
            'Description' => 'text',
            'Format' => 'varchar(10)',
            'CategoryID' => 'int',
            'Icon' => 'varchar(255)',
            'Banner' => 'varchar(255)',
            'Privacy' => 'varchar(255)', // 'Public', 'Private'
            'Registration' => 'varchar(255)', // 'Public', 'Approval', 'Invite'
            'Visibility' => 'varchar(255)', // 'Public', 'Members'
            'CountMembers' => 'int',
            'CountDiscussions' => 'int',
            'DateLastComment' => 'datetime',
            'LastCommentID' => 'int',
            'LastDiscussionID' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int',
            'Attributes' => 'text'
        ),
        'GroupApplicant' => array(
            'GroupApplicantID' => 'int',
            'GroupID' => 'int',
            'UserID' => 'int',
            'Type' => 'varchar(255)', // 'Application', 'Invitation', 'Denied', 'Banned'
            'Reason' => 'varchar(200)',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int'
        ),
        'Invitation' => array(
            'InvitationID' => 'int',
            'Email' => 'varchar(200)',
            'Name' => 'varchar(50)',
            'RoleIDs' => 'text',
            'Code' => 'varchar(50)',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'AcceptedUserID' => 'int',
            'DateExpires' => 'datetime'
        ),
        'Log' => array(
            'LogID' => 'int',
            //'Operation' => array('Delete','Edit','Spam','Moderate','Pending','Ban','Error'),
            //'RecordType' => array('Discussion','Comment','User','Registration','Activity','ActivityComment','Configuration','Group'),
            'TransactionLogID' => 'int',
            'RecordID' => 'int',
            'RecordUserID' => 'int',
            'RecordDate' => 'datetime',
            'RecordIPAddress' => 'varchar(15)',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'OtherUserIDs' => 'varchar(255)',
            'DateUpdated' => 'datetime',
            'ParentRecordID' => 'int',
            'CategoryID' => 'int',
            'Data' => 'mediumtext',
            'CountGroup' => 'int'
        ),
        'Media' => array(
            'MediaID' => 'int',
            'Name' => 'varchar(255)',
            'Path' => 'varchar(255)',
            'Type' => 'varchar(128)',
            'Size' => 'int',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'ForeignID' => 'int',
            'ForeignTable' => 'varchar(24)',
            'ImageWidth' => 'smallint',
            'ImageHeight' => 'smallint',
            'ThumbWidth' => 'smallint',
            'ThumbHeight' => 'smallint',
            'ThumbPath' => 'varchar(255)'
        ),
        'Message' => array(
            'MessageID' => 'int',
            'Content' => 'text',
            'Format' => 'varchar(20)',
            'AllowDismiss' => 'tinyint',
            'Enabled' => 'tinyint',
            'Application' => 'varchar(255)',
            'Controller' => 'varchar(255)',
            'Method' => 'varchar(255)',
            'CategoryID' => 'int',
            'IncludeSubcategories' => 'tinyint',
            'AssetTarget' => 'varchar(20)',
            'CssClass' => 'varchar(20)',
            'Sort' => 'int'
        ),
        'Permission' => array(
            'PermissionID' => 'int',
            'RoleID' => 'int',
            'JunctionTable' => 'varchar(100)',
            'JunctionColumn' => 'varchar(100)',
            'JunctionID' => 'int',
            '_Permissions' => 'varchar(255)',
            'Garden.Email.View' => 'tinyint',
            'Garden.Settings.Manage' => 'tinyint',
            'Garden.Settings.View' => 'tinyint',
            'Garden.SignIn.Allow' => 'tinyint',
            'Garden.Users.Add' => 'tinyint',
            'Garden.Users.Edit' => 'tinyint',
            'Garden.Users.Delete' => 'tinyint',
            'Garden.Users.Approve' => 'tinyint',
            'Garden.Activity.Delete' => 'tinyint',
            'Garden.Activity.View' => 'tinyint',
            'Garden.Profiles.View' => 'tinyint',
            'Garden.Profiles.Edit' => 'tinyint',
            'Garden.Curation.Manage' => 'tinyint',
            'Garden.Moderation.Manage' => 'tinyint',
            'Garden.PersonalInfo.View' => 'tinyint',
            'Garden.AdvancedNotifications.Allow' => 'tinyint',
            'Garden.Community.Manage' => 'tinyint',
            'Conversations.Moderation.Manage' => 'tinyint',
            'Conversations.Conversations.Add' => 'tinyint',
            'Vanilla.Approval.Require' => 'tinyint',
            'Vanilla.Comments.Me' => 'tinyint',
            'Vanilla.Discussions.View' => 'tinyint',
            'Vanilla.Discussions.Add' => 'tinyint',
            'Vanilla.Discussions.Edit' => 'tinyint',
            'Vanilla.Discussions.Announce' => 'tinyint',
            'Vanilla.Discussions.Sink' => 'tinyint',
            'Vanilla.Discussions.Close' => 'tinyint',
            'Vanilla.Discussions.Delete' => 'tinyint',
            'Vanilla.Comments.Add' => 'tinyint',
            'Vanilla.Comments.Edit' => 'tinyint',
            'Vanilla.Comments.Delete' => 'tinyint'
        ),
        'Poll' => array(
            'PollID' => 'int',
            'Name' => 'varchar(255)',
            'DiscussionID' => 'int',
            'CountOptions' => 'int',
            'CountVotes' => 'int',
            'Anonymous' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int'
        ),
        'PollOption' => array(
            'PollOptionID' => 'int',
            'PollID' => 'int',
            'Body' => 'varchar(500)',
            'Format' => 'varchar(20)',
            'Sort' => 'smallint',
            'CountVotes' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int'
        ),
        'PollVote' => array(
            'UserID' => 'int',
            'PollOptionID' => 'int'
        ),
        'Rank' => array(
            'RankID' => 'int',
            'Name' => 'varchar(100)',
            'Level' => 'smallint',
            'Label' => 'varchar(255)',
            'Body' => 'text',
            'Attributes' => 'text'
        ),
        'ReactionType' => array(
            'UrlCode' => 'varchar(32)',
            'Name' => 'varchar(32)',
            'Description' => 'text',
            'Class' => 'varchar(10)',
            'TagID' => 'int',
            'Attributes' => 'text',
            'Sort' => 'smallint',
            'Active' => 'tinyint',
            'Custom' => 'tinyint',
            'Hidden' => 'tinyint'
        ),
        'Regarding' => array(
            'RegardingID' => 'int',
            'Type' => 'varchar(255)',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'ForeignType' => 'varchar(32)',
            'ForeignID' => 'int',
            'OriginalContent' => 'text',
            'ParentType' => 'varchar(32)',
            'ParentID' => 'int',
            'ForeignURL' => 'varchar(255)',
            'Comment' => 'text',
            'Reports' => 'int'
        ),
        'Role' => array(
            'RoleID' => 'int',
            'Name' => 'varchar(100)',
            'Description' => 'varchar(500)',
            'Sort' => 'int',
            'Deletable' => 'tinyint',
            'CanSession' => 'tinyint',
            'PersonalInfo' => 'tinyint'
        ),
        'Session' => array(
            'SessionID' => 'char(32)',
            'UserID' => 'int',
            'DateInserted' => 'datetime',
            'DateUpdated' => 'datetime',
            'TransientKey' => 'varchar(12)',
            'Attributes' => 'text'
        ),
        'Spammer' => array(
            'UserID' => 'int',
            'CountSpam' => 'smallint',
            'CountDeletedSpam' => 'smallint'
        ),
        'Tag' => array(
            'TagID' => 'int',
            'Name' => 'varchar(255)',
            'FullName' => 'varchar(255)',
            'Type' => 'varchar(20) ',
            'ParentTagID' => 'int',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'CategoryID' => 'int',
            'CountDiscussions' => 'int'
        ),
        'TagDiscussion' => array(
            'TagID' => 'int',
            'DiscussionID' => 'int',
            'CategoryID' => 'int',
            'DateInserted' => 'datetime'
        ),
        'User' => array(
            'UserID' => 'int',
            'Name' => 'varchar(50)',
            'Password' => 'varbinary(100)',
            'HashMethod' => 'varchar(10)',
            'Photo' => 'varchar(255)',
            'Title' => 'varchar(100)',
            'Location' => 'varchar(100)',
            'About' => 'text',
            'Email' => 'varchar(200)',
            'ShowEmail' => 'tinyint',
            //'Gender' => array('u','m','f'),
            'CountVisits' => 'int',
            'CountInvitations' => 'int',
            'CountNotifications' => 'int',
            'InviteUserID' => 'int',
            'DiscoveryText' => 'text',
            'Preferences' => 'text',
            'Permissions' => 'text',
            'Attributes' => 'text',
            'DateSetInvitations' => 'datetime',
            'DateOfBirth' => 'datetime',
            'DateFirstVisit' => 'datetime',
            'DateLastActive' => 'datetime',
            'LastIPAddress' => 'varchar(15)',
            'AllIPAddresses' => 'varchar(100)',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'DateUpdated' => 'datetime',
            'UpdateIPAddress' => 'varchar(15)',
            'HourOffset' => 'int',
            'Score' => 'float',
            'Admin' => 'tinyint',
            'Confirmed' => 'tinyint',
            'Verified' => 'tinyint',
            'Banned' => 'tinyint',
            'Deleted' => 'tinyint',
            'Points' => 'int',
            'CountUnreadConversations' => 'int',
            'CountDiscussions' => 'int',
            'CountUnreadDiscussions' => 'int',
            'CountComments' => 'int',
            'CountDrafts' => 'int',
            'CountBookmarks' => 'int',
            'RankID' => 'int'
        ),
        'UserAuthentication' => array(
            'ForeignUserKey' => 'varchar(255)',
            'ProviderKey' => 'varchar(64)',
            'UserID' => 'int'
        ),
        'UserAuthenticationNonce' => array(
            'Nonce' => 'varchar(200)',
            'Token' => 'varchar(128)',
            'Timestamp' => 'timestamp'
        ),
        'UserAuthenticationProvider' => array(
            'AuthenticationKey' => 'varchar(64)',
            'AuthenticationSchemeAlias' => 'varchar(32)',
            'Name' => 'varchar(50)',
            'URL' => 'varchar(255)',
            'AssociationSecret' => 'text',
            'AssociationHashMethod' => 'varchar(20)',
            'AuthenticateUrl' => 'varchar(255)',
            'RegisterUrl' => 'varchar(255)',
            'SignInUrl' => 'varchar(255)',
            'SignOutUrl' => 'varchar(255)',
            'PasswordUrl' => 'varchar(255)',
            'ProfileUrl' => 'varchar(255)',
            'Attributes' => 'text',
            'Active' => 'tinyint',
            'IsDefault' => 'tinyint'
        ),
        'UserAuthenticationToken' => array(
            'Token' => 'varchar(128)',
            'ProviderKey' => 'varchar(64)',
            'ForeignUserKey' => 'varchar(255)',
            'TokenSecret' => 'varchar(64)',
            //'TokenType' => array('request','access'),
            'Authorized' => 'tinyint',
            'Timestamp' => 'timestamp',
            'Lifetime' => 'int'
        ),
        'UserCategory' => array(
            'UserID' => 'int',
            'CategoryID' => 'int',
            'DateMarkedRead' => 'datetime',
            'Unfollow' => 'tinyint'
        ),
        'UserComment' => array(
            'UserID' => 'int',
            'CommentID' => 'int',
            'Score' => 'float',
            'DateLastViewed' => 'datetime'
        ),
        'UserConversation' => array(
            'UserID' => 'int',
            'ConversationID' => 'int',
            'CountReadMessages' => 'int',
            'LastMessageID' => 'int',
            'DateLastViewed' => 'datetime',
            'DateCleared' => 'datetime',
            'Bookmarked' => 'tinyint',
            'Deleted' => 'tinyint',
            'DateConversationUpdated' => 'datetime'
        ),
        'UserDiscussion' => array(
            'UserID' => 'int',
            'DiscussionID' => 'int',
            'Score' => 'float',
            'CountComments' => 'int',
            'DateLastViewed' => 'datetime',
            'Dismissed' => 'tinyint',
            'Bookmarked' => 'tinyint',
            'Participated' => 'tinyint'
        ),
        'UserEvent' => array(
            'EventID' => 'int',
            'UserID' => 'int',
            'DateInserted' => 'datetime',
            'Attending' => 'varchar(200)' // 'Yes', 'No', 'Maybe', 'Invited'
        ),
        'UserGroup' => array(
            'UserGroupID' => 'int',
            'GroupID' => 'int',
            'UserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'Role' => 'varchar(255)' // 'Leader', 'Member'
        ),
        'UserMeta' => array(
            'UserID' => 'int',
            'Name' => 'varchar(255)',
            'Value' => 'text'
        ),
        'UserNote' => array(
            'UserNoteID' => 'int',
            'Type' => 'varchar(10)',
            'UserID' => 'int',
            'Body' => 'text',
            'Format' => 'varchar(10)',
            'RecordType' => 'varchar(20)',
            'RecordID' => 'int',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'UpdateUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateIPAddress' => 'varchar(15)',
            'Attributes' => 'text'
        ),
        'UserPoints' => array(
            //'SlotType' => array('d','w','m','y','a'),
            'TimeSlot' => 'datetime',
            'Source' => 'varchar(10)',
            'CategoryID' => 'int',
            'UserID' => 'int',
            'Points' => 'int'
        ),
        'UserRole' => array(
            'UserID' => 'int',
            'RoleID' => 'int'
        ),
        'UserTag' => array(
            'RecordType' => 'varchar(200)', //'Discussion', 'Discussion-Total', 'Comment', 'Comment-Total', 'User', 'User-Total', 'Activity', 'Activity-Total', 'ActivityComment', 'ActivityComment-Total'
            'RecordID' => 'int',
            'TagID' => 'int',
            'UserID' => 'int',
            'DateInserted' => 'datetime',
            'Total' => 'int'
        )
    );
}

?>
<?php


/* Contents included from functions/feature-functions.php */
?><?php
/**
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * Get the data support status for a single platform feature.
 *
 * @param $platform
 * @param $feature
 * @return string
 */
function featureStatus($platform, $feature, $notes = true) {
    global $supported;

    if (!isset($supported[$platform]['features'])) {
        return '<span class="No">No</span>';
    }

    $available = $supported[$platform]['features'];

    // Calculate feature availability.
    $status = '<span class="No">&#x2717;</span>';
    if (isset($available[$feature])) {
        if ($available[$feature] === 1) {
            $status = '<span class="Yes">&#x2713;</span>';
        } elseif ($available[$feature]) {
            if ($notes) {
                // Send the text of the note
                $status = $available[$feature];
            } else {
                // Say 'yes' for table shorthand
                $status = '<span class="Yes">&#x2713;</span>';
            }
        }
    }

    return $status;
}

/**
 * Insert spaces into a CamelCaseName => Camel Case Name.
 *
 * @param $feature
 * @return string
 */
function featureName($feature) {
    return ltrim(preg_replace('/[A-Z]/', ' $0', $feature));
}

/**
 * Define what data can be successfully ported to Vanilla.
 *
 * First array key is where the data is stored.
 * Second array key is the feature name, and value is one of:
 *    - 0 if unsupported
 *    - 1 if supported
 *    - string if supported, with notes or caveats
 *
 * @return array
 */
function vanillaFeatures($set = false) {
    if (!$set) {
        $set = array('core', 'addon');
    }

    $features = array();
    if (is_array($set)) {
        foreach ($set as $section) {
            $features += vanillaFeatureSet($section);
        }
    } else {
        $features = vanillaFeatureSet($set);
    }

    return $features;
}

/**
 * Get features by availability in Vanilla.
 *
 * @param string $section
 * @return array
 */
function vanillaFeatureSet($section) {
    switch ($section) {
        case 'addon':
            $set = array(
                'Tags' => 0,

            );
            break;
        case 'cloud':
            $set = array(
                'Badges' => 0,
                'Ranks' => 0,
                'Polls' => 0,
                'Groups' => 0,
            );
            break;
        case 'core':
        default:
            $set = array(
                'Comments' => 0,
                'Discussions' => 0,
                'Users' => 0,
                'Categories' => 0,
                'Roles' => 0,
                'Passwords' => 0,
                'Avatars' => 0,
                'PrivateMessages' => 0,
                'Signatures' => 0,
                'Attachments' => 0,
                'Bookmarks' => 0,
                'Permissions' => 0,
                //'UserWall'        => 0,
                'UserNotes' => 0,

                //'Emoji'           => 0,
            );
            break;
    }

    return $set;
}

?>
<?php


// Use error handler in functions.php
set_error_handler("ErrorHandler");

// Set Vanilla to appear first in the list.
$supported = array(
    'vanilla1' => array('name' => 'Vanilla 1', 'prefix' => 'LUM_'),
    'vanilla2' => array('name' => 'Vanilla 2', 'prefix' => 'GDN_')
);

// Include individual software porters.
 ?><?php
/**
 * Advanced Forum (Drupal module) exporter tool.
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['advancedforum'] = array(
    'name' => 'Advanced Forum 7.x-2.*',
    'prefix' => ''
);

$supported['advancedforum']['CommandLine'] = array(
    'filepath' => array('Path to files, such as avatars.', 'Sx' => '::')
);

$supported['advancedforum']['features'] = array(
    'Avatars' => 1,
    'Categories' => 1,
    'Comments' => 1,
    'Discussions' => 1,
    'Passwords' => 1,
    'Roles' => 1,
    'Users' => 1
);

class Advancedforum extends ExportController {
    /**
     * Main export process.
     *
     * @param ExportModel $ex
     * @see $_Structures in ExportModel for allowed destination tables & columns.
     */
    public function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('node');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->beginExport('', 'Advanced Forum 7.x-2.*');

        $filePath = $cdn = $this->param('filepath', '');

        // User.
        $user_Map = array();
        $ex->exportTable('User', "
            select `u`.`uid` as `UserID`, `u`.`name` as `Name`, `u`.`mail` as `Email`, `u`.`pass` as `Password`,
                'drupal' as `HashMethod`, from_unixtime(`created`) as `DateInserted`,
                if(`fm`.`filename` is not null, concat('$filePath', `fm`.`filename`), NULL) as `Photo`
            from `:_users` `u`
              left join `:_file_managed` `fm` on `u`.`picture` = `fm`.`fid`", $user_Map);


        // Role.
        $role_Map = array();
        $ex->exportTable('Role', "
            SELECT `name` AS `Name`, `rid` AS `RoleID`
            FROM `:_role` `r`
            ORDER BY `weight` ASC", $role_Map);


        // User Role.
        $userRole_Map = array();
        $ex->exportTable('UserRole', "
         SELECT `rid` AS `RoleID`, `uid` AS `UserID`
         FROM `:_users_roles` `ur`", $userRole_Map);


        // Category.
        $category_Map = array();
        $ex->exportTable('Category', "
            SELECT `ttd`.`tid` AS `CategoryID`, `tth`.`parent` AS `ParentCategoryID`,
              `ttd`.`name` AS `Name`, `ttd`.`weight` AS `Sort`
            FROM `:_taxonomy_term_data` `ttd`
                LEFT JOIN `:_taxonomy_vocabulary` `tv` USING (`vid`)
                LEFT JOIN `:_taxonomy_term_hierarchy` `tth` USING (`tid`)
            WHERE `tv`.`name` = 'Forums'
            ORDER BY `ttd`.`weight` ASC", $category_Map);


        // Discussion.
        $discussion_Map = array(
            'body_format' => array('Column' => 'Format', 'Filter' => array(__CLASS__, 'translateFormatType'))
        );

        $ex->exportTable('Discussion', "
            SELECT `fi`.`nid` AS `DiscussionID`, `fi`.`tid` AS `CategoryID`, `fi`.`title` AS `Name`,
                `fi`.`comment_count` AS `CountComments`, `fdb`.`body_value` AS `Body`,
                from_unixtime(`n`.`created`) AS `DateInserted`,
                if (`n`.`created`< `n`.`changed`, from_unixtime(`n`.`changed`), NULL) AS `DateUpdated`,
                if (`fi`.`sticky` > 0,2,0) AS `Announce`,
                `n`.`uid` AS `InsertUserID`, `fdb`.`body_format`
            FROM `:_forum_index` `fi`
                JOIN `:_field_data_body` `fdb` ON (`fdb`.`bundle` = 'forum' AND `fi`.`nid`=`fdb`.`entity_id`)
                LEFT JOIN `:_node` `n` USING (`nid`)
        ", $discussion_Map);


        // Comment.
        $comment_Map = array(
            'comment_body_format' => array('Column' => 'Format', 'Filter' => array(__CLASS__, 'translateFormatType'))
        );
        $ex->exportTable('Comment', "
            SELECT `c`.`cid` AS `CommentID`, `c`.`nid` AS `DiscussionID`, `c`.`uid` AS `InsertUserID`,
            from_unixtime(`c`.`created`) AS `DateInserted`,
            if(`c`.`created` < `c`.`changed`, from_unixtime(`c`.`changed`), NULL) AS `DateUpdated`,
            `fdcb`.`comment_body_value` AS `Body`, `fdcb`.`comment_body_format`
            FROM `:_comment` `c` JOIN `:_field_data_comment_body` `fdcb` ON (`c`.`cid` = `fdcb`.`entity_id`)
            ORDER BY `cid` ASC", $comment_Map);

        $ex->endExport();
    }

    /**
     * Translate from known Drupal format slugs to those compatible with Vanilla
     * @param $value Value of the current row
     * @param $field Name associated with the current field value
     * @param $row   Full data row columns
     * @return string Translated format slug
     */
    public static function translateFormatType($value, $field, $row) {
        switch ($value) {
            case 'filtered_html':
            case 'full_html':
                return 'Html';
            default:
                return 'BBCode';
        }
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * AnswerHub exporter tool.
 * Assume https://github.com/vanilla/addons/tree/master/plugins/QnA will be enabled.
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['answerhub'] = array('name' => 'answerhub', 'prefix' => '');
$supported['answerhub']['CommandLine'] = array(
    'noemaildomain' => array(
        'Domain to use when generating email addresses for users that does not have one.',
        'Field' => 'noemaildomain',
        'Sx' => '::',
        'Default' => 'answerhub.com',
    ),
);
$supported['answerhub']['features'] = array(
    'Categories' => 1,
    'Comments' => 1,
    'Discussions' => 1,
    'Roles' => 1,
    'Users' => 1,
);

class AnswerHub extends ExportController {
    /**
     * Main export process.
     *
     * @param ExportModel $ex
     * @see $_structures in ExportModel for allowed destination tables & columns.
     */
    public function forumExport($ex) {
        // Get the characterset for the comments.
        // Usually the comments table is the best target for this.
        $characterSet = $ex->getCharacterSet('network6_nodes');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Reiterate the platform name here to be included in the porter file header.
        $ex->beginExport('', 'AnswerHub');

        $result = $ex->query("select c_reserved as lastID from :_id_generators where c_identifier = 'AUTHORITABLE'", true);
        if ($row = mysql_fetch_assoc($result)) {
            $lastID = $row['lastID'];
        }
        if (!isset($lastID)) {
            die('Something went wrong :S'.PHP_EOL);
        }

        // User.
        $user_Map = array(
            'c_email' => array('Column' => 'Email', 'Filter' => array($this, 'generateEmail')),
        );
        $ex->exportTable('User', "
            select
                user.c_id as UserID,
                user.c_name as Name,
                sha2(concat(user.c_name, now()), 256) as Password,
                'Reset' as HashMethod,
                user.c_creation_date as DateInserted,
                user.c_birthday as DateOfBirth,
                user.c_last_seen as DateLastActive,
                user_email.c_email,
                0 as Admin
            from :_network6_authoritables as user
                 left join :_network6_user_emails as user_email on user_email.c_user = user.c_id
            where user.c_type = 'user'
                and user.c_name != '\$\$ANON_USER\$\$'

            union all

            select
                su.c_id + $lastID,
                su.c_username,
                sha2(concat(su.c_username, now()), 256),
                'Reset',
                su.c_creation_date,
                null,
                null,
                su.c_email,
                1 as Admin
            from :_system_users as su
            where su.c_active = 1

        ", $user_Map);

        // Role.
        $role_Map = array(
        );
        $ex->exportTable('Role', "
            select
                groups.c_id as RoleID,
                groups.c_name as Name,
                groups.c_description as Description
            from :_network6_authoritables as groups
            where groups.c_type = 'group'

            union all

            select
                $lastID + 1,
                'System Administrator',
                'System users from AnswerHub'
            from dual
        ", $role_Map);

        // User Role.
        $userRole_Map = array(
        );
        $ex->exportTable('UserRole', "
            select
                user_role.c_groups as RoleID,
                user_role.c_members as UserID
            from :_network6_authoritable_groups as user_role

            union all

            select
                $lastID + 1,
                su.c_id + $lastID
            from :_system_users as su
            where su.c_active = 1
        ", $userRole_Map);

        // Category.
        $category_Map = array(
        );
        $ex->exportTable('Category', "
            select
                containers.c_id as CategoryID,
                case
                    when parents.c_type = 'space' then containers.c_parent
                    else null
                end as ParentCategoryID,
                containers.c_name as Name
            from :_containers as containers
            left join :_containers as parents on parents.c_id = containers.c_parent
            where containers.c_type = 'space'
                and containers.c_active = 1
        ", $category_Map);

        // Discussion.
        $discussion_Map = array(
        );
        // The query works fine but it will probably be slow for big tables
        $ex->exportTable('Discussion', "
            select
                questions.c_id as DiscussionID,
                'Question' as Type,
                questions.c_primaryContainer as CategoryID,
                questions.c_author as InsertUserID,
                questions.c_creation_date as DateInserted,
                questions.c_title as Name,
                coalesce(nullif(questions.c_body, ''), questions.c_title) as Body,
                'HTML' as Format,
                if(locate('[closed]', questions.c_normalized_state) > 0, 1, 0) as Closed,
                if(count(answers.c_id) > 0,
                    if (locate('[accepted]', group_concat(ifnull(answers.c_normalized_state, ''))) = 0,
                        if (locate('[rejected]', group_concat(ifnull(answers.c_normalized_state, ''))) = 0,
                            'Answered',
                            'Rejected'
                        ),
                        'Accepted'
                    ),
                    'Unanswered'
                ) as QnA
            from :_network6_nodes as questions
	            left join :_network6_nodes as answers on
	                answers.c_parent = questions.c_id
	                and answers.c_type = 'answer'
	                and answers.c_visibility = 'full'
            where questions.c_type = 'question'
                and questions.c_visibility = 'full'
            group by questions.c_id
        ", $discussion_Map);

        // Comment.
        $comment_Map = array(
        );
        $ex->exportTable('Comment', "
            select
                answers.c_id as CommentID,
                answers.c_parent as DiscussionID,
                answers.c_author as InsertUserID,
                answers.c_body as Body,
                'Html' as Format,
                answers.c_creation_date as DateInserted,
                if(locate('[accepted]', answers.c_normalized_state) = 0,
                    if(locate('[rejected]', answers.c_normalized_state) = 0,
                        null,
                        'Rejected'
                    ),
                    'Accepted'
                ) as QnA
            from :_network6_nodes as answers
            where answers.c_type = 'answer'
                  and answers.c_visibility = 'full'
        ", $comment_Map);

        $ex->endExport();
    }

    /**
     * Generate an email for users who do not have one.
     *
     * @param $value Value of the current row
     * @param $field Name associated with the current field value
     * @param $row   Full data row columns
     * @return string Email
     */
    public function generateEmail($value, $field, $row) {
        $email = $value;

        if (empty($email)) {
            $domain = $this->param('noemaildomain');
            $slug = preg_replace('#[^a-z0-9-_.]#i', null, $row['Name']);

            if (!strlen($slug)) {
                $slug = $row['UserID'];
            }

            $email = "$slug@$domain";
        }

        return $email;
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * ASP Playground exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['apg'] = array('name' => 'ASP Playground', 'prefix' => 'pgd_');
$supported['apg']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
);

class APG extends ExportController {
    /**
     * @param ExportModel $ex
     */
    public function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('Threads');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->beginExport('', 'ASP Playground');
        $ex->sourcePrefix = 'pgd_';

        // User.
        $user_Map = array(
            'Mem' => 'UserID',
            'Login' => 'Name',
            'Email' => 'Email',
            'Userpass' => 'Password',
            'totalPosts' => 'CountComments',
            'ip' => 'LastIPAddress',
            'banned' => 'Banned',
            'dateSignUp' => 'DateInserted',
            'lastLogin' => 'DateLastActive',
        );
        $ex->exportTable('User', "
         select m.*,
            'Text' as HashMethod
         from :_Members m;", $user_Map);

        // Role.
        /*$role_Map = array(
            'GroupID' => 'RoleID',
            'Name' => 'Name');
        $ex->ExportTable('Role', "
           select *
           from yaf_Group;", $role_Map);
        */

        // UserRole.
        // Make everyone a member since there's no used roles.
        $userRole_Map = array(
            'Mem' => 'UserID'
        );
        $ex->exportTable('UserRole', 'select Mem, 8 as RoleID from :_Members', $userRole_Map);

        // Signatures.
        $ex->exportTable('UserMeta', "
         select
            Mem,
            'Plugin.Signatures.Sig' as `Name`,
            signature as `Value`
         from :_Members
         where signature <> ''

         union all

         select
            Mem,
            'Plugin.Signatures.Format' as `Name`,
            'BBCode' as `Value`
         from :_Members
         where signature <> '';");

        // Category.
        $category_Map = array(
            'ForumID' => 'CategoryID',
            'ForumTitle' => 'Name',
            'ForumDesc' => 'Description',
            'Sort' => 'Sort',
            'lastModTime' => 'DateUpdated'
        );

        $ex->exportTable('Category', "
         select f.*
         from :_Forums f;", $category_Map);

        // Discussion.
        $discussion_Map = array(
            'messageID' => 'DiscussionID',
            'ForumID' => 'CategoryID',
            'mem' => 'InsertUserID',
            'dateCreated' => 'DateInserted',
            'Subject' => 'Name',
            'hits' => 'CountViews',
            'lastupdate' => 'DateLastComment'
        );
        $ex->exportTable('Discussion', "
         select
            t.*,
            m.Body
         from :_Threads t
         left join :_Messages m on m.messageID = t.messageID
         ;", $discussion_Map);

        // Comment.
        $comment_Map = array(
            'messageID' => 'CommentID',
            'threadID' => 'DiscussionID',
            'parent' => array('Column' => 'ReplyToCommentID', 'Type' => 'int'),
            'Mem' => 'InsertUserID',
            'dateCreated' => 'DateInserted',
            'Body' => 'Body',
            'ip' => 'InsertIPAddress'
        );
        $ex->exportTable('Comment', "
         select m.*,
            'BBCode' as Format
         from :_Messages m;", $comment_Map);

        /*
        // Conversation.
        $this->_ExportConversationTemps();

        $Conversation_Map = array(
            'PMessageID' => 'ConversationID',
            'FromUserID' => 'InsertUserID',
            'Created' => 'DateInserted',
            'Title' => array('Column' => 'Subject', 'Type' => 'varchar(512)')
            );
        $ex->ExportTable('Conversation', "
           select
              pm.*,
              g.Title
           from z_pmgroup g
           join yaf_PMessage pm
              on g.Group_ID = pm.PMessageID;", $Conversation_Map);

        // UserConversation.
        $UserConversation_Map = array(
            'PM_ID' => 'ConversationID',
            'User_ID' => 'UserID',
            'Deleted' => 'Deleted');
        $ex->ExportTable('UserConversation', "
           select pto.*
           from z_pmto pto
           join z_pmgroup g
              on pto.PM_ID = g.Group_ID;", $UserConversation_Map);

        // ConversationMessage.
        $ConversationMessage_Map = array(
            'PMessageID' => 'MessageID',
            'Group_ID' => 'ConversationID',
            'FromUserID' => 'InsertUserID',
            'Created' => 'DateInserted',
            'Body' => 'Body',
            'Format' => 'Format');
        $ex->ExportTable('ConversationMessage', "
           select
              pm.*,
              case when pm.Flags & 1 = 1 then 'Html' else 'BBCode' end as Format,
              t.Group_ID
           from yaf_PMessage pm
           join z_pmtext t
              on t.PM_ID = pm.PMessageID;", $ConversationMessage_Map);
        */

        $ex->endExport();
    }

    public function cleanDate($value) {
        if (!$value) {
            return null;
        }
        if (substr($value, 0, 4) == '0000') {
            return null;
        }

        return $value;
    }

}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * bbPress exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['bbpress'] = array('name' => 'bbPress 1', 'prefix' => 'bb_');
$supported['bbpress']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'PrivateMessages' => 1,
    'Passwords' => 1,
);

class BBPress extends ExportController {
    /** @var array Required tables => columns */
    protected $sourceTables = array(
        'forums' => array(),
        'posts' => array(),
        'topics' => array(),
        'users' => array('ID', 'user_login', 'user_pass', 'user_email', 'user_registered'),
        'meta' => array()
    );

    /**
     * Forum-specific export format.
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('posts');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Begin
        $ex->beginExport('', 'bbPress 1.*', array('HashMethod' => 'Vanilla'));

        // Users
        $user_Map = array(
            'ID' => 'UserID',
            'user_login' => 'Name',
            'user_pass' => 'Password',
            'user_email' => 'Email',
            'user_registered' => 'DateInserted'
        );
        $ex->exportTable('User', "select * from :_users", $user_Map);  // ":_" will be replace by database prefix

        // Roles
        $ex->exportTable('Role',
            "select 1 as RoleID, 'Guest' as Name
         union select 2, 'Key Master'
         union select 3, 'Administrator'
         union select 4, 'Moderator'
         union select 5, 'Member'
         union select 6, 'Inactive'
         union select 7, 'Blocked'");

        // UserRoles
        $userRole_Map = array(
            'user_id' => 'UserID'
        );
        $ex->exportTable('UserRole',
            "select distinct
           user_id,
           case when locate('keymaster', meta_value) <> 0 then 2
           when locate('administrator', meta_value) <> 0 then 3
           when locate('moderator', meta_value) <> 0 then 4
           when locate('member', meta_value) <> 0 then 5
           when locate('inactive', meta_value) <> 0 then 6
           when locate('blocked', meta_value) <> 0 then 7
           else 1 end as RoleID
         from :_usermeta
         where meta_key = 'bb_capabilities'", $userRole_Map);

        // Categories
        $category_Map = array(
            'forum_id' => 'CategoryID',
            'forum_name' => 'Name',
            'forum_desc' => 'Description',
            'forum_slug' => 'UrlCode',
            'left_order' => 'Sort'
        );
        $ex->exportTable('Category', "select *,
         lower(forum_slug) as forum_slug,
         nullif(forum_parent,0) as ParentCategoryID
         from :_forums", $category_Map);

        // Discussions
        $discussion_Map = array(
            'topic_id' => 'DiscussionID',
            'forum_id' => 'CategoryID',
            'topic_poster' => 'InsertUserID',
            'topic_title' => 'Name',
            'Format' => 'Format',
            'topic_start_time' => 'DateInserted',
            'topic_sticky' => 'Announce'
        );
        $ex->exportTable('Discussion', "select t.*,
            'Html' as Format,
            case t.topic_open when 0 then 1 else 0 end as Closed
         from :_topics t
         where topic_status = 0", $discussion_Map);

        // Comments
        $comment_Map = array(
            'post_id' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'post_text' => array('Column' => 'Body', 'Filter' => 'bbPressTrim'),
            'Format' => 'Format',
            'poster_id' => 'InsertUserID',
            'post_time' => 'DateInserted'
        );
        $ex->exportTable('Comment', "select p.*,
            'Html' as Format
         from :_posts p
         where post_status = 0", $comment_Map);

        // Conversations.

        // The export is different depending on the table layout.
        $PM = $ex->exists('bbpm', array('ID', 'pm_title', 'pm_from', 'pm_to', 'pm_text', 'sent_on', 'pm_thread'));
        $conversationVersion = '';

        if ($PM === true) {
            // This is from an old version of the plugin.
            $conversationVersion = 'old';
        } elseif (is_array($PM) && count(array_intersect(array('ID', 'pm_from', 'pm_text', 'sent_on', 'pm_thread'),
                $PM)) == 0
        ) {
            // This is from a newer version of the plugin.
            $conversationVersion = 'new';
        }

        if ($conversationVersion) {
            // Conversation.
            $conv_Map = array(
                'pm_thread' => 'ConversationID',
                'pm_from' => 'InsertUserID'
            );
            $ex->exportTable('Conversation',
                "select *, from_unixtime(sent_on) as DateInserted
            from :_bbpm
            where thread_depth = 0", $conv_Map);

            // ConversationMessage.
            $convMessage_Map = array(
                'ID' => 'MessageID',
                'pm_thread' => 'ConversationID',
                'pm_from' => 'InsertUserID',
                'pm_text' => array('Column' => 'Body', 'Filter' => 'bbPressTrim')
            );
            $ex->exportTable('ConversationMessage',
                'select *, from_unixtime(sent_on) as DateInserted
            from :_bbpm', $convMessage_Map);

            // UserConversation.
            $ex->query("create temporary table bbpmto (UserID int, ConversationID int)");

            if ($conversationVersion == 'new') {
                $to = $ex->query("select object_id, meta_value from :_meta where object_type = 'bbpm_thread' and meta_key = 'to'",
                    true);
                if (is_resource($to)) {
                    while (($row = @mysql_fetch_assoc($to)) !== false) {
                        $thread = $row['object_id'];
                        $tos = explode(',', trim($row['meta_value'], ','));
                        $toIns = '';
                        foreach ($tos as $toID) {
                            $toIns .= "($toID,$thread),";
                        }
                        $toIns = trim($toIns, ',');

                        $ex->query("insert bbpmto (UserID, ConversationID) values $toIns", true);
                    }
                    mysql_free_result($to);

                    $ex->exportTable('UserConversation', 'select * from bbpmto');
                }
            } else {
                $conUser_Map = array(
                    'pm_thread' => 'ConversationID',
                    'pm_from' => 'UserID'
                );
                $ex->exportTable('UserConversation',
                    'select distinct
                 pm_thread,
                 pm_from,
                 del_sender as Deleted
               from :_bbpm

               union

               select distinct
                 pm_thread,
                 pm_to,
                 del_reciever
               from :_bbpm', $conUser_Map);
            }
        }

        // End
        $ex->endExport();
    }
}

function bbPressTrim($text) {
    return rtrim(bb_Code_Trick_Reverse($text));
}

function bb_Code_Trick_Reverse($text) {
    $text = preg_replace_callback("!(<pre><code>|<code>)(.*?)(</code></pre>|</code>)!s", 'bb_decodeit', $text);
    $text = str_replace(array('<p>', '<br />'), '', $text);
    $text = str_replace('</p>', "\n", $text);
    $text = str_replace('<coded_br />', '<br />', $text);
    $text = str_replace('<coded_p>', '<p>', $text);
    $text = str_replace('</coded_p>', '</p>', $text);

    return $text;
}

function bb_Decodeit($matches) {
    $text = $matches[2];
    $trans_table = array_flip(get_html_translation_table(HTML_ENTITIES));
    $text = strtr($text, $trans_table);
    $text = str_replace('<br />', '<coded_br />', $text);
    $text = str_replace('<p>', '<coded_p>', $text);
    $text = str_replace('</p>', '</coded_p>', $text);
    $text = str_replace(array('&#38;', '&amp;'), '&', $text);
    $text = str_replace('&#39;', "'", $text);
    if ('<pre><code>' == $matches[1]) {
        $text = "\n$text\n";
    }

    return "`$text`";
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * BBPress 2 exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */
$supported['bbpress2'] = array('name'=>'bbPress 2', 'prefix' => 'wp_');
$supported['bbpress2']['features'] = array(
    'Comments'        => 1,
    'Discussions'     => 1,
    'Users'           => 1,
    'Categories'      => 1,
    'Roles'           => 1,
    'Passwords'       => 1,
);

class BBPress2 extends ExportController {
    /** @var array Required tables => columns */
    protected $sourceTables = array(
        'postmeta' => array(),
        'posts' => array(),
        'usermeta' => array(),
        'users' => array('ID', 'user_login', 'user_pass', 'user_email', 'user_registered'),
    );
    /**
     * Forum-specific export format.
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {
        // Begin
        $ex->beginExport('', 'bbPress 2.*', array('HashMethod' => 'Vanilla'));

        // Users
        $ex->query("drop table if exists z_user;");
        $ex->query("
            create table `z_user` (
                `ID` bigint(20) unsigned not null AUTO_INCREMENT,
                `user_login` varchar(60) NOT NULL DEFAULT '',
                `user_pass` varchar(255) NOT NULL DEFAULT '',
                `hash_method` varchar(10) DEFAULT NULL,
                `user_email` varchar(100) NOT NULL DEFAULT '',
                `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
                primary key (`ID`),
                KEY `user_email` (`user_email`)
            )
        ;");

        $userQuery = "
            select
                ID,
                user_login,
                user_pass,
                'Vanilla' AS hash_method,
                user_email,
                user_registered
            from :_users
        ";

        $ex->query("insert into z_user $userQuery");

        $guestUserQuery = "
            select
                user_login,
                'JL2AC3ORF2ZHDU00Z8V0Z1LFC58TY6NWA6IC5M1MIGGDCHNE7K' AS user_pass,
                'Random' AS hash_method,
                user_email,
                user_registered
            from (
                select
                    max(if(pm.meta_key = \"_bbp_anonymous_name\", pm.meta_value, null)) as user_login,
                    max(if(pm.meta_key = \"_bbp_anonymous_email\", pm.meta_value, null)) as user_email,
                    p.post_date as user_registered
                from :_posts as p
                    inner join :_postmeta as pm on pm.post_id = p.ID
                where  p.post_author = 0
                    and pm.meta_key in ('_bbp_anonymous_name', '_bbp_anonymous_email')
                group by
                    pm.post_id
            ) as u
            where user_email not in (select user_email from z_user group by user_email)
            group by user_email
        ";

        $ex->query("
            insert into z_user(
                /* ID auto_increment yay! */
                user_login,
                user_pass,
                hash_method,
                user_email,
                user_registered
            ) $guestUserQuery");

        $user_Map = array(
            'ID'=>'UserID',
            'user_login'=>'Name',
            'user_pass'=>'Password',
            'hash_method'=>'HashMethod',
            'user_email'=>'Email',
            'user_registered'=>'DateInserted',
        );
        $ex->exportTable('User', "select * from z_user;", $user_Map);

        // Roles
        $ex->exportTable('Role', "
            select
                1 as RoleID,
                'Guest' as Name
            union select 2, 'Administrator'
            union select 3, 'Moderator'
            union select 4, 'Member'
            union select 5, 'Blocked'
        ;");

        // UserRoles
        $userRole_Map = array(
            'user_id'=>'UserID'
        );
        $ex->exportTable('UserRole', "
            select
                distinct(user_id) as user_id,
                case
                    when locate('bbp_keymaster', meta_value) != 0 then 2
                    when locate('bbp_moderator', meta_value) != 0 then 3
                    when locate('bbp_participant', meta_value) != 0 then 4
                    when locate('bbp_blocked', meta_value) != 0 then 5
                    else 1 /* should be bbp_spectator or non-handled roles if that's even possible */
                end as RoleID
            from :_usermeta
            where meta_key = 'wp_capabilities'

            union all

            select
                ID as user_id,
                1 as RoleID
            from z_user
            where hash_method = 'Random'
        ;", $userRole_Map);

        // Categories
        $category_Map = array(
            'ID'=>'CategoryID',
            'post_title'=>'Name',
            'post_content'=>'Description',
            'post_name'=>'UrlCode',
            'menu_order'=>'Sort',
        );
        $ex->exportTable('Category', "
            select
                *,
                lower(post_name) as forum_slug,
                nullif(post_parent, 0) as ParentCategoryID
            from :_posts
            where post_type = 'forum'
        ;", $category_Map);

        // Discussions
        $discussion_Map = array(
            'ID'=>'DiscussionID',
            'post_parent'=>'CategoryID',
            'post_author'=>'InsertUserID',
            'post_title'=>'Name',
            'Format'=>'Format',
            'post_date'=>'DateInserted',
            'menu_order'=>'Announce',
        );
        $ex->exportTable('Discussion', "
            select
                p.*,
                if (p.post_author > 0, p.post_author, z_user.ID) as post_author, /* override post_author value from p.* */
                'Html' as Format,
                0 as Closed
            from :_posts as p
                left join :_postmeta as pm on pm.post_id = p.ID AND pm.meta_key = '_bbp_anonymous_email'
                left join z_user on z_user.user_email = pm.meta_value
            where post_type = 'topic'
        ;", $discussion_Map);

        // Comments
        $comment_Map = array(
            'ID' => 'CommentID',
            'post_parent_id' => 'DiscussionID',
            'post_content' => 'Body',//array('Column'=>'Body', 'Filter'=>'bbPressTrim'),
            'Format' => 'Format',
            'post_author' => 'InsertUserID',
            'post_date' => 'DateInserted',
        );
        $ex->exportTable('Comment', "
            select
                p.*,
                if (p.post_author > 0, p.post_author, z_user.ID) as post_author, /* override post_author value from p.* */
                case
                    when p.post_type = 'topic' then p.ID
                    else p.post_parent
                end as post_parent_id,
                'Html' as format
            from :_posts p
                left join :_postmeta as pm on pm.post_id = p.ID AND pm.meta_key = '_bbp_anonymous_email'
                left join z_user on z_user.user_email = pm.meta_value
            where post_type = 'topic'
                or post_type = 'reply'
            ;", $comment_Map);

        // Cleanup
        $ex->query("drop table if exists z_user;");

        // End
        $ex->endExport();
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * phpBB exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license Proprietary
 * @package VanillaPorter
 */

/* How to use this exporter.
 * 1. Create a folder called jive in the same folder as this file.
 * 2. Make sure the folder has 777 permissions.
 * 3. Create a mysql database with the same name as the postgres database.
 * 4. Symlink this file into the same folder as the porter.
 * 5. Browse to the porter with a ?type=jive&step=convert query string.
 * 6. Run the porter.
 * 7. Browse to the porter with a ?type=jive query string.
 * 8. Run the porter.
 */

$supported['jive'] = array('name'=> 'Jive', 'prefix'=>'');
$supported['jive']['CommandLine'] = array();
$supported['jive']['features'] = array();

class Jive extends ExportController {
   static $extensions = array(
      "text/html" => '.html',
      "application/zip" => '.zip',
      "application/pdf" => '.pdf',
      "image/jpeg" => '.jpg',
      "application/postscript" => '.ps',
      "audio/mpeg" => '.mpg',
      "image/gif" => '.gif',
      "image/png" => '.png',
      "application/msword" => '.doc');

   static $increments = array();

   const TYPE_BLOGPOST = 38;
   const TYPE_COMMUNITY = 14;
   const TYPE_SYSTEM = -2;
   const TYPE_SOCIALGROUP = 700;
   const TYPE_DOCUMENT = 102;
   const TYPE_BLOG = 37;
   const TYPE_COMMENT = 105;
   const TYPE_MESSAGE = 2;

   /**
    * @param ExportModel $ex
    */
   protected function forumExport($ex) {
       /**
        * The following statements may need to be run prior to attempting a migration:
        *
        * alter table jiveuser add primary key (userid);
        * alter table jiveattachment add primary key (attachmentid);
        * create index objectid on jiveattachment (objectid);
        * alter table jivethread add primary key (threadid);
        * create index rootmessageid on jivethread (rootmessageid);
        * create index messageid on jivemessage (messageid);
        * create index userid on jiveuserperm (userid);
        * alter table jiveuser add column permission int null;
        */

      $this->ex->testMode = false;

      $step = 'do-not-convert';

      if ($step == 'convert') {
         // Convert all of the tables to csv and load them into mysql.
         echo '<pre>';
         $tables = $this->exportPostgresCSV();
         $this->importCSVs($tables);
         echo '</pre>';
         die();
      }

      // Begin.
      $ex->beginExport('', 'Jive', array('HashMethod' => 'reset'));

      $user_Map = array(
          'userid' => 'UserID',
          'email' => 'Email',
          'username' => 'Name',
          'creationdate' => array('Column' => 'DateInserted', 'Filter' => array($this, 'JiveDate')),
          'modificationdate' => array('Column' => 'DateUpdated', 'Filter' => array($this, 'JiveDate')),
          'lastloggedin' => array('Column' => 'DateLastActive', 'Filter' => array($this, 'JiveDate')),
          'passwordhash' => 'Password',
          'firstname' => array('Column' => 'FirstName', 'Type' => 'varchar(30)'),
          'lastname' => array('Column' => 'LastName', 'Type' => 'varchar(30)'),
          'attachmentid' => array('Column' => 'Photo', 'Filter' => array($this, 'JivePhoto')),
          'emailvisible' => 'ShowEmail');
      $ex->exportTable('User',
         "select u.*, !u.userenabled as Banned, a.attachmentid, a.filename, a.contenttype
         from :_user u
         left join :_attachment a
            on a.objecttype = 501 and filename like '%_72' and a.objectid = u.userid;", $user_Map);


      // Roles.
      $ex->exportTable('Role', "
         select 2 as RoleID, 'Guest' as Name
         union all select 3, 'Confirm Email'
         union all select 4, 'Applicant'
         union all select 8, 'Member'
         union all select 16, 'Administrator'
         union all select 32, 'Moderator'");


      // Permissions
      $ex->exportTable('Permission', "
         select 2 as RoleID, 'View' as _Permissions
         union all select 3, 'View,Garden.SignIn.Allow'
         union all select 4, 'View,Garden.SignIn.Allow'
         union all select 8, 'View,Garden.SignIn.Allow,Vanilla.Discussions.Add,Vanilla.Comments.Add'
         union all select 16, 'All'
         union all select 32, 'View,Garden.SignIn.Allow,Vanilla.Discussions.Add,Vanilla.Comments.Add,Garden.Moderation.Manage'
      ");


      // User roles.
      $ex->query("update jiveuser u
         join jiveuserperm up
            on up.userid = u.userid
         set u.permission = 16
         where up.permissiontype = 1
            and up.permission = 59");

      $ex->query("update jiveuser u
         join jiveuserperm up
            on up.userid = u.userid
         set u.permission = 32
         where up.permissiontype = 1
            and up.permission = 7
            and u.permission is null");

      $userRole_Map = array(
          'userid' => 'UserID',
          'roleid' => 'RoleID');
      $ex->exportTable('UserRole', "select userid, coalesce(permission, 8) as roleid from :_user", $userRole_Map);


      $now = time() * 1000;


      // Categories.
      $category_Map = array(
          'id' => 'CategoryID',
          'name' => 'Name',
          'description' => 'Description',
          'displayname' => 'UrlCode',
          'creationdate' => array('Column' => 'DateInserted', 'Filter' => array($this, 'JiveDate')),
          'modificationdate' => array('Column' => 'DateUpdated', 'Filter' => array($this, 'JiveDate')),
          'parentid' => 'ParentCategoryID'
      );

      list($minComID, $maxComID) = $this->getMax('community', 'communityid');
      list($minBlogID, $maxBlogID) = $this->getMax('blog', 'blogid');

      $BInc = $maxComID - $minBlogID + 1;
      self::$increments[self::TYPE_BLOG] = $BInc;
      $inc = $BInc + $maxBlogID;
      $socialGroupsID = $inc + 2;

      $ex->exportTable('Category',
      "select
         c.communityid as id,
         c.name,
         c.description,
         c.displayname,
         c.creationdate,
         c.modificationdate,
         c2.communityid as parentid,
         1 as Sort,
         0 as AllowGroups
      from :_community c
      left join jivecommunity c2
         on c2.lft < c.lft and c2.rgt > c.rgt

      union all

      select blogid + $BInc, name, description, coalesce(nullif(displayname, ''), concat('b-', blogid)), creationdate, modificationdate, $inc + 1 as parentid, 2, 0
      from :_blog

      union all

      select $inc + 1 as id, 'Blogs' as name, '' as description, 'blogs', $now, $now, null, 2 as Sort, 0

      union all

      select {$socialGroupsID} as id, 'Social Groups' as name, '' as description, 'social-groups', $now, $now, null, 3 as Sort, 1", $category_Map);


      // Discussions.
      $discussion_Map = array(
          'threadid' => 'DiscussionID',
          'subject' => 'Name',
          'body' => array('Column' => 'Body', 'Filter' => array($this, 'StripBody')),
          'userid' => 'InsertUserID',
          'creationdate' => array('Column' => 'DateInserted', 'Filter' => array($this, 'JiveDate')),
          'categoryid' => 'CategoryID',
          'type' => array('Column' => 'Type', 'Filter' => array($this, 'DiscussionFilter')),
          'foreignid' => array('Column' => 'ForeignID', 'Type' => 'varchar(100)', 'Filter' => array($this, 'DiscussionFilter')),
          'attributes' => array('Column' => 'Attributes', 'Type' => 'text', 'Filter' => array($this, 'DiscussionFilter')),
          'sourceid' => array('Column' => 'SourceID', 'Type' => 'varchar(100)'),
          'GroupID' => array('Column' => 'GroupID', 'Type' => 'int')
      );

      list($minThreadID, $maxThreadID) = $this->getMax('thread', 'threadid');
      list($minBlogPostID, $maxBlogPostID) = $this->getMax('blogpost', 'blogpostid');

      $blogPostInc = $maxThreadID - $minBlogPostID + 1;
      self::$increments[self::TYPE_BLOGPOST] = $blogPostInc;

      $sql = "/* All discussions. */
select
	t.threadid,
	m.subject,
	m.body,
   'Html' as Format,
	m.userid,
	t.creationdate,
	t.containerid as categoryid,
	null as type,
	null as foreignid,
	null as attributes,
	null,
	null as GroupID
from jivethread t
join jivemessage m
	on t.rootmessageid = m.messageid
where m.containertype = 14

union all

/* All blog posts. */
select
	b.blogpostid + $blogPostInc,
	b.subject,
	b.body,
   'Html' as Format,
	b.userid,
	b.publishdate,
	b.blogid + $BInc,
	'blog',
	b.blogpostid,
	null,
    b.permalink,
	null
from jiveblogpost b

union all

/* Social group threads */
select
	t.threadid,
	m.subject,
	m.body,
   'Html' as Format,
	m.userid,
	t.creationdate,
	{$socialGroupsID},
	null as type,
	null as foreignid,
	null as attributes,
    null,
    t.containerid as GroupID
from jivethread t
join jivemessage m
	on t.rootmessageid = m.messageid
where m.containertype = 700";

      $ex->exportTable('Discussion', $sql, $discussion_Map);


      // Comments.
      list($minMessageID, $maxMessageID) = $this->getMax('message', 'messageid');
      list($minCommentID, $maxCommentID) = $this->getMax('comment', 'commentid');

      $commentInc = $maxMessageID - $minCommentID + 1;
      self::$increments[self::TYPE_COMMENT] = $commentInc;

      $comment_Map = array(
          'messageid' => 'CommentID',
          'threadid' => 'DiscussionID',
          'userid' => 'InsertUserID',
          'ip' => 'InsertIPAddress',
          'body' => array('Column' => 'Body', 'Filter' => array($this, 'StripBody')),
          'creationdate' => array('Column' => 'DateInserted', 'Filter' => array($this, 'JiveDate')),
          'sourceid' => array('Column' => 'SourceID', 'Type' => 'varchar(100)')
      );

      $sql = "select
	m.messageid,
	m.threadid,
	m.userid,
	null as ip,
	m.body,
	'Html' as Format,
	m.creationdate,
	null as sourceid
from jivemessage m
left join jivethread t
	on m.threadid = t.threadid
where m.messageid != t.rootmessageid and m.containertype = 14

union all

select
	c.commentid + $commentInc,
	c.objectid + $blogPostInc,
	c.userid,
	c.ip,
	c.body,
	'Html' as Format,
	creationdate,
	c.commentid as sourceid
from jivecomment c
where c.objecttype in (38)

union all

select
	m.messageid,
	m.threadid,
	m.userid,
	null as ip,
	m.body,
	'Html' as Format,
	m.creationdate,
	null as sourceid
from jivemessage m
left join jivethread t
	on m.threadid = t.threadid
where m.messageid != t.rootmessageid and m.containertype = 700";

      $ex->exportTable('Comment', $sql, $comment_Map);


      // Groups.
      $group_Map = array(
          'creationdate' => array(
              'Column' => 'DateInserted',
              'Filter' => array($this, 'JiveDate')
          )
      );
      $ex->exportTable('Group', "select groupid as GroupID, name as Name, description as Description,
              'Html' as Format, creationdate
          from :_sgroup", $group_Map);


       // UserGroups.
      $userGroup_Map = array(
          'creationdate' => array(
              'Column' => 'DateInserted',
              'Filter' => array($this, 'JiveDate')
          )
      );
      $ex->exportTable('UserGroup', "select membershipid as UserGroupID, groupid as GroupID, userid as UserID,
	          case membertype
		          when 0 then 'Leader'
		          else 'Member'
	          end as Role, creationdate
          from jivesgroupmember", $userGroup_Map);


      // Tags.
      $tag_Map = array(
          'tagid' => 'TagID',
          'tagname' => 'Name',
          'creationdate' => array('Column' => 'DateInserted', 'Filter' => array($this, 'JiveDate')));
      $ex->exportTable('Tag', 'select * from :_tag', $tag_Map);


      // Tag discussion.
      $tagDiscussion_Map = array(
          'tagid' => 'TagID',
          'containerid' => array('Column' => 'DiscussionID', 'Filter' => array($this, 'Inc'))
      );
      $ex->exportTable('TagDiscussion', 'select * from :_tagcloud', $tagDiscussion_Map);


      // UserMeta.
      $userMeta_Map = array(
          'userid' => 'UserID',
          'name' => 'Name',
          'propvalue' => 'Value');
      $ex->exportTable('UserMeta', 'select * from :_userprop', $userMeta_Map);


      // Media.
      $media_Map = array(
          'attachmentid' => 'MediaID',
          'filname' => 'Name',
          'contenttype' => 'Type',
          'filesize' => 'Size',
          'SourceForeignID' => array('Column' => 'ForeignID', 'Filter' => array($this, 'Inc')),
          'creationdate' => array('Column' => 'DateInserted', 'Filter' => array($this, 'JiveDate'))
      );

      $sql =
"select
	t.threadid,
	a.*,
	concat('/jivebinstore/attachment-', attachmentid, '-', filename) as Path,
	case when t.threadid is not null then 1 else a.objecttype end as containertype,
	case when t.threadid is not null then 'Discussion' when objecttype = 2 then 'Comment' else 'Discussion' end as ForeignTable,
	case when t.threadid is not null then threadid else a.objectid end as SourceForeignID
from jiveattachment a
left join jivethread t
	on a.objectid = t.rootmessageid and a.objecttype = 2
where objecttype in (38, 2, 102);";

      $ex->exportTable('Media', $sql, $media_Map);


      // Export the conversations.
      $this->_exportConversations();


      // End.
      $ex->endExport();
   }

   protected function _exportConversations() {
      $ex = $this->ex;

      $ex->query('drop table if exists z_pmto;');

      $ex->query("create table z_pmto (
         id bigint,
         userid bigint,
         primary key(id, userid));");

      $ex->query('insert ignore z_pmto (id, userid)
         select pmessageid, senderid
         from jivepmessage;');

      $ex->query("insert ignore z_pmto (id, userid)
         select pmessageid, recipientid
         from jivepmessage;");

      $ex->query("drop table if exists z_pmto2;");

      $ex->query("create table z_pmto2 (
           id int unsigned,
           userids varchar(250),
           primary key (id)
         );");

      $ex->query("insert ignore z_pmto2 (id, userids)
         select
           id,
           group_concat(userid order by userid)
         from z_pmto
         group by id;");

       $ex->query("drop table if exists z_pm");

       $ex->query("create table z_pm (
           id int unsigned,
           subject varchar(255),
           subject2 varchar(255),
           userids varchar(250),
           groupid int unsigned
         );");

      $ex->query("insert z_pm (
           id,
           subject,
           subject2,
           userids
         )
         select
           pm.pmessageid,
           pm.subject,
           case when pm.subject like 'Re: %' then trim(substring(pm.subject, 4)) else pm.subject end as subject2,
           t.userids
         from jivepmessage pm
         join z_pmto2 t
           on t.id = pm.pmessageid;");

      $ex->query("create index z_idx_pm on z_pm (id);");

      $ex->query("drop table if exists z_pmgroup;");

      $ex->query("create table z_pmgroup (
           groupid int unsigned,
           subject varchar(255),
           userids varchar(250)
         );");

      $ex->query("insert z_pmgroup (
           groupid,
           subject,
           userids
         )
         select
           min(pm.id),
           pm.subject2,
           pm.userids
         from z_pm pm
         group by pm.subject2, pm.userids;");

      $ex->query("create index z_idx_pmgroup on z_pmgroup (subject, userids);");
      $ex->query("create index z_idx_pmgroup2 on z_pmgroup (groupid);");

      $ex->query("update z_pm pm
         join z_pmgroup g
           on pm.subject2 = g.subject and pm.userids = g.userids
         set pm.groupid = g.groupid;");

      // Conversation.
      $conversation_Map = array(
         'pmessageid' => 'ConversationID',
         'senderid' => 'InsertUserID',
         'RealSubject' => array('Column' => 'Subject', 'Type' => 'varchar(250)'),
         'creationdate' => array('Column' => 'DateInserted', 'Filter' => array($this, 'JiveDate'))
      );
      $sql = "select
           g.subject as RealSubject,
           pm.*
         from jivepmessage pm
         join z_pmgroup g
           on g.groupid = pm.pmessageid";
      $ex->exportTable('Conversation', $sql, $conversation_Map);

      // Comversation message.
      $conversationMessage_Map = array(
          'pmessageid' => 'MessageID',
          'groupid' => 'ConversationID',
          'senderid' => 'InsertUserID',
          'body' => array('Column' => 'Body', 'Filter' => array($this, 'StripBody')),
          'sentdate' => 'DateInserted'
      );
      $sql = "select
         pm.*,
         pm2.groupid,
         'Html' as Format
       from jivepmessage pm
       join z_pm pm2
         on pm.pmessageid = pm2.id;";
      $ex->exportTable('ConversationMessage', $sql, $conversationMessage_Map);

      // User Conversation.
      $userConversation_Map = array(
         'userid' => 'UserID',
         'groupid' => 'ConversationID'
      );
      $ex->exportTable('UserConversation',
      "select
         g.groupid,
         t.userid
       from z_pmto t
       join z_pmgroup g
         on g.groupid = t.id;", $userConversation_Map);

      $ex->query('drop table if exists z_pmto');
      $ex->query('drop table if exists z_pmto2;');
      $ex->query('drop table if exists z_pm;');
      $ex->query('drop table if exists z_pmgroup;');
   }


   public function inc($value, $columnName, $row) {
      $containerType = $row['containertype'];
      if (isset(self::$increments[$containerType]))
         return $value + self::$increments[$containerType];
      return $value;
   }

   public function discussionFilter($value, $columnName, $row) {
      if ($value)
         return $value;

      if (strpos($row['body'], '<body><p>This thread ha') !== false) {
         if (preg_match('`"(http://[^"]+)"`', $row['body'], $matches)) {
            $url = $matches[1];
            $ID = null;
            if (preg_match('`(\d+)`', $url, $matches))
               $ID = $matches[1];

            switch ($columnName) {
               case 'Type':
                  return 'page';
               case 'ForeignID':
                  return $ID;
               case 'Attributes':
                  return serialize(array('ForeignUrl' => $url));
               default:
                  return $columnName;
            }
         } else {
            return null;
         }
      } else {
         return null;
      }
   }

   public function getMax($tableName, $column) {
      $sql = "select min($column) as `MinValue`, max($column) as `MaxValue` from :_$tableName";
      $result = $this->ex->query($sql, true);
      $row = mysql_fetch_assoc($result);
      if ($row)
         return array($row['MinValue'], $row['MaxValue']);
      return 0;
   }

   protected function _definePosgresTable($path, $tableName, $columnInfo) {
      $typeMaps = array("character varying" => 'varchar', 'timestamp without time zone' => 'datetime', 'bytea' => 'text');

      // Loop through the columns and buld up a tabledef.
      $defs = array();
      foreach ($columnInfo as $columnName => $info) {
         $columnName = trim($columnName);
         if (!$columnName) {
            continue;
         }

         $type = $info['data_type'];
         if (isset($typeMaps[$type]))
            $type = $typeMaps[$type];

         if ($info['character_maximum_length']) {
            $defs[$columnName] = "$columnName $type({$info['character_maximum_length']})";
         } else
            $defs[$columnName] = $columnName.' '.$type;
      }

      // Drop the table.
      $this->ex->query("drop table if exists `$tableName`");

      // Create the table.
      $createDef = "create table `$tableName` (\n".implode(",\n", $defs).')';
      $this->ex->query($createDef, true);
   }

   public function pgConnect() {
      $connectionString = "host={$this->ex->_host} port=5432 dbname={$this->ex->_dbName} user=postgres password=postgres";
      $pg = pg_Connect($connectionString);
      return $pg;
   }

   public function exportPostgresCSV() {
      $pg = $this->pgConnect();

      if (!$pg)
         throw new Exception('Could not connect to postgres.');

      $sql = "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';";

      $result = pg_Query($pg, $sql);
      $rows = pg_Fetch_All($result);
      pg_Free_Result($result);

      $importTables = array();

      foreach ($rows as $row) {
         $tableName = $row['table_name'];
         $name = substr($tableName, strlen($this->ex->prefix));

         // Save the table to csv.
         $path = dirname(__FILE__)."/{$this->ex->prefix}/$name.csv";

         // Get all of the columns from the table.
         $sql = "SELECT column_name, data_type, character_maximum_length FROM information_schema.columns WHERE table_name ='$tableName' order by ordinal_position;";
         pg_Send_Query($pg, $sql);
         $result = pg_Get_Result($pg);
         $error = pg_Result_Error($result);
         if ($error) {
            echo "$sql\n$error";
            continue;
         }
         $data = pg_Fetch_All($result);

         $columns = array();
         $byteColumns = array();
         foreach ($data as $row) {
            if ($row['data_type'] == 'bytea') {
               $byteColumns[$row['column_name']] = $row;
            } else {
               $columns[$row['column_name']] = $row;
            }
         }

         $importTables[$tableName] = array('Path' => $path, 'Columns' => $columns, 'ByteColumns' => $byteColumns);

         // Copy the table to csv.
         $columnsString = implode(', ', array_keys($columns));
         $sql = "copy $tableName ($columnsString) to '$path' with csv header;";

         pg_Send_Query($pg, $sql);
         $result = pg_Get_Result($pg);
         $error = pg_Result_Error($result);
         if ($error) {
            echo "$sql\n$error";
            continue;
         }
         pg_Free_Result($result);
      }
      pg_Close();
      return $importTables;
   }

   public function importCSVs($importTables) {
      foreach ($importTables as $tableName => $info) {
         $path = $info['Path'];
         $columns = $info['Columns'];
         $byteColumns = $info['ByteColumns'];

         $this->importCSV($path, $tableName, $columns);

         if (count($byteColumns) > 0) {
            $this->exportFiles($tableName, $columns, $byteColumns);
         }
      }
   }

   public function jivePhoto($value, $columnName, $row) {
      if (!$row['filename'])
         return null;
      $result = 'jivebinstore/'.$this->addExtension("attachment-$value-{$row['filename']}", $row['contenttype']);
      return $result;
   }

   public function exportFiles($tableName, $columns, $byteColumns) {

      if ($tableName != $this->ex->prefix.'binstore')
         return;

      echo $tableName;

      $directory = dirname(__FILE__)."/{$this->ex->prefix}/uploads/{$tableName}";
      if (!file_exists($directory))
         mkdir($directory, 0777, true);

      $pg = $this->pgConnect();
      $i = 0;
      $j = 10000;

      do  {
         $sql = "SET bytea_output = 'escape'; select b.*, a.filename, a.filesize, a.contenttype, a.objecttype from $tableName b join {$this->ex->prefix}attachment a on 'attachment-' || a.attachmentid = b.binkey limit $j offset $i";
         $result = pg_Query($pg, $sql);

         $count = 0;
         while (($row = pg_Fetch_Assoc($result)) !== false) {
            // Figure out the filename.
            $filename = $row['binkey'].'-'.$this->addExtension($row['filename'], $row['contenttype']);
            $path = $directory.'/'.$filename;

            // Change the filename for profile pictures.
            if ($row['objecttype'] == 501) {
               if (substr_compare($row['filename'], '_72', -3) == 0) {
                  $basename = 'n'.$row['binkey'].'-'.$this->addExtension(substr($row['filename'], 0, -3), $row['contenttype']);
               } elseif (substr_compare($row['filename'], '_350', -4) == 0) {
                  $basename = 'p'.$row['binkey'].'-'.$this->addExtension(substr($row['filename'], 0, -4), $row['contenttype']);
               } else {
                  continue;
               }

               $path = $directory.'/'.$basename;
            } else {
//               continue;
            }

//            echo $path."\n";

            $data = pg_Unescape_Bytea($row['bindata']);
            $sizeDiff = $row['datasize'] - $row['filesize'];
            if ($sizeDiff > 0)
               $data = substr($data, $sizeDiff);

            $fp = fopen($path, "wb");
            fwrite($fp, $data);
            fclose($fp);

            $count++;
         }
         if ($count < $j - 1)
            break;

         $i += $j;
      } while ($i < $j * 100);

      switch ($tableName) {
         case 'jivebinstore':
      }
   }

   public function importCSV($path, $tableName, $columnInfo = array()) {
      $this->_definePosgresTable($path, $tableName, $columnInfo);

      $this->ex->query("truncate table `$tableName`;");

      $QPath = mysql_escape_string($path);

      $sql = "load data infile '$QPath' into table $tableName
         character set utf8
         columns terminated by ','
         optionally enclosed by '\"'
         lines terminated by '\\n'
         ignore 1 lines";
      $this->ex->query($sql);
   }

   public function jiveDate($value) {
      if (!$value)
         return null;

      return date('Y-m-d H:i:s', $value / 1000);
   }

   public function stripBody($value) {
      if (strlen($value) >= strlen('<body>') && substr_compare($value, '<body>', 0, strlen('<body>')) == 0)
         $value = substr($value, strlen('<body>'));
      if (strlen($value) >= strlen('</body>') && substr_compare($value, '</body>', -strlen('</body>')) == 0)
         $value = substr($value, 0, -strlen('</body>'));
      return $value;
   }

   public function addExtension($filename, $contentType) {
      if (strpos($filename, '.') === false && isset(self::$extensions[$contentType])) {
         $ext = self::$extensions[$contentType];
         $filename .= $ext;
      }
      return $filename;
   }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * @copyright 2009-2014 Vanilla Forums Inc.
 * @license http://www.opensource.org/licenses/gpl-2.0.php GPLv2
 */

$supported['jive4'] = array('name' => 'Jive 4', 'prefix' => 'Jive');


class Jive4 extends ExportController {
    /**
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {
//        $this->Ex->TestMode = TRUE;

//        $ex->BeginExport('', 'Jive4', array('HashMethod' => 'reset'));
        $ex->beginExport('', 'Jive4');

        $ex->query("drop table if exists vanilla_messageID_userID_map;");
        $ex->query("drop table if exists vanilla_user");
        $ex->query("drop table if exists vanilla_message;");

        // Create temporary tables.

        $ex->query("create table vanilla_messageID_userID_map (
            messageID int not null,
            userID int not null
            );
        ");
        $ex->query("create table vanilla_user like jiveuser;");
        $ex->query("create table vanilla_message like jivemessage;");

        // Prepare temporary tables.

        $ex->query("ALTER TABLE jiveuser ADD INDEX (email);");
        $ex->query("alter table vanilla_user modify column userID int auto_increment;");
        $ex->query("drop index username on vanilla_user;");


        // Populate vanilla_user with all existing users.

        $ex->query("insert into vanilla_user select * from jiveuser;");

        // Look up messages with no userID; If message has name/email in props then try and add that user.
        // Messages will be update below.

        $ex->query("insert ignore into vanilla_user (Email, Username)
            select p1.propValue as Email, p2.propValue as Name
            from jivemessage jm
            left join jiveMessageProp p1 on jm.messageID=p1.messageID and p1.name='email'
            left join jiveMessageProp p2 on jm.messageID=p2.messageID and p2.name='name'
            left join jiveuser ju on (p1.propValue = ju.email)
            where jm.userID is null and ju.userID is null and p1.propvalue != ''
            group by p1.propValue;");

        // Duplicate emails will be imported.
        $user_Map = array(
            'userID' => 'UserID',
            'email' => 'Email',
            'username' => 'Name',
            'creationDate' => array('Column' => 'DateInserted', 'Filter' => array($this, 'JiveDate')),
            'modificationDate' => array('Column' => 'DateUpdated', 'Filter' => array($this, 'JiveDate')),
            'newPasswordHash' => 'Password',
            'emailVisible' => 'ShowEmail');
        // JiveGroupUser.groupID == 7 == Admin
        $ex->exportTable(
            'User',
            "select
              ju.*,
              p1.propValue as Location,
              p2.propValue as About,
              if (groupID = 7, 1, 0) as Admin,
              if(passwordHash='', 'reset', 'django') as HashMethod,
              if(passwordHash='', '', concat('md5$$', passwordHash)) as newPasswordHash
            from vanilla_user ju
            left join jiveUserProp p1 on p1.userID = ju.UserID and p1.name= 'JiveLocation'
            left join jiveUserProp p2 on p2.userID = ju.UserID and p2.name= 'JiveBiography'
			left join JiveGroupUser jgu on jgu.userID = ju.userID and jgu.groupID = 7;",
            $user_Map
        );

        // UserMeta.

        $userMeta_Map = array(
            'userID' => 'UserID',
            'name' => 'Name',
            'propValue' => 'Value');
        $ex->exportTable(
            'UserMeta',
            "select
                userID,
                Replace(Concat('Profile.', name), 'jive', '') as name,
                propValue
                from jiveUserProp where name in ('jiveHomepage', 'jiveOccupation')
            union all
            select userID, 'Profile.Name', name from jiveuser where name != '';",
            $userMeta_Map
        );


        // Populate vanilla_message with existing data.
        $ex->query("insert into vanilla_message select * from jivemessage;");

        // Map messageID to new UserID created above.

        $ex->query("insert into vanilla_messageID_userID_map (select vm.messageID, vu.userID
            from vanilla_message vm
            join jiveMessageProp jmp on jmp.messageID = vm.messageID and jmp.name='email'
            join vanilla_user vu on jmp.propvalue = vu.email
            where vm.userID is null);");
        $updates = array();
        $result = $ex->query('select * from vanilla_messageID_userID_map;');
        while ($row = mysql_fetch_assoc($result)) {
            $query = "update vanilla_message set userID = " . mysql_real_escape_string($row['userID'])
                . ' where messageID = ' . mysql_real_escape_string($row['messageID']);
            $updates[] = $query;
        }
        foreach ($updates as $update) {
            $ex->query($update);
        }
        unset($updates);

        // set missing userid to anonymous or zero if not found.
        (int)$anonymousUserID = $ex->getValue("select userID from vanilla_user where username = 'Anonymous'", 0);
        $ex->query("update vanilla_message set userID = $anonymousUserID where userID is null");

        // Remove temporary tables.

//        $ex->Query("drop table if exists vanilla_messageID_userID_map;");
//        $ex->Query("drop table if exists vanilla_user");
//        $ex->Query("drop table if exists vanilla_message;");



        // Roles
        $role_Map = array(
            'groupID' => 'RoleID',
            'name' => 'Name',
            'description' => 'Description'
        );

        $sql = "select groupID, name, description
        from jiveGroup

        union all
        select 1000, 'Guest', 'Guest role'

        union all
        select 1001, 'Member', 'Member role'

        union all
        select 1002, 'Applicant', 'Applicant role'";

        $ex->exportTable(
            'Role',
            $sql,
            $role_Map
        );

        $sql = "select coalesce(gu.groupID, 1001) as groupID, u.userID
                from jiveuser u
                left join jiveGroupUser gu
                    on u.userID = gu.userID
                ;";
        // UserRole.
        $userRole_Map = array(
            'userID' => 'UserID',
            'groupID' => 'RoleID');
        $ex->exportTable(
            'UserRole',
            $sql,
            $userRole_Map
        );


        // Categories

        $category_Map = array(
            'categoryID' => 'CategoryID',
            'name' => 'Name',
            'description' => 'Body',
            'lft' => 'TreeLeft',
            'rgt' => 'TreeRight'
        );
        $ex->exportTable('Category', "select * from JiveCategory where name !='root' ", $category_Map);


        // Discussions
        $discussion_Map = array(
            'threadID' => 'DiscussionID',
            'subject' => 'Name',
            'body' => 'Body',
            'newUserID' => 'InsertUserID',
            'creationDate' => array('Column' => 'DateInserted', 'Filter' => array($this, 'JiveDate')),
            'modificationDate' => array('Column' => 'DateUpdated', 'Filter' => array($this, 'JiveDate')),
        );

        $ex->exportTable(
            'Discussion',
            "select
                jm.*,
                jf.CategoryID,
                if (jm.userID is null, 4, jm.userID) as newUserID,
                'Text' as Format
                from jivethread jt
                join vanilla_message jm on (rootMessageID=messageID)
                join jiveForum jf on (jf.forumID=jm.forumID)
                where parentMessageID IS NULL
            ",
            $discussion_Map
        );

        // Comments
        // jivemessage.userID == 4 == Anonymous

        $comment_Map = array(
            'messageID' => 'CommentID',
            'threadID' => 'DiscussionID',
            'body' => 'Body',
            'newUserID' => 'InsertUserID',
            'creationDate' => array('Column' => 'DateInserted', 'Filter' => array($this, 'JiveDate')),
            'modificationDate' => array('Column' => 'DateUpdated', 'Filter' => array($this, 'JiveDate')),
        );

        $ex->exportTable(
            'Comment',
            "select
                jm.*,
                if (jm.userID is null, 4, jm.userID) as newUserID,
                'Text' as Format
                from vanilla_message jm
                where parentMessageID IS not null
            ",
            $comment_Map
        );

        // Import forums as tags.
        $tag_Map = array(
            'forumID' => 'TagID',
            'name' => array('Column' => 'Name', 'Filter' => array($this, 'formatSlug')),
            'name2' => 'FullName',
            'categoryID' => 'CategoryID',
            'creationDate' => array('Column' => 'DateInserted', 'Filter' => array($this, 'JiveDate')),

        );
        // forumname with , gets treated as tag separator.. change to space
        $ex->exportTable('Tag', "select jf.*, name as name, name as name2 from jiveForum jf", $tag_Map);

        // TagDiscussion.
        $tagDiscussionMap = array(
            'forumID' => 'TagID',
            'threadID' => 'DiscussionID',
            'categoryID' => 'CategoryID'
        );
        $ex->exportTable(
            'TagDiscussion',
            "select forumID, threadID, categoryID, NOW() as DateInserted
             from vanilla_message join jiveforum using (forumID) where parentMessageID IS NULL;",
            $tagDiscussionMap
        );


        // Media.
        $cdn = $this->param('cdn', '');
        $media_Map = array(
            'attachmentID' => 'MediaID',
            'fileName' => 'Name',
            'contentType' => 'Type',
            'creationDate' => array('Column' => 'DateInserted', 'Filter' => array($this, 'JiveDate')),
            'fileSize' => 'Size',
            'userID' => 'InsertUserID'
        );
        $ex->exportTable(
            'Media',
            "select
                 case when vm.parentMessageID is NULL then 'discussion' else 'comment' end as ForeignTable,
                 case when vm.parentMessageID is NULL then vm.threadID  else vm.messageID end as ForeignID,
                 concat('$cdn', '/FileUpload/', vm.forumID, '-', vm.threadID, '-', ja.objectID, '-', ja.attachmentID ,'/', fileName) as Path,
                 ja.*, vu.userID
                from jiveAttachment ja
                 join vanilla_message vm on vm.messageID = ja.objectID and ja.objectType=2
                 join vanilla_user vu on vm.userID = vu.userID;",
            $media_Map);

    }

    public function jiveDate($value) {
        if (!$value)
            return null;

        return date('Y-m-d H:i:s', $value / 1000);
    }

    /**
     * Generate a url friendly slug from a string.
     *
     * @param string $str A string to be formatted.
     * @return string
     * @global array $transliterations An array of translations from other scripts into url friendly characters.
     */
    function formatSlug($str) {
        $transliterations = array('–' => '-', '—' => '-', 'À' => 'A', 'Á' => 'A', 'Â' => 'A', 'Ã' => 'A', 'Ä' => 'Ae',
            'Å' => 'A', 'Ā' => 'A', 'Ą' => 'A', 'Ă' => 'A', 'Æ' => 'Ae', 'Ç' => 'C', 'Ć' => 'C', 'Č' => 'C', 'Ĉ' => 'C',
            'Ċ' => 'C', 'Ď' => 'D', 'Đ' => 'D', 'Ð' => 'D', 'È' => 'E', 'É' => 'E', 'Ê' => 'E', 'Ë' => 'E', 'Ē' => 'E',
            'Ě' => 'E', 'Ĕ' => 'E', 'Ė' => 'E', 'Ĝ' => 'G', 'Ğ' => 'G', 'Ġ' => 'G', 'Ģ' => 'G', 'Ĥ' => 'H', 'Ħ' => 'H',
            'Ì' => 'I', 'Í' => 'I', 'Î' => 'I', 'Ï' => 'I', 'Ī' => 'I', 'Ĩ' => 'I', 'Ĭ' => 'I', 'Į' => 'I', 'İ' => 'I',
            'Ĳ' => 'IJ', 'Ĵ' => 'J', 'Ķ' => 'K', 'Ł' => 'K', 'Ľ' => 'K', 'Ĺ' => 'K', 'Ļ' => 'K', 'Ŀ' => 'K', 'Ñ' => 'N',
            'Ń' => 'N', 'Ň' => 'N', 'Ņ' => 'N', 'Ŋ' => 'N', 'Ò' => 'O', 'Ó' => 'O', 'Ô' => 'O', 'Õ' => 'O', 'Ö' => 'Oe',
            'Ō' => 'O', 'Ő' => 'O', 'Ŏ' => 'O', 'Œ' => 'OE', 'Ŕ' => 'R', 'Ŗ' => 'R', 'Ś' => 'S', 'Š' => 'S', 'Ş' => 'S',
            'Ŝ' => 'S', 'Ť' => 'T', 'Ţ' => 'T', 'Ŧ' => 'T', 'Ț' => 'T', 'Ù' => 'U', 'Ú' => 'U', 'Û' => 'U', 'Ü' => 'Ue',
            'Ū' => 'U', 'Ů' => 'U', 'Ű' => 'U', 'Ŭ' => 'U', 'Ũ' => 'U', 'Ų' => 'U', 'Ŵ' => 'W', 'Ý' => 'Y', 'Ŷ' => 'Y',
            'Ÿ' => 'Y', 'Ź' => 'Z', 'Ž' => 'Z', 'Ż' => 'Z', 'Þ' => 'T', 'à' => 'a', 'á' => 'a', 'â' => 'a', 'ã' => 'a',
            'ä' => 'ae', 'å' => 'a', 'ā' => 'a', 'ą' => 'a', 'ă' => 'a', 'æ' => 'ae', 'ç' => 'c', 'ć' => 'c', 'č' => 'c',
            'ĉ' => 'c', 'ċ' => 'c', 'ď' => 'd', 'đ' => 'd', 'ð' => 'd', 'è' => 'e', 'é' => 'e', 'ê' => 'e', 'ë' => 'e',
            'ē' => 'e', 'ę' => 'e', 'ě' => 'e', 'ĕ' => 'e', 'ė' => 'e', 'ƒ' => 'f', 'ĝ' => 'g', 'ğ' => 'g', 'ġ' => 'g',
            'ģ' => 'g', 'ĥ' => 'h', 'ħ' => 'h', 'ì' => 'i', 'í' => 'i', 'î' => 'i', 'ï' => 'i', 'ī' => 'i', 'ĩ' => 'i',
            'ĭ' => 'i', 'į' => 'i', 'ı' => 'i', 'ĳ' => 'ij', 'ĵ' => 'j', 'ķ' => 'k', 'ĸ' => 'k', 'ł' => 'l', 'ľ' => 'l',
            'ĺ' => 'l', 'ļ' => 'l', 'ŀ' => 'l', 'ñ' => 'n', 'ń' => 'n', 'ň' => 'n', 'ņ' => 'n', 'ŉ' => 'n', 'ŋ' => 'n',
            'ò' => 'o', 'ó' => 'o', 'ô' => 'o', 'õ' => 'o', 'ö' => 'oe', 'ø' => 'o', 'ō' => 'o', 'ő' => 'o', 'ŏ' => 'o',
            'œ' => 'oe', 'ŕ' => 'r', 'ř' => 'r', 'ŗ' => 'r', 'š' => 's', 'ù' => 'u', 'ú' => 'u', 'û' => 'u', 'ü' => 'ue',
            'ū' => 'u', 'ů' => 'u', 'ű' => 'u', 'ŭ' => 'u', 'ũ' => 'u', 'ų' => 'u', 'ŵ' => 'w', 'ý' => 'y', 'ÿ' => 'y',
            'ŷ' => 'y', 'ž' => 'z', 'ż' => 'z', 'ź' => 'z', 'þ' => 't', 'ß' => 'ss', 'ſ' => 'ss', 'А' => 'A', 'Б' => 'B',
            'В' => 'V', 'Г' => 'G', 'Д' => 'D', 'Е' => 'E', 'Ё' => 'YO', 'Ж' => 'ZH', 'З' => 'Z', 'Й' => 'Y', 'К' => 'K',
            'Л' => 'L', 'М' => 'M', 'Н' => 'N', 'О' => 'O', 'П' => 'P', 'Р' => 'R', 'С' => 'S', 'ș' => 's', 'ț' => 't',
            'Ț' => 'T', 'У' => 'U', 'Ф' => 'F', 'Х' => 'H', 'Ц' => 'C', 'Ч' => 'CH', 'Ш' => 'SH', 'Щ' => 'SCH', 'Ъ' => '',
            'Ы' => 'Y', 'Ь' => '', 'Э' => 'E', 'Ю' => 'YU', 'Я' => 'YA', 'а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g',
            'д' => 'd', 'е' => 'e', 'ё' => 'yo', 'ж' => 'zh', 'з' => 'z', 'и' => 'i', 'й' => 'y', 'к' => 'k', 'л' => 'l',
            'м' => 'm', 'н' => 'n', 'о' => 'o', 'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f',
            'х' => 'h', 'ц' => 'c', 'ч' => 'ch', 'ш' => 'sh', 'щ' => 'sch', 'ъ' => '', 'ы' => 'y', 'ь' => '', 'э' => 'e',
            'ю' => 'yu', 'я' => 'ya');

        $str = trim($str);
        $str = strip_tags(html_entity_decode($str, ENT_COMPAT, 'UTF-8')); // remove html tags
        $str = strtr($str, $transliterations); // transliterate known characters
        $str = preg_replace('`([^\PP.\-_])`u', '', $str); // get rid of punctuation
        $str = preg_replace('`([^\PS+])`u', '', $str); // get rid of symbols
        $str = preg_replace('`[\s\-/+.]+`u', '-', $str); // replace certain characters with dashes
        $str = rawurlencode(strtolower($str));
        $str = trim($str, '.-');
        return $str;
    }


}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * Moot exporter tool.
 *
 * Use jsondump to create tables: channel, discussion, comment
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license Proprietary
 * @package VanillaPorter
 */

$supported['moot'] = array('name'=> 'Moot', 'prefix'=>'');

class Moot extends ExportController {
   /**
    *
    * @param ExportModel $ex
    */
   public function forumExport($ex) {
      $ex->beginExport('', 'Moot');
      $ex->sourcePrefix = '';


      // User.
      // Create a temp user table to generate UserIDs & fake emails
      $ex->query("CREATE TABLE MootUsers (
         Name varchar(255) DEFAULT NULL,
         Email varchar(255) DEFAULT NULL,
         UserID int(10) unsigned NOT NULL AUTO_INCREMENT,
         PRIMARY KEY (UserID))");
      $ex->query("insert into MootUsers (Name) select distinct author
         from (select d.author from :_discussion d union select c.author from :_comment c) a
         where author <> ''");
      $ex->query("update MootUsers set Email = concat('user',UserID,'@deleted.email')");

      $user_Map = array();
      $ex->exportTable('User', "
         select u.*,
            NOW() as DateInserted,
            'Reset' as HashMethod
         from MootUsers u
         ", $user_Map);


      // Category.
      // Create a temp category table to generate CategoryIDs
      $ex->query("CREATE TABLE MootChannels (
         Name varchar(255) DEFAULT NULL,
         UrlCode varchar(255) DEFAULT NULL,
         CategoryID int(10) unsigned NOT NULL AUTO_INCREMENT,
         PRIMARY KEY (CategoryID))");
      $ex->query("insert into MootChannels (Name, UrlCode) select title, category from channel");

      $category_Map = array();
      $ex->exportTable('Category', "
         select c.*,
            -1 as ParentCategoryID
         from MootChannels c
         ", $category_Map);


      // Discussion.
      // Create a temp discussion table to generate DiscussionIDs
      $ex->query("CREATE TABLE MootDiscussions (
         Name varchar(255) DEFAULT NULL,
         MootKey varchar(255) DEFAULT NULL,
         Body text DEFAULT NULL,
         DateInserted datetime DEFAULT NULL,
         InsertUserID int(10) unsigned DEFAULT NULL,
         CategoryID int(10) unsigned DEFAULT NULL,
         DiscussionID int(10) unsigned NOT NULL AUTO_INCREMENT,
         PRIMARY KEY (DiscussionID))");
      $ex->query("insert into MootDiscussions (Name, MootKey, Body, DateInserted, InsertUserID, CategoryID)
         select d.title, d.key, d.body, FROM_UNIXTIME(d.date), u.UserID, c.CategoryID
         from :_discussion d
            left join MootChannels c on c.UrlCode = d.category
            left join MootUsers u on u.Name = d.author");

      $discussion_Map = array();
      $ex->exportTable('Discussion', "
         select d.*,
            'Markdown' as Format
         from MootDiscussions d", $discussion_Map);


      // Comment.
      $comment_Map = array();
      $ex->exportTable('Comment', "
      select c.body as Body,
         d.DiscussionID,
         u.UserID as InsertUserID,
         FROM_UNIXTIME(c.date) as DateInserted,
         'Markdown' as Format
      from :_comment c
        left join MootDiscussions d on d.MootKey = c.key
        left join MootUsers u on u.Name = c.author", $comment_Map);


      // Cleanup
      $ex->query("DROP TABLE IF EXISTS MootUsers");
      $ex->query("DROP TABLE IF EXISTS MootChannels");
      $ex->query("DROP TABLE IF EXISTS MootDiscussions");

      $ex->endExport();
   }
}

// Closing PHP tag required. (make.php)
?>
<?php
$supported['zendesk'] = array('name'=>'ZenDesk API', 'prefix'=>'zendesk');
$supported['zendesk']['CommandLine'] = array(
    'apiuser' => array('API user (usually email).', 'Sx' => '::', 'Short' => 'au'),
    'apipass' => array('API authentication password.', 'Sx' => '::', 'Short' => 'ap', 'Default' => ''),
    'apisite' => array('Subdomain of the ZenDesk.com site.', 'Sx' => '::', 'Short' => 'site'),
    'noexport' => array('Whether or not to skip the export.', 'Sx' => '::'),
    'attachurl' => array('URL of where current attachments are.', 'Sx' => '::'),
    'attachpath' => array('Path to download attachments too.', 'Sx' => '::'),
    'attachcdn' => array('URL of the new CDN.', 'Sx' => '::'),
);

class Zendesk extends ExportController {

    /**
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {

        $cdn = $this->param('cdn', '');
        $noexport = $this->param('noexport', '');
        if (empty($noexport)) {
            $apiuser = $this->param('apiuser', '');
            $apipass = $this->param('apipass', '');
            $apisite = $this->param('apisite', '');
            $dbname = $this->param('dbname');
            $dbuser = $this->param('dbuser');
            $dbpass = $this->param('dbpass');

            if (empty($apiuser) || empty($apisite) || empty($apipass)) {
                echo "You have asked for an API export but not provided all the required args." . PHP_EOL;
                echo "Reminder: To view help  $ php index.php --help". PHP_EOL;
                exit;
            }

            echo "Starting API export." . PHP_EOL;
            passthru("php zendesk.php $apisite $apiuser $apipass $dbname $dbuser $dbpass");
        } else {
            echo "Skipping API export." . PHP_EOL;
        }

//        $this->Ex->TestMode = TRUE;

        $ex->beginExport('', 'zendesk');

        $characterSet = $ex->getCharacterSet('zendesk_articles');
        if ($characterSet)
            $ex->characterSet = $characterSet;

        // Users
        $users_Map = array(
            'id' => 'UserID',
            'name' => 'Name',
            'email' => 'Email',
            'created_at' => 'DateInserted',
            'updated_at' => 'DateUpdated',
            'updated_at' => 'DateLastActive',
            'verified' => 'Verified',
        );
        $ex->exportTable(
            'User',
            "select u.* from zendesk_users u",
            $users_Map
        );

        // Articles => Discussions
        $discussion_Map = array(
            'id' => 'DiscussionID',
            'title' => 'Name',
            'body' => array('Column' => 'Body', 'Filter' => array($this, 'BodyFilter')),
            'author_id' => 'InsertUserID',
            'created_at' => 'DateInserted',
            'update_at' =>  'DataUpdated',
            'section_id' => 'CategoryID',
            'promoted' => 'Announce'
        );

        $ex->exportTable(
            'Discussion',
            "select a.*, 'Html' as Format,
            if (comments_disabled = 1 or outdated=1, 1, 0) as Closed
             from zendesk_articles a",
            $discussion_Map
        );

        // Comments
        // Articles => Discussions
        $comment_Map = array(
            'id' => 'CommentID',
            'source_id' => 'DiscussionID',
            'body' => 'Body',
            'author_id' => 'InsertUserID',
            'created_at' => 'DateInserted',
            'update_at' =>  'DataUpdated',
            'Format' => 'Format'
        );

        $ex->exportTable(
            'Comment',
            "select ac.*, 'Markdown' as Format from zendesk_article_comments ac",
            $comment_Map
        );

        // User Roles

        // Roles
        $role_Map = array(
            'groupID' => 'RoleID',
            'name' => 'Name',
            'description' => 'Description'
        );

        $sql = "
        select 2 as groupID , 'Guest' as name, 'Guests can only view content. Anyone browsing the site who is not signed in is considered to be a \"Guest\".' as description

        union all
        select 3, 'Unconfirmed', 'Users must confirm their emails before becoming full members. They get assigned to this role.'

        union all
        select 8, 'Member', 'Members can participate in discussions.'

        union all
        select 4, 'Applicant', 'Users who have applied for membership, but have not yet been accepted. They have the same permissions as guests.'

        union all
        select 16, 'Administrator', 'Administrators have permission to do anything.'

        union all
        select 32, 'Moderator', 'Moderators have permission to edit most content.'

        ";

        $ex->exportTable(
            'Role',
            $sql,
            $role_Map
        );

        // agents as moderators
        $userRole_Map = array(
            'id' => 'UserID',
        );

        $ex->exportTable(
            'UserRole',
            "select u.id,
            case
             when role = 'admin'
              then 16
             when role = 'agent'
              then 32
             else
                8
            end as RoleID
            from zendesk_users u;
            ",
            $userRole_Map
        );

        // Categories as Root Categories
        // Sections as 2nd Level

        $category_Map = array(
            'id' => 'CategoryID',
            'name' => 'Name',
            'description' => 'Description',
            'position' => 'Sort',
            'created_at' => 'DateInserted',
            'updated_at' => 'DateUpdated',
        );
        $ex->exportTable(
            'Category',
            "select
                    id, name, description, position, created_at, updated_at, 0 as ParentCategoryID, outdated as Archived
                from zendesk_categories c
                union
                select
                    id, name, description, position, created_at, updated_at, category_id, outdated as Archived
                from zendesk_sections;

            ",
            $category_Map
        );

        // End
        $ex->endExport();

    }

    public function bodyFilter($body) {

        if (!$this->param('attachurl', false) || !$this->param('attachpath', false) || !$this->param('attachcdn', false)) {
            return $body;
        }

        $dom = pQuery::parseStr($body);
        foreach ($dom->query('img') as $img) {
            $newSrc = false;
            $src = $img->attr('src');
            $p = parse_url($src);

            if (empty($p['host']) && empty($p['schema'])) {
                // local image. relative link
                $newSrc = $this->downloadFile($src);
            } elseif($this->param('attachurl', false) && $p['host'] == $this->param('attachurl')) {
                // Local image. // absoule link
                $newSrc = $this->downloadFile($src);
            }

            if ($newSrc) {
                $img->attr('src', $newSrc);
            }


        }
        return $dom->html();
    }

    public function downloadFile($src) {

        $pathToDownloadImages = $this->param('attachpath');
        $p = parse_url($src);

        if (empty($p['host']) && empty($p['schema'])) {
            // local image. relative link
            $downloadUrl = 'http://' . $this->param('attachurl') . $src;
        } elseif($this->param('attachurl', false) && $p['host'] == $this->param('attachurl')) {
            // Local image. // absolute link
            $downloadUrl = $src;
        }
        $fileName = $p['path'];
        $p = parse_url($downloadUrl);

        if (stristr($fileName, '.') === false) {
            if (!empty($p['query'])) {
                parse_str($p['query'], $output);
                if (!empty($output['name'])) {
                    $fileName = $p['path'] . $output['name'];
                } else {
                    // not able to determine filename
                    var_dump('fail: ' . $src);
                    return $src;
                }
            }
        }

        $newSrc = $this->param('attachcdn'. '')
            . ltrim($fileName, '/');

        // Check if already downloaded.
        $newFile = $pathToDownloadImages . $fileName;
        if (!file_exists($newFile)) {
            // mkdir if needed
            $dirName = pathinfo($newFile, PATHINFO_DIRNAME);
            if (!file_exists($dirName)) {
                mkdir($dirName, 0755, true);
            }

            $fp = fopen($newFile, 'w+');
            $ch = curl_init(str_replace(" ", "%20", $downloadUrl));//Here is the file we are downloading, replace spaces with %20
            curl_setopt($ch, CURLOPT_USERPWD, $this->param('apiuser') . ':' . $this->param('apipass'));
            curl_setopt($ch, CURLOPT_TIMEOUT, 50);
            curl_setopt($ch, CURLOPT_FILE, $fp); // write curl response to file
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
            curl_exec($ch); // get curl response
            curl_close($ch);
            fclose($fp);
            // @todo check response code / better error handling.
        }

        return $newSrc;

    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * Community Server exporter tool.
 *
 * @copyright Vanilla Forums Inc. 2010-2015
 * @license GNU GPL2
 * @package VanillaPorter
 */

$supported['communityserver'] = array(
    'name'=> 'Community Server',
    'prefix'=>'cs_'
);

$supported['communityserver']['CommandLine'] = array(
    'group' => array('ID of forum group to export', 'Sx' => '::'),
    'images' => array('Export image assets', 'Sx' => '::')
);

$supported['communityserver']['features'] = array(
    'Avatars' => 1,
    'Categories' => 1,
    'Comments' => 1,
    'Discussions' => 1,
    'PrivateMessages' => 1,
    'Roles' => 1,
    'Users' => 1
);

class CommunityServer extends ExportController {

    public function bodyWash($value, $field, $row) {
        $patterns = array(
            '#<img src="/cs/[^"]+">#i'
        );

        $substitutions = array(
            '' // '#<img src="/cs/[^"]+">#i'
        );

        return preg_replace($patterns, $substitutions, $value);
    }

    /**
     * Main export process.
     *
     * @param ExportModel $ex
     * @see $_Structures in ExportModel for allowed destination tables & columns.
     */
    public function forumExport($ex) {
        // Get the characterset for the comments.
        $characterSet = $ex->getCharacterSet('Posts');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $cdn = $this->param('cdn', '~cf/');

        $groupID = $this->param('group', '1');

        $doImages = $this->param('images', false);

        // Reiterate the platform name here to be included in the porter file header.
        $ex->beginExport('', 'Community Server');


        // Photo
        if ($doImages) {
            // Photo
            $ex->comment('Exporting images...');
            if (!is_dir('communityserver/photo')) {
                mkdir('communityserver/photo', 0755, true);
            }

            $images = $ex->query("SELECT ImageID, Content FROM :_Images", true);
            if (is_resource($images)) {
                while ($currentImage = @mysql_fetch_assoc($images)) {
                    $photoFile = fopen("communityserver/photo/{$currentImage['ImageID']}.jpg", 'w');
                    fwrite($photoFile, hex2bin($currentImage['Content']));
                    fclose($photoFile);
                    unset($photoFile);
                }
            }
        }


        // User
        $user_Map = array();
        $ex->exportTable('User', "
            select cu.UserID, au.UserName as Name, 'reset' as HashMethod, m.Email, m.CreateDate as DateInserted,
                cu.LastActivity as DateLastActive,
	            if(
		            i.ImageID is null,
		            null,
		            concat('$cdn', 'communityserver/photo/',i.ImageID, '.jpg')
	            ) as Photo
            from :_Users cu join aspnet_Users au on cu.MembershipID = au.UserID
	            left join aspnet_Membership m on au.UserID = m.UserID
	            left join :_UserAvatar a on cu.UserID = a.UserID
	            left join :_UserProfile p on cu.UserID = p.UserID
	            left join :_Images i on a.ImageID = i.ImageID", $user_Map);


        // Role
        $ex->query("drop table if exists z_Role");
        $ex->query("
            create table z_Role (
                RoleID int(11) unsigned not null auto_increment,
                Name varchar(100) not null default '',
                Description varchar(500) not null,
                OldID varchar(255) not null default '',
                primary key (RoleID)
            ) engine=InnoDB default charset=utf8");
        $ex->query("
            insert into z_Role (Name, Description, OldID)

            select RoleName as Name, Description, RoleID as OldID
            from aspnet_Roles");

        $role_Map = array();
        $ex->exportTable('Role', "select RoleID, Name, Description from z_Role", $role_Map);

        // User Role
        $userRole_Map = array();
        $ex->exportTable('UserRole', "
            select cu.UserID, r.RoleID
            from :_Users cu join aspnet_Users au on cu.MembershipID = au.UserID
	            join aspnet_UsersInRoles ur on au.UserID = ur.UserID
	            join z_Role r on r.OldID = ur.RoleID", $userRole_Map);


        // Category
        $category_Map = array(
            'HtmlName' => array('Column' => 'Name', 'Filter' => array($this, 'HtmlEntityDecode'))
        );
        $ex->exportTable('Category', "
            select SectionID as CategoryID, ParentID as ParentCategoryID, Name as HtmlName, Description
            from :_Sections
            where GroupID = '$groupID'", $category_Map);


        // Discussion
        $ex->query("drop table if exists z_ThreadToDiscussion");
        $ex->query("
            create table z_ThreadToDiscussion (
                ThreadID int(11) unsigned not null,
                DiscussionID int(11) unsigned not null,
                primary key (ThreadID)
            ) engine=InnoDB default charset=utf8");
        $ex->query("
            insert into z_ThreadToDiscussion (ThreadID, DiscussionID)

            select t.ThreadID as ThreadID, p.PostID as DiscussionID
            from :_Threads t
	            left join :_Posts p on (t.ThreadID = p.ThreadID and p.PostLevel = 1)
	            left join :_Sections s on t.SectionID = s.SectionID
            where s.SectionID > 0 and s.GroupID = '$groupID'
            group by t.ThreadID");

        $discussion_Map = array(
            'FormattedBody' => array(
                'Column' => 'Body',
                'Filter' => array($this, 'bodyWash')
            )
        );
        $ex->exportTable('Discussion', "
            select p.PostID as DiscussionID, s.SectionID as CategoryID, t.UserID as InsertUserID,
	            p.PostDate as DateInserted, p.Subject as Name, p.FormattedBody, 'Wysiwyg' as Format,
	            p.IPAddress as InsertIPAddress,
	            if (t.IsLocked = 1, 1, 0) as Closed,
	            if (t.IsSticky = 1, 2, 0) as Announce
            from :_Threads t
	            join :_Posts p on (t.ThreadID = p.ThreadID and p.PostLevel = 1)
	            left join :_Sections s on t.SectionID = s.SectionID
            where s.SectionID > 0 and s.GroupID = '$groupID'", $discussion_Map);


        // Comment
        $comment_Map = array(
            'FormattedBody' => array(
                'Column' => 'Body',
                'Filter' => array($this, 'bodyWash')
            )
        );
        $ex->exportTable('Comment', "
            select DiscussionID, PostID as CommentID, UserID as InsertUserID, FormattedBody, 'Wysiwyg' as Format,
                PostDate as DateInserted, p.IPAddress as InsertIPAddress
            from :_Posts p
                left join :_Sections s using (SectionID)
                left join z_ThreadToDiscussion using (ThreadID)
            where s.SectionID > 0 and p.PostLevel > 1 and s.GroupID = '$groupID'", $comment_Map);


        // Conversation
        $conversation_Map = array();
        $ex->exportTable('Conversation', "
            select ThreadID as ConversationID, UserID as InsertUserID,
	            PostDate as DateInserted, Subject
            from :_Posts p
            where PostLevel = 1 and SectionID = 0", $conversation_Map);


        // ConversationMessage
        $conversationMessage_Map = array(
            'FormattedBody' => array(
                'Column' => 'Body',
                'Filter' => array($this, 'BodyWash')
            )
        );
        $ex->exportTable('ConversationMessage', "
            select PostID as MessageID, ThreadID as ConversationID, FormattedBody, 'Wysiwyg' as Format,
                UserID as InsertUserID, PostDate as DateInserted
            from :_Posts p
            where SectionID = 0", $conversationMessage_Map);


        // UserConversation
        $ex->query("drop table if exists z_UserConversation");
        $ex->query("
            create table z_UserConversation (
                UserID int(11) unsigned not null,
                ConversationID int(11) unsigned not null,
                primary key (UserID,ConversationID)
            ) engine=InnoDB default charset=utf8;");
        $ex->query("
            insert ignore into z_UserConversation (UserId, ConversationID)

            select UserID, ThreadID as ConversationID
            from :_Posts
            where SectionID = 0");

        $userConversation_Map = array();
        $ex->exportTable('UserConversation', "
            select UserID, ConversationID from z_UserConversation", $userConversation_Map);


        $ex->endExport();
    }

    public function htmlEntityDecode($value, $column, $row) {
        return html_entity_decode($value);
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * Vanilla 2 exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['drupal'] = array('name' => 'Drupal 6', 'prefix' => '');
$supported['drupal']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'PrivateMessages' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
);

class Drupal extends ExportController {

    /** @var array Required tables => columns */
    protected $_sourceTables = array();

    /**
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('comment');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Begin
        $ex->beginExport('', 'Drupal');

        // Users
        $user_Map = array(
            'uid' => 'UserID',
            'name' => 'Name',
            'Password' => 'Password',
            'mail' => 'Email',
            'photo' => 'Photo',
            'created' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'login' => array('Column' => 'DateLastActive', 'Filter' => 'timestampToDate')
        );
        $ex->exportTable('User', "
         select u.*,
            nullif(concat('drupal/', u.picture), 'drupal/') as photo,
            concat('md5$$', u.pass) as Password,
            'Django' as HashMethod
         from :_users u
         where uid > 0", $user_Map);

        // Signatures.
        $userMeta_Map = array(
            'uid' => 'UserID',
            'Name' => 'Name',
            'signature' => 'Value'
        );
        $ex->exportTable('UserMeta', "
         select u.*, 'Plugins.Signatures.Sig' as Name
         from :_users u
         where uid > 0", $userMeta_Map);

        // Roles.
        $role_Map = array(
            'rid' => 'RoleID',
            'name' => 'Name'
        );
        $ex->exportTable('Role', "select r.* from :_role r", $role_Map);

        // User Role.
        $userRole_Map = array(
            'uid' => 'UserID',
            'rid' => 'RoleID'
        );
        $ex->exportTable('UserRole', "
         select * from :_users_roles", $userRole_Map);

        // Categories (sigh)
        $category_Map = array(
            'tid' => 'CategoryID',
            'name' => 'Name',
            'description' => 'description',
            'parent' => 'ParentCategoryID'
        );
        $ex->exportTable('Category', "
         select t.*, nullif(h.parent, 0) as parent
         from :_term_data t
         join :_term_hierarchy h
            on t.tid = h.tid", $category_Map);

        // Discussions.
        $discussion_Map = array(
            'nid' => 'DiscussionID',
            'title' => 'Name',
            'body' => 'Body',
            'uid' => 'InsertUserID',
            'created' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'DateUpdated' => array('Column' => 'DateUpdated', 'Filter' => 'timestampToDate'),
            'sticky' => 'Announce',
            'tid' => 'CategoryID'
        );
        $ex->exportTable('Discussion', "
         select n.*, nullif(n.changed, n.created) as DateUpdated, f.tid, r.body
         from nodeforum f
         left join node n
            on f.nid = n.nid
         left join node_revisions r
            on r.nid = n.nid", $discussion_Map);

        // Comments.
        $comment_Map = array(
            'cid' => 'CommentID',
            'uid' => 'InsertUserID',
            'body' => array('Column' => 'Body'),
            'hostname' => 'InsertIPAddress',
            'created' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate')
        );
        $ex->exportTable('Comment', "
         select
            n.created,
            n.uid,
            r.body,
            c.nid as DiscussionID,
            n.title,
            'Html' as Format,
            nullif(n.changed, n.created) as DateUpdated
         from node n
         left join node_comments c
            on c.cid = n.nid
         left join node_revisions r
            on r.nid = n.nid
         where n.type = 'forum_reply'", $comment_Map);

        // Conversations.
        $conversation_Map = array(
            'thread_id' => 'ConversationID',
            'author' => 'InsertUserID',
            'title' => 'Subject',
        );
        $ex->exportTable('Conversation', "
            select
                pmi.thread_id,
                pmm.author,
                pmm.subject as title,
                FROM_UNIXTIME(pmm.timestamp) as DateInserted
            from pm_message as pmm
                inner join pm_index as pmi on pmi.mid = pmm.mid and pmm.author = pmi.uid and pmi.deleted = 0 and pmi.uid > 0
            group by pmi.thread_id
        ;", $conversation_Map);

        // Conversation Messages.
        $conversationMessage_Map = array(
            'mid' => 'MessageID',
            'thread_id' => 'ConversationID',
            'author' => 'InsertUserID'
        );
        $ex->exportTable('ConversationMessage', "
            select
                pmm.mid,
                pmi.thread_id,
                pmm.author,
                FROM_UNIXTIME(pmm.timestamp) as DateInserted,
                pmm.body as Body,
                'Html' as Format
            from pm_message as pmm
                inner join pm_index as pmi on pmi.mid = pmm.mid AND pmi.deleted = 0 and pmi.uid > 0
        ;", $conversationMessage_Map);

        // User Conversation.
        $userConversation_Map = array(
            'uid' => 'UserID',
            'thread_id' => 'ConversationID'
        );
        $ex->exportTable('UserConversation', "
            select
                pmi.uid,
                pmi.thread_id,
                0 as Deleted
            from pm_index as pmi
                inner join pm_message as pmm ON pmm.mid = pmi.mid
            where pmi.deleted = 0
                and pmi.uid > 0
            group by
                pmi.uid,
                pmi.thread_id
        ;", $userConversation_Map);

        // Comments.
        /*$comment_Map = array(
            'cid' => 'CommentID',
            'nid' => 'DiscussionID',
            'uid' => 'InsertUserID',
            'comment' => array('Column' => 'Body'),
            'hostname' => 'InsertIPAddress',
            'timeatamp' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate')
        );
        $ex->ExportTable('Comment', "
           select c.*,
              n.title,
              'Html' as Format
           from comments c
           join node n
              on c.nid = n.nid", $comment_Map);
        */
        // Media.
        /*$Media_Map = array(
            'fid' => 'MediaID',
            'nid' => 'ForeignID',
            'filename' => 'Name',
            'path' => 'Path',
            'filemime' => 'Type',
            'filesize' => 'Size',
            'uid' => 'InsertUserID',
            'created' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate')
        );
        $ex->ExportTable('Media', "
           select f.*,
              nullif(concat('drupal/', f.filepath), 'drupal/') as path,
              n.uid,
              n.created,
              'discussion' as ForeignTable
           from files f
           join node n
              on f.nid = n.nid
           where n.type = 'forum'", $Media_Map);
        */

        $ex->endExport();
    }

    /**
     *
     * @param ExportModel $ex
     * @param string $tableName
     */
    protected function exportTable($ex, $tableName) {
        // Make sure the table exists.
        if (!$ex->exists($tableName)) {
            return;
        }

        $ex->exportTable($tableName, "select * from :_{$tableName}");
    }

}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * esotalk exporter tool.
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['esotalk'] = array('name' => 'esoTalk', 'prefix' => 'et_');
$supported['esotalk']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Bookmarks' => 1,
    'Passwords' => 1,
);

class Esotalk extends ExportController {
    /**
     * Main export process.
     *
     * @param ExportModel $ex
     * @see $_Structures in ExportModel for allowed destination tables & columns.
     */
    public function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('post');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Reiterate the platform name here to be included in the porter file header.
        $ex->beginExport('', 'esotalk');


        // User.
        $user_Map = array(
            'memberId' => 'UserID',
            'username' => 'Name',
            'email' => 'Email',
            'confirmed' => 'Verified',
            'password' => 'Password',
        );
        $ex->exportTable('User', "
         select u.*, 'crypt' as HashMethod,
            FROM_UNIXTIME(joinTime) as DateInserted,
            FROM_UNIXTIME(lastActionTime) as DateLastActive,
            if(account='suspended',1,0) as Banned
         from :_member u", $user_Map);


        // Role.
        $role_Map = array(
            'groupId' => 'RoleID',
            'name' => 'Name',
        );
        $ex->exportTable('Role', "
         select groupId, name
         from :_group
         union select max(groupId)+1, 'Member' from :_group
         union select max(groupId)+2, 'Administrator' from :_group
         ", $role_Map);


        // User Role.
        $userRole_Map = array(
            'memberId' => 'UserID',
            'groupId' => 'RoleID',
        );
        // Create fake 'member' and 'administrator' roles to account for them being set separately on member table.
        $ex->exportTable('UserRole', "
         select u.memberId, u.groupId
         from :_member_group u
         union all
         select memberId, (select max(groupId)+1 from :_group) from :_member where account='member'
         union all
         select memberId, (select max(groupId)+2 from :_group) from :_member where account='administrator'
         ", $userRole_Map);


        // Category.
        $category_Map = array(
            'channelId' => 'CategoryID',
            'title' => 'Name',
            'slug' => 'UrlCode',
            'description' => 'Description',
            'parentId' => 'ParentCategoryID',
            'countConversations' => 'CountDiscussions',
            //'countPosts' => 'CountComments',
        );
        $ex->exportTable('Category', "
         select *
         from :_channel c", $category_Map);


        // Discussion.
        $discussion_Map = array(
            'conversationId' => 'DiscussionID',
            'title' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'channelId' => 'CategoryID',
            'memberId' => 'InsertUserID',
            'sticky' => 'Announce',
            'locked' => 'Closed',
            //'countPosts' => 'CountComments',
            'lastPostMemberId' => 'LastCommentUserID',
            'content' => 'Body',
        );
        // The body of the OP is in the post table.
        $ex->exportTable('Discussion', "
			select
				c.conversationId,
				c.title,
				c.channelId,
				p.memberId,
				c.sticky,
				c.locked,
				c.lastPostMemberId,
				p.content,
				'BBCode' as Format,
				from_unixtime(startTime) as DateInserted,
				from_unixtime(lastPostTime) as DateLastComment
			from :_conversation c
			left join :_post p
				on p.conversationId = c.conversationId
			where private = 0
			group by c.conversationId
			group by p.time", $discussion_Map);


        // Comment.
        $comment_Map = array(
            'postId' => 'CommentID',
            'conversationId' => 'DiscussionID',
            'content' => 'Body',
            'memberId' => 'InsertUserID',
            'editMemberId' => 'UpdateUserID',
        );
        // Now we need to omit the comments we used as the OP.
        $ex->exportTable('Comment', "
		select p.*,
				'BBCode' as Format,
				from_unixtime(time) as DateInserted,
				from_unixtime(editTime) as DateUpdated
		from :_post p
		inner join :_conversation c ON c.conversationId = p.conversationId
		and c.private = 0
		join
			( select conversationId,
				min(postId) as m
			from :_post
			group by conversationId) r on r.conversationId = c.conversationId
		where p.postId<>r.m", $comment_Map);


        // UserDiscussion.
        $userDiscussion_Map = array(
            'id' => 'UserID',
            'conversationId' => 'DiscussionID',
        );
        $ex->exportTable('UserDiscussion', "
         select *
         from :_member_conversation
         where starred = 1", $userDiscussion_Map);


        // Permission.
        // :_channel_group


        // Media.
        // :_attachment


        // Conversation.
        $conversation_map = array(
            'conversationId' => 'ConversationID',
            'countPosts' => 'CountMessages',
            'startMemberId' => 'InsertUserID',
            'countPosts' => 'CountMessages',
        );

        $ex->exportTable('Conversation', "
                select p.*,
                'BBCode' as Format,
                from_unixtime(time) as DateInserted,
                from_unixtime(lastposttime) as DateUpdated
        from :_post p
        inner join :_conversation c on c.conversationId = p.conversationId
        and c.private = 1", $conversation_map);

        $userConversation_map = array(
            'conversationId' => 'ConversationID',
            'memberId' => 'UserID',

        );

        $ex->exportTable('UserConversation', "
        select distinct a.fromMemberId as memberId, a.type, c.private, c.conversationId from :_activity a
        inner join :_conversation c on c.conversationId = a.conversationId
        and c.private = 1 and a.type = 'privateAdd'
        union all
        select distinct a.memberId as memberId, a.type, c.private, c.conversationId from :_activity a
        inner join :_conversation c on c.conversationId = a.conversationId
        and c.private = 1 and a.type = 'privateAdd'", $userConversation_map);

        $userConversationMessage_map = array(
            'postId' => 'MessageID',
            'conversationId' => 'ConversationID',
            'content' => 'Body',
            'memberId' => 'InsertUserID',

        );

        $ex->exportTable('ConversationMessage', "
                select p.*,
                'BBCode' as Format,
                from_unixtime(time) as DateInserted
        from :_post p
        inner join :_conversation c on c.conversationId = p.conversationId and c.private = 1", $userConversationMessage_map);

        $ex->endExport();
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * Expression Engine exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['expressionengine'] = array('name' => 'Expression Engine Discussion Forum', 'prefix' => 'forum_');
$supported['expressionengine']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Bookmarks' => 1,
    'Passwords' => 1,
    'Signatures' => 1,
    'Permissions' => 1,
    'Attachments' => 1,
);

class ExpressionEngine extends ExportController {
    /**
     *
     * @param ExportModel $ex
     */
    public function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('topics');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->beginExport('', 'Expression Engine');
        $ex->sourcePrefix = 'forum_';

        $this->exportConversations();


        // Permissions.
        $permission_Map = array(
            'group_id' => 'RoleID',
            'can_access_cp' => 'Garden.Settings.View',
            'can_access_edit' => 'Vanilla.Discussions.Edit',
            'can_edit_all_comments' => 'Vanilla.Comments.Edit',
            'can_access_admin' => 'Garden.Settings.Manage',
            'can_admin_members' => 'Garden.Users.Edit',
            'can_moderate_comments' => 'Garden.Moderation.Manage',
            'can_view_profiles' => 'Garden.Profiles.View',
            'can_post_comments' => 'Vanilla.Comments.Add',
            'can_view_online_system' => 'Vanilla.Discussions.View',
            'can_sign_in' => 'Garden.SignIn.Allow',
            'can_view_profiles3' => 'Garden.Activity.View',
            'can_post_comments2' => 'Vanilla.Discussions.Add'
        );
        $permission_Map = $ex->fixPermissionColumns($permission_Map);
        foreach ($permission_Map as $column => &$info) {
            if (is_array($info) && isset($info['Column'])) {
                $info['Filter'] = array($this, 'YNBool');
            }
        }

        $ex->exportTable('Permission', "
         SELECT
            g.can_view_profiles AS can_view_profiles2,
            g.can_view_profiles AS can_view_profiles3,
            g.can_post_comments AS can_post_comments2,
            g.can_post_comments AS can_sign_in,
            CASE WHEN can_access_admin = 'y' THEN 'all' WHEN can_view_online_system = 'y' THEN 'view' END AS _Permissions,
            g.*
         FROM forum_member_groups g
      ", $permission_Map);


        // User.
        $user_Map = array(
            'member_id' => 'UserID',
            'username' => array('Column' => 'Username', 'Type' => 'varchar(50)'),
            'screen_name' => array('Column' => 'Name', 'Filter' => array($ex, 'HTMLDecoder')),
            'Password2' => 'Password',
            'email' => 'Email',
            'ipaddress' => 'InsertIPAddress',
            'join_date' => array('Column' => 'DateInserted', 'Filter' => array($ex, 'timestampToDate')),
            'last_activity' => array('Column' => 'DateLastActive', 'Filter' => array($ex, 'timestampToDate')),
            'timezone' => 'HourOffset',
            'location' => 'Location'
        );
        $ex->exportTable('User', "
         SELECT
            'django' AS HashMethod,
            concat('sha1$$', password) AS Password2,
            CASE WHEN bday_y > 1900 THEN concat(bday_y, '-', bday_m, '-', bday_d) ELSE NULL END AS DateOfBirth,
            from_unixtime(join_date) AS DateFirstVisit,
            ip_address AS LastIPAddress,
            CASE WHEN avatar_filename = '' THEN NULL ELSE concat('imported/', avatar_filename) END AS Photo,
            u.*
         FROM forum_members u", $user_Map);


        // Role.
        $role_Map = array(
            'group_id' => 'RoleID',
            'group_title' => 'Name',
            'group_description' => 'Description'
        );
        $ex->exportTable('Role', "
         SELECT *
         FROM forum_member_groups", $role_Map);


        // User Role.
        $userRole_Map = array(
            'member_id' => 'UserID',
            'group_id' => 'RoleID'
        );
        $ex->exportTable('UserRole', "
         SELECT *
         FROM forum_members u", $userRole_Map);


        // UserMeta
        $ex->exportTable('UserMeta', "
         SELECT
            member_id AS UserID,
            'Plugin.Signatures.Sig' AS Name,
            signature AS Value
         FROM forum_members
         WHERE signature <> ''");


        // Category.
        $category_Map = array(
            'forum_id' => 'CategoryID',
            'forum_name' => 'Name',
            'forum_description' => 'Description',
            'forum_parent' => 'ParentCategoryID',
            'forum_order' => 'Sort'
        );
        $ex->exportTable('Category', "
         SELECT * FROM forum_forums", $category_Map);


        // Discussion.
        $discussion_Map = array(
            'topic_id' => 'DiscussionID',
            'forum_id' => 'CategoryID',
            'author_id' => 'InsertUserID',
            'title' => array('Column' => 'Name', 'Filter' => array($ex, 'HTMLDecoder')),
            'ip_address' => 'InsertIPAddress',
            'body' => array('Column' => 'Body', 'Filter' => array($this, 'cleanBodyBrackets')),
            'body2' => array('Column' => 'Format', 'Filter' => array($this, 'guessFormat')),
            'topic_date' => array('Column' => 'DateInserted', 'Filter' => array($ex, 'timestampToDate')),
            'topic_edit_date' => array('Column' => 'DateUpdated', 'Filter' => array($ex, 'timestampToDate')),
            'topic_edit_author' => 'UpdateUserID'
        );
        $ex->exportTable('Discussion', "
          SELECT
             CASE WHEN announcement = 'y' THEN 1 WHEN sticky = 'y' THEN 2 ELSE 0 END AS Announce,
             CASE WHEN status = 'c' THEN 1 ELSE 0 END AS Closed,
             t.body AS body2,
             t.*
          FROM forum_forum_topics t", $discussion_Map);


        // Comment.
        $comment_Map = array(
            'post_id' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'author_id' => 'InsertUserID',
            'ip_address' => 'InsertIPAddress',
            'body' => array('Column' => 'Body', 'Filter' => array($this, 'cleanBodyBrackets')),
            'body2' => array('Column' => 'Format', 'Filter' => array($this, 'guessFormat')),
            'post_date' => array('Column' => 'DateInserted', 'Filter' => array($ex, 'timestampToDate')),
            'post_edit_date' => array('Column' => 'DateUpdated', 'Filter' => array($ex, 'timestampToDate')),
            'post_edit_author' => 'UpdateUserID'
        );
        $ex->exportTable('Comment', "
      SELECT
         'Html' AS Format,
         p.body AS body2,
         p.*
      FROM forum_forum_posts p", $comment_Map);


        // Media.
        $media_Map = array(
            'filename' => 'Name',
            'extension' => array('Column' => 'Type', 'Filter' => 'mimeTypeFromExtension'),
            'thumb_path' => array('Column' => 'ThumbPath', 'Filter' => array($this, 'filterThumbnailData')),
            'thumb_width' => array('Column' => 'ThumbWidth', 'Filter' => array($this, 'filterThumbnailData')),
            'filesize' => 'Size',
            'member_id' => 'InsertUserID',
            'attachment_date' => array('Column' => 'DateInserted', 'Filter' => array($ex, 'timestampToDate')),
            'filehash' => array('Column' => 'FileHash', 'Type' => 'varchar(100)')
        );
        $ex->exportTable('Media', "
         SELECT
            concat('imported/', filename) AS Path,
            concat('imported/', filename) as thumb_path,
            128 as thumb_width,
            CASE WHEN post_id > 0 THEN post_id ELSE topic_id END AS ForeignID,
            CASE WHEN post_id > 0 THEN 'comment' ELSE 'discussion' END AS ForeignTable,
            a.*
         FROM forum_forum_attachments a", $media_Map);

        $ex->endExport();
    }

    /**
     * Private message conversion.
     */
    public function exportConversations() {
        $ex = $this->ex;

        $this->_exportConversationTemps();

        // Conversation.
        $conversation_Map = array(
            'message_id' => 'ConversationID',
            'title2' => array('Column' => 'Subject', 'Type' => 'varchar(255)'),
            'sender_id' => 'InsertUserID',
            'message_date' => array('Column' => 'DateInserted', 'Filter' => array($ex, 'timestampToDate')),
        );
        $ex->exportTable('Conversation', "
         SELECT
         pm.*,
         g.title AS title2
       FROM forum_message_data pm
       JOIN z_pmgroup g
         ON g.group_id = pm.message_id;", $conversation_Map);

        // User Conversation.
        $userConversation_Map = array(
            'group_id' => 'ConversationID',
            'userid' => 'UserID'
        );
        $ex->exportTable('UserConversation', "
         SELECT
         g.group_id,
         t.userid
       FROM z_pmto t
       JOIN z_pmgroup g
         ON g.group_id = t.message_id;", $userConversation_Map);

        // Conversation Message.
        $message_Map = array(
            'group_id' => 'ConversationID',
            'message_id' => 'MessageID',
            'message_body' => 'Body',
            'message_date' => array('Column' => 'DateInserted', 'Filter' => array($ex, 'timestampToDate')),
            'sender_id' => 'InsertUserID'
        );
        $ex->exportTable('ConversationMessage', "
         SELECT
            pm.*,
            pm2.group_id,
            'BBCode' AS Format
          FROM forum_message_data pm
          JOIN z_pmtext pm2
            ON pm.message_id = pm2.message_id", $message_Map);
    }

    /**
     * Create temporary tables for private message conversion.
     */
    public function _exportConversationTemps() {
        $ex = $this->ex;

        $ex->query('DROP TABLE IF EXISTS z_pmto;');
        $ex->query('CREATE TABLE z_pmto (
            message_id INT UNSIGNED,
            userid INT UNSIGNED,
            deleted TINYINT(1),
            PRIMARY KEY(message_id, userid)
            );');

        $ex->query("insert ignore z_pmto (
                message_id,
                userid,
                deleted
            )
            select
                message_id,
                recipient_id,
                case when message_deleted = 'y' then 1 else 0 end as `deleted`
            from forum_message_copies;");

        $ex->query("UPDATE forum_message_data
            SET message_recipients = replace(message_recipients, '|', ',');");

        $ex->query("UPDATE forum_message_data
            SET message_cc = replace(message_cc, '|', ',');");

        $ex->query('insert ignore z_pmto (
            message_id,
            userid
          )
          select
            message_id,
            sender_id
          from forum_message_data;');

        $ex->query("insert ignore z_pmto (
                message_id,
                userid
            )
            select
                message_id,
                u.member_id
            from forum_message_data m
            join forum_members u
                on  FIND_IN_SET(u.member_id, m.message_cc) > 0
            where m.message_cc <> '';");

        $ex->query("insert ignore z_pmto (
                message_id,
                userid
            )
            select
                message_id,
                u.member_id
            from forum_message_data m
            join forum_members u
                on  FIND_IN_SET(u.member_id, m.message_cc) > 0
            where m.message_cc <> '';");

        $ex->query("DROP TABLE IF EXISTS z_pmto2;");

        $ex->query("CREATE TABLE z_pmto2 (
            message_id INT UNSIGNED,
            userids VARCHAR(250),
            PRIMARY KEY (message_id)
            );");

        $ex->query("insert z_pmto2 (
            message_id,
            userids
            )
            select
                message_id,
                group_concat(userid order by userid)
            from z_pmto t
            group by t.message_id;");

        $ex->query("DROP TABLE IF EXISTS z_pmtext;");
        $ex->query("CREATE TABLE z_pmtext (
            message_id INT UNSIGNED,
            title VARCHAR(250),
            title2 VARCHAR(250),
            userids VARCHAR(250),
            group_id INT UNSIGNED
            );");

        $ex->query("insert z_pmtext (
            message_id,
            title,
            title2
            )
            select
                message_id,
                message_subject,
                case when message_subject like 'Re: %' then trim(substring(message_subject, 4)) else message_subject end as title2
            from forum_message_data;");

        $ex->query("CREATE INDEX z_idx_pmtext ON z_pmtext (message_id);");

        $ex->query("UPDATE z_pmtext pm
            JOIN z_pmto2 t
                ON pm.message_id = t.message_id
            SET pm.userids = t.userids;");

        $ex->query("DROP TABLE IF EXISTS z_pmgroup;");
        $ex->query("CREATE TABLE z_pmgroup (
            group_id INT UNSIGNED,
            title VARCHAR(250),
            userids VARCHAR(250)
            );");

        $ex->query("insert z_pmgroup (
            group_id,
            title,
            userids
            )
            select
                min(pm.message_id),
                pm.title2,
                t2.userids
            from z_pmtext pm
            join z_pmto2 t2
                on pm.message_id = t2.message_id
            group by pm.title2, t2.userids;");

        $ex->query("CREATE INDEX z_idx_pmgroup ON z_pmgroup (title, userids);");
        $ex->query("CREATE INDEX z_idx_pmgroup2 ON z_pmgroup (group_id);");

        $ex->query("UPDATE z_pmtext pm
            JOIN z_pmgroup g
                ON pm.title2 = g.title AND pm.userids = g.userids
            SET pm.group_id = g.group_id;");
    }

    /**
     * Filter used by $Media_Map to replace value for ThumbPath and ThumbWidth when the file is not an image.
     *
     * @access public
     * @see ExportModel::_exportTable
     *
     * @param string $value Current value
     * @param string $field Current field
     * @param array $row Contents of the current record.
     * @return string|null Return the supplied value if the record's file is an image. Return null otherwise
     */
    public function filterThumbnailData($value, $field, $row) {
        if (strpos(mimeTypeFromExtension(strtolower($row['extension'])), 'image/') === 0) {
            return $value;
        } else {
            return null;
        }
    }

}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * Get Satisfaction export tool.
 *
 * @copyright Vanilla Forums Inc. 2010-2015
 * @license GNU GPL2
 * @package VanillaPorter
 * @see functions.commandline.php for command line usage.
 */

$supported['getsatisfaction'] = array('name'=> 'Get Satisfaction', 'prefix'=>'GDN_');
$supported['getsatisfaction']['CommandLine'] = array();
$supported['truncated']['features'] = array(
    'Categories' => 1,
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1
);

class GetSatisfaction extends ExportController {

    /**
     * Perform the migration from Get Satisfaction to Vanilla.
     *
     * @param ExportModel $ex Instance of ExportModel to use.
     */
    public function forumExport($ex) {
        $characterSet = $ex->getCharacterSet('Replies');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->beginExport('', 'Get Satisfaction');

        // User
        $user_Map = array();
        $ex->exportTable('User', "
            select user_id as UserID, nick as Name, email as Email, u_created as DateInserted, u_updated as DateUpdated,
                'Reset' as HashMethod
            from :_Users
            ", $user_Map);

        // Category
        $category_Map = array();
        $ex->exportTable('Category', "
            select category_id as CategoryID, -1 as ParentCategoryID, category_name as Name,
                category_description as Description, category_slug as UrlCode
            from :_Categories
            ", $category_Map);

        // Discussion
        $discussion_map = array();
        $ex->exportTable('Discussion', "
            select t.id as DiscussionID, ct.category_id as CategoryID, t.subject as Name, t.additional_detail as Body,
                t.UserId as InsertUserID, t.created_at as DateInserted
            from :_Topics t
                left join :_CategoriesTopics ct on t.id = ct.topic_id
            where t.removed = 0
            ", $discussion_map);

        // Comment
        $comment_Map = array();
        $ex->exportTable('Comment', "
            select id as CommentID, topic_id as DiscussionID, content as Body, created_at as DateInserted,
                UserId as InsertUserID
            from Replies
            ", $comment_Map);

        $ex->endExport();
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * Invision Powerboard exporter tool.
 *
 * To export avatars, provide ?avatars=1&avatarpath=/path/to/avatars
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['ipb'] = array('name' => 'IP.Board 3', 'prefix' => 'ibf_'); // IPB
$supported['ipb']['CommandLine'] = array(
    'avatarpath' => array('Full path of source avatars to process.', 'Sx' => ':', 'Field' => 'avatarpath'),
    'source' => array(
        'Source user table: profile_portal (default) or member_extra.',
        'Sx' => ':',
        'Field' => 'sourcetable'
    ),
);
$supported['ipb']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Attachments' => 1,
    'PrivateMessages' => 1,
    'Permissions' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
    'Tags' => 1
);

class IPB extends ExportController {
    /**
     * Export avatars into vanilla-compatibles names
     */
    public function doAvatars() {
        // Source table
        $sourceTable = $this->param('source', 'profile_portal');

        // Check source folder
        $sourceFolder = $this->param('avatarpath');
        if (!is_dir($sourceFolder)) {
            trigger_error("Source avatar folder '{$sourceFolder}' does not exist.");
        }

        // Set up a target folder
        $targetFolder = combinePaths(array($sourceFolder, 'ipb'));
        if (!is_dir($sourceFolder)) {
            @$made = mkdir($targetFolder, 0777, true);
            if (!$made) {
                trigger_error("Target avatar folder '{$targetFolder}' could not be created.");
            }
        }

        switch ($sourceTable) {
            case 'profile_portal':

                $userList = $this->ex->query("select
                  pp_member_id as member_id,
                  pp_main_photo as main_photo,
                  pp_thumb_photo as thumb_photo,
                  coalesce(pp_main_photo,pp_thumb_photo,0) as photo
               from :_profile_portal
               where length(coalesce(pp_main_photo,pp_thumb_photo,0)) > 3
               order by pp_member_id asc");

                break;

            case 'member_extra':

                $userList = $this->ex->query("select
                  id as member_id,
                  avatar_location as photo
               from :_member_extra
               where
                  length(avatar_location) > 3 and
                  avatar_location <> 'noavatar'
               order by id asc");

                break;
        }

        $processed = 0;
        $skipped = 0;
        $completed = 0;
        $errors = array();
        while (($row = mysql_fetch_assoc($userList)) !== false) {
            $processed++;
            $error = false;

            $userID = $row['member_id'];

            // Determine target paths and name
            $photo = trim($row['photo']);
            $photo = preg_replace('`^upload:`', '', $photo);
            if (preg_match('`^https?:`i', $photo)) {
                $skipped++;
                continue;
            }

            $photoFileName = basename($photo);
            $photoPath = dirname($photo);
            $photoFolder = combinePaths(array($targetFolder, $photoPath));
            @mkdir($photoFolder, 0777, true);

            $photoSrc = combinePaths(array($sourceFolder, $photo));
            if (!file_exists($photoSrc)) {
                $errors[] = "Missing file: {$photoSrc}";
                continue;
            }

            $mainPhoto = trim(getValue('main_photo', $row, null));
            $thumbPhoto = trim(getValue('thumb_photo', $row, null));

            // Main Photo
            if (!$mainPhoto) {
                $mainPhoto = $photo;
            }
            $mainSrc = combinePaths(array($sourceFolder, $mainPhoto));
            $mainDest = combinePaths(array($photoFolder, "p" . $photoFileName));
            $copied = @copy($mainSrc, $mainDest);
            if (!$copied) {
                $error |= true;
                $errors[] = "! failed to copy main photo '{$mainSrc}' for user {$userID} (-> {$mainDest}).";
            }

            // Thumb Photo
            if (!$thumbPhoto) {
                $thumbPhoto = $photo;
            }
            $thumbSrc = combinePaths(array($sourceFolder, $mainPhoto));
            $thumbDest = combinePaths(array($photoFolder, "n" . $photoFileName));
            $copied = @copy($thumbSrc, $thumbDest);
            if (!$copied) {
                $error |= true;
                $errors[] = "! failed to copy thumbnail '{$thumbSrc}' for user {$userID} (-> {$thumbDest}).";
            }

            if (!$error) {
                $completed++;
            }

            if (!($processed % 100)) {
                echo " - processed {$processed}\n";
            }
        }

        $nErrors = sizeof($errors);
        if ($nErrors) {
            echo "{$nErrors} errors:\n";
            foreach ($errors as $error) {
                echo "{$error}\n";
            }
        }

        echo "Completed: {$completed}\n";
        echo "Skipped: {$skipped}\n";
    }

    /**
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {
//      $ex->TestMode = FALSE;
//      $ex->TestLimit = FALSE;
//      $ex->Destination = 'database';
//      $ex->DestDb = 'unknownworlds';
//      $ex->CaptureOnly = TRUE;
//      $ex->ScriptCreateTable = FALSE;
//      $ex->DestPrefix = 'GDN_';

        $ex->sourcePrefix = ':_';

        $characterSet = $ex->getCharacterSet('posts');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Decode all of the necessary fields.
//      $ex->HTMLDecoderDb('members', 'members_display_name', 'member_id');
//      $ex->HTMLDecoderDb('members', 'name', 'member_id');
//      $ex->HTMLDecoderDb('members', 'title', 'member_id');
//      $ex->HtmlDecoderDb('groups', 'g_title', 'g_id');
//      $ex->HtmlDecoderDb('topics', 'title', 'tid');
//      $ex->HtmlDecoderDb('topics', 'description', 'tid');

        // Begin
        $ex->beginExport('', 'IPB 3.*', array('HashMethod' => 'ipb'));

        // Export avatars
        if ($this->param('avatars')) {
            $this->doAvatars();
        }

        if ($ex->exists('members', 'member_id') === true) {
            $memberID = 'member_id';
        } else {
            $memberID = 'id';
        }

        // Users.
        $user_Map = array(
            $memberID => 'UserID',
            'members_display_name' => array('Column' => 'Name', 'Filter' => 'HtmlDecoder'),
            'email' => 'Email',
            'joined' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'firstvisit' => array(
                'Column' => 'DateFirstVisit',
                'SourceColumn' => 'joined',
                'Filter' => 'timestampToDate'
            ),
            'ip_address' => 'InsertIPAddress',
            'title' => 'Title',
            'time_offset' => 'HourOffset',
            'last_activity' => array('Column' => 'DateLastActive', 'Filter' => 'timestampToDate'),
            'member_banned' => 'Banned',
            'Photo' => 'Photo',
            'title' => 'Title',
            'location' => 'Location'
        );

        $from = '';
        $select = '';

        if ($ex->exists('members', 'members_pass_hash') === true) {
            $select = ",concat(m.members_pass_hash, '$', m.members_pass_salt) as Password";
        } else {
            $select = ",concat(mc.converge_pass_hash, '$', mc.converge_pass_salt) as Password";
            $from = "left join :_members_converge mc
            on m.$memberID = mc.converge_id";
        }

        if ($ex->exists('members', 'hide_email') === true) {
            $showEmail = '!hide_email';
        } else {
            $showEmail = '0';
        }

        $cdn = $this->cdnPrefix();

        if ($ex->exists('member_extra') === true) {
            $sql = "select
                  m.*,
                  m.joined as firstvisit,
                  'ipb' as HashMethod,
                  $showEmail as ShowEmail,
                  case when x.avatar_location in ('noavatar', '') then null
                     when x.avatar_location like 'upload:%' then concat('{$cdn}ipb/', right(x.avatar_location, length(x.avatar_location) - 7))
                     when x.avatar_type = 'upload' then concat('{$cdn}ipb/', x.avatar_location)
                     when x.avatar_type = 'url' then x.avatar_location
                     when x.avatar_type = 'local' then concat('{$cdn}style_avatars/', x.avatar_location)
                     else null
                  end as Photo,
                  x.location
                  $select
                 from :_members m
                 left join :_member_extra x
                  on m.$memberID = x.id
                 $from";
        } else {
            $sql = "select
                  m.*,
                  joined as firstvisit,
                  'ipb' as HashMethod,
                  $showEmail as ShowEmail,
                  case when length(p.pp_main_photo) <= 3 or p.pp_main_photo is null then null
                     when p.pp_main_photo like '%//%' then p.pp_main_photo
                     else concat('{$cdn}ipb/', p.pp_main_photo)
                  end as Photo
                 $select
                 from :_members m
                 left join :_profile_portal p
                    on m.$memberID = p.pp_member_id
                 $from";
        }
        $this->clearFilters('members', $user_Map, $sql, 'm');
        $ex->exportTable('User', $sql, $user_Map);  // ":_" will be replaced by database prefix

        // Roles.
        $role_Map = array(
            'g_id' => 'RoleID',
            'g_title' => 'Name'
        );
        $ex->exportTable('Role', "select * from :_groups", $role_Map);

        // Permissions.
        $permission_Map = array(
            'g_id' => 'RoleID',
            'g_view_board' => 'Garden.SignIn.Allow',
            'g_view_board2' => 'Garden.Profiles.View',
            'g_view_board3' => 'Garden.Activity.View',
            'g_view_board4' => 'Vanilla.Discussions.View',
            'g_edit_profile' => 'Garden.Profiles.Edit',
            'g_post_new_topics' => 'Vanilla.Discussions.Add',
            'g_reply_other_topics' => 'Vanilla.Comments.Add',
//          'g_edit_posts' => 'Vanilla.Comments.Edit', // alias
            'g_open_close_posts' => 'Vanilla.Discussions.Close',
            'g_is_supmod' => 'Garden.Moderation.Manage',
            'g_access_cp' => 'Garden.Settings.View',
//          'g_edit_topic' => 'Vanilla.Discussions.Edit'
        );
        $permission_Map = $ex->fixPermissionColumns($permission_Map);
        $ex->exportTable('Permission', "
         select r.*,
            r.g_view_board as g_view_board2,
            r.g_view_board as g_view_board3,
            r.g_view_board as g_view_board4
         from :_groups r", $permission_Map);

        // User Role.

        if ($ex->exists('members', 'member_group_id') === true) {
            $groupID = 'member_group_id';
        } else {
            $groupID = 'mgroup';
        }

        $userRole_Map = array(
            $memberID => 'UserID',
            $groupID => 'RoleID'
        );

        $sql = "
         select
            m.$memberID, m.$groupID
         from :_members m";

        if ($ex->exists('members', 'mgroup_others')) {
            $sql .= "
            union all

            select m.$memberID, g.g_id
            from :_members m
            join :_groups g
               on find_in_set(g.g_id, m.mgroup_others)";

        }

        $ex->exportTable('UserRole', $sql, $userRole_Map);

        // UserMeta.
        $userMeta_Map = array(
            'UserID' => 'UserID',
            'Name' => 'Name',
            'Value' => 'Value'
        );

        if ($ex->exists('profile_portal', 'signature') === true) {
            $sql = "
         select
            pp_member_id as UserID,
            'Plugin.Signatures.Sig' as Name,
            signature as Value
         from :_profile_portal
         where length(signature) > 1

         union all

         select
            pp_member_id as UserID,
            'Plugin.Signatures.Format' as Name,
            'IPB' as Value
         from :_profile_portal
         where length(signature) > 1
               ";
        } elseif ($ex->exists('member_extra', array('id', 'signature')) === true) {
            $sql = "
         select
            id as UserID,
            'Plugin.Signatures.Sig' as Name,
            signature as Value
         from :_member_extra
         where length(signature) > 1

         union all

         select
            id as UserID,
            'Plugin.Signatures.Format' as Name,
            'IPB' as Value
         from :_member_extra
         where length(signature) > 1";
        } else {
            $sql = false;
        }
        if ($sql) {
            $ex->exportTable('UserMeta', $sql, $userMeta_Map);
        }

        // Category.
        $category_Map = array(
            'id' => 'CategoryID',
            'name' => array('Column' => 'Name', 'Filter' => 'HtmlDecoder'),
            'name_seo' => 'UrlCode',
            'description' => 'Description',
            'parent_id' => 'ParentCategoryID',
            'position' => 'Sort'
        );
        $ex->exportTable('Category', "select * from :_forums", $category_Map);

        // Discussion.
        $descriptionSQL = 'p.post';
        $hasTopicDescription = ($ex->exists('topics', array('description')) === true);
        if ($hasTopicDescription || $ex->exists('posts', array('description')) === true) {
            $description = ($hasTopicDescription) ? 't.description' : 'p.description';
            $descriptionSQL = "case
            when $description <> '' and p.post is not null then concat('<div class=\"IPBDescription\">', $description, '</div>', p.post)
            when $description <> '' then $description
            else p.post
         end";
        }
        $discussion_Map = array(
            'tid' => 'DiscussionID',
            'title' => 'Name',
            'description' => array('Column' => 'SubName', 'Type' => 'varchar(255)'),
            'forum_id' => 'CategoryID',
            'starter_id' => 'InsertUserID',
            'start_date' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'ip_address' => 'InsertIPAddress',
            'edit_time' => array('Column' => 'DateUpdated', 'Filter' => 'timestampToDate'),
//          'last_post' => array('Column' => 'DateLastPost', 'Filter' => array($ex, 'timestampToDate')),
            'posts' => 'CountComments',
            'views' => 'CountViews',
            'pinned' => 'Announce',
            'post' => 'Body',
            'closed' => 'Closed'
        );
        $sql = "
      select
         t.*,
         $descriptionSQL as post,
         case when t.state = 'closed' then 1 else 0 end as closed,
         'BBCode' as Format,
         p.ip_address,
         p.edit_time
      from :_topics t
      left join :_posts p
         on t.topic_firstpost = p.pid
      where t.tid between {from} and {to}";
        $this->clearFilters('topics', $discussion_Map, $sql, 't');
        $ex->exportTable('Discussion', $sql, $discussion_Map);

        // Tags
        $ex->query("DROP TABLE IF EXISTS `z_tag` ");
        $ex->query("CREATE TABLE `z_tag` (
         `TagID` int(11) unsigned NOT NULL AUTO_INCREMENT,
         `FullName` varchar(50) DEFAULT NULL,
         PRIMARY KEY (`TagID`),
         UNIQUE KEY `FullName` (`FullName`)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8;");
        $ex->query("insert into z_tag (FullName) (select distinct t.tag_text as FullName from :_core_tags t)");

        $tagDiscussion_Map = array(
            'tag_added' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
        );
        $sql = "select TagID, '0' as CategoryID, tag_meta_id as DiscussionID, t.tag_added
        from :_core_tags t
        left join z_tag zt on t.tag_text = zt.FullName";
        $ex->exportTable('TagDiscussion', $sql, $tagDiscussion_Map);

        $tag_Map = array(
            'FullName' => 'FullName',
            'FullNameToName' => array('Column' => 'Name', 'Filter' => 'formatUrl')
        );
        $sql = "select TagID, FullName, FullName as FullNameToName
        from z_tag zt";
        $ex->exportTable('Tag', $sql, $tag_Map);

        // Comments.
        $comment_Map = array(
            'pid' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'author_id' => 'InsertUserID',
            'ip_address' => 'InsertIPAddress',
            'post_date' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'edit_time' => array('Column' => 'DateUpdated', 'Filter' => 'timestampToDate'),
            'post' => 'Body'
        );
        $sql = "
      select
         p.*,
         'BBCode' as Format
      from :_posts p
      join :_topics t
         on p.topic_id = t.tid
      where p.pid between {from} and {to}
         and p.pid <> t.topic_firstpost";
        $this->clearFilters('Comment', $comment_Map, $sql, 'p');
        $ex->exportTable('Comment', $sql, $comment_Map);

        // Media.
        $media_Map = array(
            'attach_id' => 'MediaID',
            'atype_mimetype' => 'Type',
            'attach_file' => 'Name',
            'attach_path' => 'Path',
            'attach_date' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'thumb_path' => array('Column' => 'ThumbPath', 'Filter' => array($this, 'filterThumbnailData')),
            'thumb_width' => array('Column' => 'ThumbWidth', 'Filter' => array($this, 'filterThumbnailData')),
            'attach_member_id' => 'InsertUserID',
            'attach_filesize' => 'Size',
            'ForeignID' => 'ForeignID',
            'ForeignTable' => 'ForeignTable',
            'img_width' => 'ImageWidth',
            'img_height' => 'ImageHeight'
        );
        $sql = "select
   a.*,
   concat('~cf/ipb/', a.attach_location) as attach_path,
   concat('~cf/ipb/', a.attach_location) as thumb_path,
   128 as thumb_width,
   ty.atype_mimetype,
   case when p.pid = t.topic_firstpost then 'discussion' else 'comment' end as ForeignTable,
   case when p.pid = t.topic_firstpost then t.tid else p.pid end as ForeignID,
   case a.attach_img_width when 0 then a.attach_thumb_width else a.attach_img_width end as img_width,
   case a.attach_img_height when 0 then a.attach_thumb_height else a.attach_img_height end as img_height
from :_attachments a
join :_posts p
   on a.attach_rel_id = p.pid and a.attach_rel_module = 'post'
join :_topics t
   on t.tid = p.topic_id
left join :_attachments_type ty
   on a.attach_ext = ty.atype_extension";
        $this->clearFilters('Media', $media_Map, $sql);
        $ex->exportTable('Media', $sql, $media_Map);

        if ($ex->exists('message_topic_user_map')) {
            $this->_exportConversationsV3();
        } else {
            $this->_exportConversationsV2();
        }

        $ex->endExport();
    }

    protected function _exportConversationsV2() {
        $ex = $this->ex;

        $sql = <<<EOT
create table tmp_to (
   id int,
   userid int,
   primary key (id, userid)
);

truncate table tmp_to;

insert ignore tmp_to (
   id,
   userid
)
select
   mt_id,
   mt_from_id
from :_message_topics;

insert ignore tmp_to (
   id,
   userid
)
select
   mt_id,
   mt_to_id
from :_message_topics;

create table tmp_to2 (
   id int primary key,
   userids varchar(255)
);
truncate table tmp_to2;

insert tmp_to2 (
   id,
   userids
)
select
   id,
   group_concat(userid order by userid)
from tmp_to
group by id;

create table tmp_conversation (
   id int primary key,
   title varchar(255),
   title2 varchar(255),
   userids varchar(255),
   groupid int
);

replace tmp_conversation (
   id,
   title,
   title2,
   userids
)
select
   mt_id,
   mt_title,
   mt_title,
   t2.userids
from :_message_topics t
join tmp_to2 t2
   on t.mt_id = t2.id;

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 3))
where title2 like 'Re:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 5))
where title2 like 'Sent:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 3))
where title2 like 'Re:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 5))
where title2 like 'Sent:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 3))
where title2 like 'Re:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 5))
where title2 like 'Sent:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 3))
where title2 like 'Re:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 5))
where title2 like 'Sent:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 3))
where title2 like 'Re:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 5))
where title2 like 'Sent:%';

create table tmp_group (
   title2 varchar(255),
   userids varchar(255),
   groupid int,
   primary key (title2, userids)
);

replace tmp_group (
   title2,
   userids,
   groupid
)
select
   title2,
   userids,
   min(id)
from tmp_conversation
group by title2, userids;

create index tidx_group on tmp_group(title2, userids);
create index tidx_conversation on tmp_conversation(title2, userids);

update tmp_conversation c
join tmp_group g
   on c.title2 = g.title2 and c.userids = g.userids
set c.groupid = g.groupid;
EOT;

        $ex->queryN($sql);

        // Conversations.
        $conversation_Map = array(
            'groupid' => 'ConversationID',
            'title2' => 'Subject',
            'mt_date' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'mt_from_id' => 'InsertUserID'
        );
        $sql = "select
   mt.*,
   tc.title2,
   tc.groupid
from :_message_topics mt
join tmp_conversation tc
   on mt.mt_id = tc.id";
        $this->clearFilters('Conversation', $conversation_Map, $sql);
        $ex->exportTable('Conversation', $sql, $conversation_Map);

        // Conversation Message.
        $conversationMessage_Map = array(
            'msg_id' => 'MessageID',
            'groupid' => 'ConversationID',
            'msg_date' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'msg_post' => 'Body',
            'Format' => 'Format',
            'msg_author_id' => 'InsertUserID',
            'msg_ip_address' => 'InsertIPAddress'
        );
        $sql = "select
   tx.*,
   tc.title2,
   tc.groupid,
   'IPB' as Format
from :_message_text tx
join :_message_topics mt
   on mt.mt_msg_id = tx.msg_id
join tmp_conversation tc
   on mt.mt_id = tc.id";
        $this->clearFilters('ConversationMessage', $conversationMessage_Map, $sql);
        $ex->exportTable('ConversationMessage', $sql, $conversationMessage_Map);

        // User Conversation.
        $userConversation_Map = array(
            'userid' => 'UserID',
            'groupid' => 'ConversationID'
        );
        $sql = "select distinct
   g.groupid,
   t.userid
from tmp_to t
join tmp_group g
   on g.groupid = t.id";
        $ex->exportTable('UserConversation', $sql, $userConversation_Map);

        $ex->queryN("
      drop table tmp_conversation;
drop table tmp_to;
drop table tmp_to2;
drop table tmp_group;");
    }


    protected function _exportConversationsV3() {
        $ex = $this->ex;

        // Conversations.
        $conversation_Map = array(
            'mt_id' => 'ConversationID',
            'mt_date' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'mt_title' => 'Subject',
            'mt_starter_id' => 'InsertUserID'
        );
        $sql = "select * from :_message_topics where mt_is_deleted = 0";
        $this->clearFilters('Conversation', $conversation_Map, $sql);
        $ex->exportTable('Conversation', $sql, $conversation_Map);

        // Conversation Message.
        $conversationMessage_Map = array(
            'msg_id' => 'MessageID',
            'msg_topic_id' => 'ConversationID',
            'msg_date' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'msg_post' => 'Body',
            'Format' => 'Format',
            'msg_author_id' => 'InsertUserID',
            'msg_ip_address' => 'InsertIPAddress'
        );
        $sql = "select
            m.*,
            'IPB' as Format
         from :_message_posts m";
        $this->clearFilters('ConversationMessage', $conversationMessage_Map, $sql);
        $ex->exportTable('ConversationMessage', $sql, $conversationMessage_Map);

        // User Conversation.
        $userConversation_Map = array(
            'map_user_id' => 'UserID',
            'map_topic_id' => 'ConversationID',
            'Deleted' => 'Deleted'
        );
        $sql = "select
         t.*,
         !map_user_active as Deleted
      from :_message_topic_user_map t";
        $ex->exportTable('UserConversation', $sql, $userConversation_Map);
    }

    public function clearFilters($table, &$map, &$sql) {
        $PK = false;
        $selects = array();

        foreach ($map as $column => $info) {
            if (!$PK) {
                $PK = $column;
            }

            if (!is_array($info) || !isset($info['Filter'])) {
                continue;
            }


            $filter = $info['Filter'];
            if (isset($info['SourceColumn'])) {
                $source = $info['SourceColumn'];
            } else {
                $source = $column;
            }

            if (!is_array($filter)) {
                switch ($filter) {
                    case 'HTMLDecoder':
                        $this->ex->HTMLDecoderDb($table, $column, $PK);
                        unset($map[$column]['Filter']);
                        break;
                    case 'timestampToDate':
                        $selects[] = "from_unixtime($source) as {$column}_Date";

                        unset($map[$column]);
                        $map[$column . '_Date'] = $info['Column'];
                        break;
                }
            }
        }

        if (count($selects) > 0) {
            $statement = implode(', ', $selects);
            $sql = str_replace('from ', ", $statement\nfrom ", $sql);
        }
    }

    /**
     * Filter used by $Media_Map to replace value for ThumbPath and ThumbWidth when the file is not an image.
     *
     * @access public
     * @see ExportModel::_exportTable
     *
     * @param string $ralue Current value
     * @param string $field Current field
     * @param array $row Contents of the current record.
     * @return string|null Return the supplied value if the record's file is an image. Return null otherwise
     */
    public function filterThumbnailData($value, $field, $row) {
        if (strpos(strtolower($row['atype_mimetype']), 'image/') === 0) {
            return $value;
        } else {
            return null;
        }
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * jforum exporter tool.
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

// Add to the $supported array so it appears in the dropdown menu. Uncomment next line.
$supported['jforum'] = array('name' => 'jforum', 'prefix' => 'jforum_');
$supported['jforum']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'PrivateMessages' => 1,
    'Bookmarks' => 1,
    'Signatures' => 1,

);

class Jforum extends ExportController {
    /**
     * You can use this to require certain tables and columns be present.
     *
     * This can be useful for verifying data integrity. Don't specify more columns
     * than your porter actually requires to avoid forwards-compatibility issues.
     *
     * @var array Required tables => columns
     */
    protected $sourceTables = array(
        'forums' => array(), // This just requires the 'forum' table without caring about columns.
        'posts' => array(),
        'posts_text' => array(),
        'topics' => array(),
        'users' => array('user_id', 'username', 'user_email'), // Require specific cols on 'users'
    );

    /**
     * Main export process.
     *
     * @param ExportModel $ex
     * @see $_Structures in ExportModel for allowed destination tables & columns.
     */
    public function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('posts_text');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Reiterate the platform name here to be included in the porter file header.
        $ex->beginExport('', 'jforum');


        // User.
        $user_Map = array(
            'user_id' => 'UserID',
            'username' => 'Name',
            'user_email' => 'Email',
            'user_regdate' => 'DateInserted',
            'user_regdate2' => 'DateFirstVisit',
            'user_posts' => 'CountComments', // Approximate until counts are updated
            'user_avatar' => 'Photo',
            'deleted' => 'Deleted',
            'user_from' => 'Location',
            'user_biography' => 'About',
        );
        $ex->exportTable('User', "
         select u.*,
            'Reset' as HashMethod,
            user_regdate as user_regdate2
         from :_users u
         ", $user_Map);


        // Role.
        $role_Map = array(
            'group_id' => 'RoleID',
            'group_name' => 'Name',
            'group_description' => 'Description',
        );
        $ex->exportTable('Role', "
         select *
         from :_groups", $role_Map);


        // User Role.
        $userRole_Map = array(
            'user_id' => 'UserID',
            'group_id' => 'RoleID',
        );
        $ex->exportTable('UserRole', "
         select u.*
         from :_user_groups u", $userRole_Map);


        // UserMeta.
        $ex->exportTable('UserMeta', "
         select user_id as UserID,
            'Profile.Website' as `Name`,
            user_website as `Value`
         from :_users
         where user_website is not null

         union

         select user_id, 'Plugins.Signatures.Sig', user_sig
         from :_users where user_sig is not null

         union

         select user_id, 'Plugins.Signatures.Format', 'BBCode'
         from :_users where user_sig is not null

         union

         select user_id, 'Profile.Occupation', user_occ
         from :_users where user_occ is not null

         union

         select user_id, 'Profile.Interests', user_interests
         from :_users where user_interests is not null
      ");


        // Category.
        // _categories is tier 1, _forum is tier 2.
        // Overlapping IDs, so fast-forward _categories by 1000.
        $category_Map = array();
        $ex->exportTable('Category', "
         select
            c.categories_id+1000 as CategoryID,
            -1 as ParentCategoryID,
            c.title as Name,
            null as Description,
            1 as Depth,
            c.display_order as Sort
         from :_categories c

         union

         select
            f.forum_id as CategoryID,
            categories_id+1000 as ParentCategoryID,
            forum_name as Name,
            forum_desc as Description,
            2 as Depth,
            null as Sort
         from :_forums f
         ", $category_Map);


        // Discussion.
        $discussion_Map = array(
            'topic_id' => 'DiscussionID',
            'forum_id' => 'CategoryID',
            'user_id' => 'InsertUserID',
            'topic_time' => 'DateInserted',
            'topic_title' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'topic_views' => 'CountViews',
            'topic_replies' => 'CountComments',
            'topic_status' => 'Closed',
            'topic_type' => 'Announce',
            'post_text' => 'Body',
        );
        // It's easier to convert between Unix time and MySQL datestamps during the db query.
        $ex->exportTable('Discussion', "
         select *,
            t.forum_id as forum_id,
            if(t.topic_type>0,1,0) as topic_type,
            'BBCode' as Format
         from :_topics t
         left join :_posts_text p
            on t.topic_first_post_id = p.post_id", $discussion_Map);


        // Comment.
        $comment_Map = array(
            'post_id' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'user_id' => 'InsertUserID',
            'poster_ip' => 'InsertIPAddress',
            'post_text' => 'Body',
            'post_time' => 'DateInserted',
            'post_edit_time' => 'DateUpdated',
        );
        $ex->exportTable('Comment', "
         select p.*, t.post_text, 'BBCode' as Format
         from :_posts p
         left join :_posts_text t
            on p.post_id = t.post_id
         where p.post_id not in (select topic_first_post_id from :_topics)", $comment_Map);


        // UserDiscussion.
        // Guessing table is called "_watch" because they are all bookmarks.
        $userDiscussion_Map = array(
            'topic_id' => 'DiscussionID',
            'user_id' => 'UserID',
        );
        $ex->exportTable('UserDiscussion', "
         select *,
            1 as Bookmarked,
            if(is_read,NOW(),null) as DateLastViewed
         from :_topics_watch w", $userDiscussion_Map);


        // Conversation.
        // Thread using tmp table based on the pair of users talking.
        $ex->query('drop table if exists z_conversation;');
        $ex->query('create table z_conversation (
        ConversationID int unsigned NOT NULL AUTO_INCREMENT,
        LowUserID int unsigned,
        HighUserID int unsigned,
        PRIMARY KEY (ConversationID)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;');
        $ex->query('insert into z_conversation (LowUserID, HighUserID)
         select least(privmsgs_from_userid, privmsgs_to_userid),
            greatest(privmsgs_from_userid, privmsgs_to_userid)
         from :_privmsgs
         group by least(privmsgs_from_userid, privmsgs_to_userid),
            greatest(privmsgs_from_userid, privmsgs_to_userid)');
        // Replying on /dba/counts to rebuild most of this data later.
        $conversation_Map = array(
            'privmsgs_from_userid' => 'InsertUserID',
            'privmsgs_date' => 'DateInserted',
            'privmsgs_subject' => 'Subject',
        );
        $ex->exportTable('Conversation', "
         select p.*, c.ConversationID
         from :_privmsgs p
         left join z_conversation c on c.HighUserID = greatest(p.privmsgs_from_userid, p.privmsgs_to_userid)
            and c.LowUserID = least(p.privmsgs_from_userid, p.privmsgs_to_userid)
         group by least(privmsgs_from_userid, privmsgs_to_userid),
            greatest(privmsgs_from_userid, privmsgs_to_userid)", $conversation_Map);


        // Conversation Message.
        // Messages with the same timestamps are sent/received copies.
        // Yes that'd probably break down on huge sites but it's too convenient to pass up for now.
        $message_Map = array(
            'privmsgs_id' => 'MessageID',
            'privmsgs_from_userid' => 'InsertUserID',
            'privmsgs_date' => 'DateInserted',
            //'privmsgs_subject' => 'Subject',
            'privmsgs_text' => 'Body',
        );
        $ex->exportTable('ConversationMessage', "
         select *, c.ConversationID, 'BBCode' as Format
         from :_privmsgs p
         left join :_privmsgs_text t on t.privmsgs_id = p.privmsgs_id
         left join z_conversation c on c.LowUserID = least(privmsgs_from_userid, privmsgs_to_userid)
            and c.HighUserID = greatest(privmsgs_from_userid, privmsgs_to_userid)
         group by privmsgs_date", $message_Map);


        // UserConversation
        $ex->exportTable('UserConversation', "
         select ConversationID, LowUserID as UserID, NOW() as DateLastViewed from z_conversation
         union
         select ConversationID, HighUserID as UserID, NOW() as DateLastViewed from z_conversation
         ");
        // Needs afterward: update GDN_UserConversation set CountReadMessages = (select count(MessageID) from GDN_ConversationMessage where GDN_ConversationMessage.ConversationID = GDN_UserConversation.ConversationID)


        $ex->endExport();
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * Joomla Kunena exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['kunena'] = array('name' => 'Joomla Kunena', 'prefix' => 'jos_');
$supported['kunena']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Attachments' => 1,
    'Bookmarks' => 1,
    'Passwords' => 1,
);

class Kunena extends ExportController {
    /**
     * @param ExportModel $ex
     */
    public function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('mbox');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->destPrefix = 'jos';

        $ex->beginExport('', 'Joomla Kunena', array('HashMethod' => 'joomla'));

        // User.
        $user_Map = array(
            'id' => 'UserID',
            'name' => 'Name',
            'email' => 'Email',
            'registerDate' => 'DateInserted',
            'lastvisitDate' => 'DateLastActive',
            'password' => 'Password',
            'showemail' => 'ShowEmail',
            'birthdate' => 'DateOfBirth',
            'banned' => 'Banned',
//         'DELETED'=>'Deleted',
            'admin' => array('Column' => 'Admin', 'Type' => 'tinyint(1)'),
            'Photo' => 'Photo'
        );
        $ex->exportTable('User', "
         SELECT
            u.*,
            case when ku.avatar <> '' then concat('kunena/avatars/', ku.avatar) else null end as `Photo`,
            case u.usertype when 'superadministrator' then 1 else 0 end as admin,
            coalesce(ku.banned, 0) as banned,
            ku.birthdate,
            !ku.hideemail as showemail
         FROM :_users u
         left join :_kunena_users ku
            on ku.userid = u.id", $user_Map);

        // Role.
        $role_Map = array(
            'rank_id' => 'RoleID',
            'rank_title' => 'Name',
        );
        $ex->exportTable('Role', "select * from :_kunena_ranks", $role_Map);

        // UserRole.
        $userRole_Map = array(
            'id' => 'UserID',
            'rank' => 'RoleID'
        );
        $ex->exportTable('UserRole', "
         select *
         from :_users u", $userRole_Map);

        // Permission.
//      $ex->ExportTable('Permission',
//      "select 2 as RoleID, 'View' as _Permissions
//      union
//      select 3 as RoleID, 'View' as _Permissions
//      union
//      select 16 as RoleID, 'All' as _Permissions", array('_Permissions' => array('Column' => '_Permissions', 'Type' => 'varchar(20)')));

        // Category.
        $category_Map = array(
            'id' => 'CategoryID',
            'parent' => 'ParentCategoryID',
            'name' => 'Name',
            'ordering' => 'Sort',
            'description' => 'Description',

        );
        $ex->exportTable('Category', "
         select * from :_kunena_categories", $category_Map);

        // Discussion.
        $discussion_Map = array(
            'id' => 'DiscussionID',
            'catid' => 'CategoryID',
            'userid' => 'InsertUserID',
            'subject' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'time' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'ip' => 'InsertIPAddress',
            'locked' => 'Closed',
            'hits' => 'CountViews',
            'modified_by' => 'UpdateUserID',
            'modified_time' => array('Column' => 'DateUpdated', 'Filter' => 'timestampToDate'),
            'message' => 'Body',
            'Format' => 'Format'
        );
        $ex->exportTable('Discussion', "
         select
            t.*,
            txt.message,
            'BBCode' as Format
         from :_kunena_messages t
         left join :_kunena_messages_text txt
            on t.id = txt.mesid
         where t.thread = t.id", $discussion_Map);

        // Comment.
        $comment_Map = array(
            'id' => 'CommentID',
            'thread' => 'DiscussionID',
            'userid' => 'InsertUserID',
            'time' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'ip' => 'InsertIPAddress',
            'modified_by' => 'UpdateUserID',
            'modified_time' => array('Column' => 'DateUpdated', 'Filter' => 'timestampToDate'),
            'message' => 'Body',
            'Format' => 'Format'
        );
        $ex->exportTable('Comment', "
         select
            t.*,
            txt.message,
            'BBCode' as Format
         from :_kunena_messages t
         left join :_kunena_messages_text txt
            on t.id = txt.mesid
         where t.thread <> t.id", $comment_Map);

        // UserDiscussion.
        $userDiscussion_Map = array(
            'thread' => 'DiscussionID',
            'userid' => 'UserID'
        );
        $ex->exportTable('UserDiscussion', "
         select t.*, 1 as Bookmarked
         from :_kunena_subscriptions t", $userDiscussion_Map);

        // Media.
        $media_Map = array(
            'id' => 'MediaID',
            'mesid' => 'ForeignID',
            'userid' => 'InsertUserID',
            'size' => 'Size',
            'path2' => array('Column' => 'Path', 'Filter' => 'urlDecode'),
            'thumb_path' => array('Column' => 'ThumbPath', 'Filter' => array($this, 'filterThumbnailData')),
            'thumb_width' => array('Column' => 'ThumbWidth', 'Filter' => array($this, 'filterThumbnailData')),
            'filetype' => 'Type',
            'filename' => array('Column' => 'Name', 'Filter' => 'urlDecode'),
            'time' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
        );
        $ex->exportTable('Media', "
         select
            a.*,
            concat(a.folder, '/', a.filename) as path2,
            case when m.id = m.thread then 'discussion' else 'comment' end as ForeignTable,
            m.time,
            concat(a.folder, '/', a.filename) as thumb_path,
            128 as thumb_width
         from :_kunena_attachments a
         join :_kunena_messages m
            on m.id = a.mesid", $media_Map);

        $ex->endExport();
    }

    /**
     * Filter used by $Media_Map to replace value for ThumbPath and ThumbWidth when the file is not an image.
     *
     * @access public
     * @see ExportModel::_exportTable
     *
     * @param string $ralue Current value
     * @param string $field Current field
     * @param array $row Contents of the current record.
     * @return string|null Return the supplied value if the record's file is an image. Return null otherwise
     */
    public function filterThumbnailData($value, $field, $row) {
        if (strpos(strtolower($row['filetype']), 'image/') === 0) {
            return $value;
        } else {
            return null;
        }
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * MBOX exporter tool.
 *
 * Got a small listserv? Get 'er in mbox format and follow these instructions to turn it into a forum.
 *    This will currently load your entire history into memory so it's not for doing huge lists at once.
 *    You will need high resource limits for your server config.
 * Install Thunderbird & extension ImportExportTools
 *    https://www.google.com/url?q=https%3A%2F%2Faddons.mozilla.org%2Fen-us%2Fthunderbird%2Faddon%2Fimportexporttools%2F&sa=D&sntz=1&usg=AFQjCNEw-oR9Y4Y_DEvD1qF_7TNcS1_v1w
 * Set the max size on all fields to 255 (in the addon’s preferences)
 * Reading an mbox file with Thunderbird:
 *    https://www.google.com/url?q=https%3A%2F%2Fcommons.lbl.gov%2Fdisplay%2F~jwelcher%40lbl.gov%2FReading%2Ban%2Bmbox%2Bfile%2Bwith%2BThunderbird&sa=D&sntz=1&usg=AFQjCNGs5UFFhrHvGPbfwOZUdeVjmu_XAQ
 * Right click each mbox -> ImportExportTools -> "Export all messages in this folder" -> "Spreadsheet (CSV)".
 *    Watch status bar at bottom of Thunderbird for progress.
 * Import settings: Escape is “ (double quote) ONLY
 * Import all CSVs to 1 table named ‘mbox’ with text fields:
 *    Subject, Sender, Body, Date, Folder (manually set to name of each mbox)
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @author Lincoln Russell lincolnwebs.com
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['mbox'] = array('name' => '.mbox files', 'prefix' => '');
$supported['mbox']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
);

class Mbox extends ExportController {

    /** @var array Required tables => columns */
    protected $sourceTables = array(
        'mbox' => array('Subject', 'Sender', 'Date', 'Body', 'Folder')
    );

    /**
     * Forum-specific export format.
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('mbox');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Begin
        $ex->beginExport('', 'Mbox', array());


        // Temporary user table
        $ex->query('create table :_mbox_user (UserID int AUTO_INCREMENT, Name varchar(255), Email varchar(255), PRIMARY KEY (UserID))');
        $result = $ex->query('select Sender from :_mbox group by Sender', true);

        // Users, pt 1: Build ref array; Parse name & email out - strip quotes, <, >
        $users = array();
        while ($row = mysql_fetch_assoc($result)) {
            // Most senders are "Name <Email>"
            $nameParts = explode('<', trim($row['Sender'], '"'));
            // Sometimes the sender is just <email>
            if ($nameParts[0] == '') {
                $name = trim(str_replace('>', '', $nameParts[1]));
            } else // Normal?
            {
                $name = trim(str_replace('\\', '', $nameParts[0]));
            }
            if (strstr($name, '@') !== false) {
                // Only wound up with an email
                $name = explode('@', $name);
                $name = $name[0];
            }
            $email = $this->parseEmail($row['Sender']);

            // Compile by unique email
            $users[$email] = $name;
        }

        // Users, pt 2: loop thru unique emails
        foreach ($users as $email => $name) {
            $ex->query('insert into :_mbox_user (Name, Email)
            values ("' . mysql_real_escape_string($name) . '", "' . mysql_real_escape_string($email) . '")');
            $userID = mysql_insert_id();
            // Overwrite user list with new UserID instead of name
            $users[$email] = $userID;
        }


        // Temporary category table
        $ex->query('create table :_mbox_category (CategoryID int AUTO_INCREMENT, Name varchar(255),
         PRIMARY KEY (CategoryID))');
        $result = $ex->query('select Folder from :_mbox group by Folder', true);
        // Parse name out & build ref array
        $categories = array();
        while ($row = mysql_fetch_assoc($result)) {
            $ex->query('insert into :_mbox_category (Name)
            values ("' . mysql_real_escape_string($row["Folder"]) . '")');
            $categoryID = mysql_insert_id();
            $categories[$row["Folder"]] = $categoryID;
        }


        // Temporary post table
        $ex->query('create table :_mbox_post (PostID int AUTO_INCREMENT, DiscussionID int,
         IsDiscussion tinyint default 0, InsertUserID int, Name varchar(255), Body text, DateInserted datetime,
         CategoryID int, PRIMARY KEY (PostID))');
        $result = $ex->query('select * from :_mbox', true);
        // Parse name, body, date, userid, categoryid
        while ($row = mysql_fetch_assoc($result)) {
            // Assemble posts into a format we can actually export.
            // Subject: trim quotes, 're: ', 'fwd: ', 'fw: ', [category]
            $name = trim(preg_replace('#^(re:)|(fwd?:) #i', '', trim($row['Subject'], '"')));
            $name = trim(preg_replace('#^\[[0-9a-zA-Z_-]*] #', '', $name));
            $email = $this->parseEmail($row['Sender']);
            $userID = (isset($users[$email])) ? $users[$email] : 0;
            $ex->query('insert into :_mbox_post (Name, InsertUserID, CategoryID, DateInserted, Body)
            values ("' . mysql_real_escape_string($name) . '",
               ' . $userID . ',
               ' . $categories[$row['Folder']] . ',
               from_unixtime(' . strtotime($row['Date']) . '),
               "' . mysql_real_escape_string($this->parseBody($row['Body'])) . '")');
        }

        // Decide which posts are OPs
        $result = $ex->query('select PostID from (select * from :_mbox_post order by DateInserted asc) x group by Name',
            true);
        $discussions = array();
        while ($row = mysql_fetch_assoc($result)) {
            $discussions[] = $row['PostID'];
        }
        $ex->query('update :_mbox_post set IsDiscussion = 1 where PostID in (' . implode(",", $discussions) . ')');

        // Thread the comments
        $result = $ex->query('select c.PostID, d.PostID as DiscussionID from :_mbox_post c
         left join :_mbox_post d on c.Name like d.Name and d.IsDiscussion = 1
         where c.IsDiscussion = 0', true);
        while ($row = mysql_fetch_assoc($result)) {
            $ex->query('update :_mbox_post set DiscussionID = ' . $row['DiscussionID'] . '  where PostID = ' . $row['PostID']);
        }


        // Users
        $user_Map = array();
        $ex->exportTable('User', "
         select u.*,
            NOW() as DateInserted,
            'Reset' as HashMethod
         from :_mbox_user u", $user_Map);


        // Categories
        $category_Map = array();
        $ex->exportTable('Category', "
      select *
      from :_mbox_category", $category_Map);


        // Discussions
        $discussion_Map = array(
            'PostID' => 'DiscussionID'
        );
        $ex->exportTable('Discussion', "
      select p.PostID, p.DateInserted, p.Name, p.Body, p.InsertUserID, p.CategoryID,
         'Html' as Format
       from :_mbox_post p where IsDiscussion = 1", $discussion_Map);


        // Comments
        $comment_Map = array(
            'PostID' => 'CommentID'
        );
        $ex->exportTable('Comment',
            "select p.*,
         'Html' as Format
       from :_mbox_post p
       where IsDiscussion = 0", $comment_Map);


        // Remove Temporary tables
        //$ex->Query('drop table :_mbox_post');
        //$ex->Query('drop table :_mbox_category');
        //$ex->Query('drop table :_mbox_user');

        // End
        $ex->endExport();
//      echo implode("\n\n", $ex->Queries);
    }

    /**
     * Grab the email from the User field.
     */
    public function parseEmail($email) {
        $emailBits = explode('<', $email);
        if (!isset($emailBits[1])) {
            return $email;
        }

        $emailBits = explode('>', $emailBits[1]);

        return trim($emailBits[0]);
    }

    /**
     * Body: strip headers, signatures, fwds.
     */
    public function parseBody($body) {
        $body = preg_replace('#Subject:\s*(.*)\s*From:\s*(.*)\s*Date:\s*(.*)\s*To:\s*(.*)\s*(CC:\s*(.*)\s*)?#', '',
            $body);
        $body = preg_replace('#\s*From: ([a-zA-Z0-9_-]*)@(.*)#', '', $body);
        $body = explode("____________", $body);
        $body = explode("----- Original Message -----", $body[0]);

        return trim($body[0]);
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * MMORPG exporter tool.
 *
 * @copyright Vanilla Forums Inc. 2010-2014
 * @license GNU GPL2
 * @package VanillaPorter
 * @see functions.commandline.php for command line usage.
 */

$supported['mmorpg'] = array(
    'name' => 'MMORPG.com',
    'prefix' => ''
);
$supported['mmorpg']['CommandLine'] = array();
$supported['mmorpg']['features'] = array(
    'Bookmarks' => 1,
    'Categories' => 1,
    'Comments' => 1,
    'Discussions' => 1,
    'Polls' => 1,
    'Points' => 1,
    'Ranks' => 1,
    'Roles' => 1,
    'Signatures' => 1,
    'Users' => 1
);
class Mmorpg extends ExportController {

    private $categoriesToKeep = "'Age of Conan', 'Age of Wushu', 'Aion', 'Albion Online', 'Anarchy Online',
        'ArcheAge', 'Asheron''s Call', 'Black Desert', 'Blade & Soul', 'Bloodborne', 'Camelot Unchained',
        'Champions Online', 'City of Heroes', 'Correspondent Forum', 'Crowfall', 'D&D Online', 'Dark Age of Camelot',
        'Darkfall', 'Darkfall: Unholy Wars', 'DayZ', 'DC Universe', 'Defiance', 'Destiny', 'Developers Corner',
        'Diablo 3', 'DOTA 2', 'Dragon Age: Inquisition', 'Dungeon Fighter Online', 'Elder Scrolls Online',
        'Elite: Dangerous', 'EVE Online', 'Everquest', 'Everquest II', 'EverQuest Next', 'Final Fantasy XI',
        'Final Fantasy XIV: A Realm Reborn', 'Firefall', 'Game Correspondent Forum', 'General Discussion',
        'General Gaming Discussion', 'Gloria Victis', 'Guild Wars', 'Guild Wars 2', 'H1Z1', 'Heroes of the Storm',
        'Kingdom Under Fire II', 'Landmark', 'Life is Feudal', 'Lineage II', 'Lord of the Rings Online',
        'Marvel Heroes', 'Minecraft', 'Mortal Online', 'Neverwinter', 'Other Games', 'Overwatch',
        'Pantheon: Rise of the Fallen', 'Pathfinder Online', 'Path of Exile', 'PlanetSide 2', 'Rift', 'Runescape',
        'Shards Online','Shroud of the Avatar', 'Skyforge', 'SMITE', 'Staff Forums', 'Staff Writer Forums',
        'Star Citizen', 'Star Trek Online', 'Star Wars: The Old Republic', 'Star Wars Galaxies', 'Sword Coast Legends',
        'TERA', 'test', 'test forum', 'The Crew', 'The Division', 'The Repopulation', 'The Secret World',
        'The Witcher 3: Wild Hunt', 'Trials of Ascension', 'Trove', 'Ultima Online', 'Vanguard: Saga of Heroes',
        'Warhammer 40,000: Eternal Crusade', 'WAR (Warhammer Online)', 'WildStar', 'Wizard101', 'World of Warcraft',
        'World of Warships', 'Xsyon'";

    /**
     * Calculate the points associated with a rank.
     *
     * @param $value Value of the field.
     * @param $field Name of the field.
     * @param $row Full row represented as an associative array.
     *
     * @return int The number of points associated with the provided rank.
     */
    public function calculatePoints($value, $field, $row) {
        $rankID = $this->calculateRankID($value, $field, $row);
        $points = 0;

        switch ($rankID) {
            case 2:
                $points = 25;
                break;
            case 3:
                $points = 500;
                break;
            case 4:
                $points = 1500;
                break;
            case 5:
                $points = 3000;
                break;
        }

        return $points;
    }

    /**
     * Normalize UserRank to 1-100 and calculate a valid RankID.
     *
     * @param $value Value of the field.
     * @param $field Name of the field.
     * @param $row Full row represented as an associative array.
     *
     * @return int A valid RankID (1-5)
     */
    function calculateRankID($value, $field, $row) {
        // Normalize that value
        if (!is_numeric($value) || $value < 1) {
            $value = 1;
        } elseif ($value > 100) {
            $value = 100;
        }

        return ceil($value/20);
    }

    /**
     * Main export process.
     *
     * @param ExportModel $ex
     * @see $_Structures in ExportModel for allowed destination tables & columns.
     */
    public function forumExport($ex) {
        $cdn = $this->param('cdn', '~cf/');

        // Get the characterset for the comments.
        $characterSet = $ex->getCharacterSet('TblPosts');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Reiterate the platform name here to be included in the porter file header.
        $ex->beginExport('', 'MMORPG.com');


        // Rank
        //$Rank_Map = array();
        //$ex->ExportTable('Rank', "
        //    select `RankID`, `RankName` as `Name`, `RankID` as `Level`, `RankName` as `Label`
        //    from `UserRanks` `ur`",
        //    $Rank_Map
        //);


        // User.
        $user_Map = array(
            'RankVal' => array(
                'Column' => 'RankID',
                'Filter' => array($this, 'CalculateRankID')
            ),
            'PointVal' => array(
                'Column' => 'Points',
                'Filter' => array($this, 'CalculatePoints')
            )
        );
        $user_Map = array();
        $ex->exportTable('User', "
            select u.UserID, u.Username as Name, u.SpecialTitle as Title,
                concat('$cdn','customavatars/', fa.FileName) as Photo,
                case
                        when u.City != '' and u.StateID != '' then concat_ws(', ', u.City, u.StateID)
                        when u.City != '' then u.City
                        when u.StateID != '' then u.StateID
                    else ''
                end as Location,
                u.Biography as About, u.Email, if(u.HideEmail = 1, 0, 1) as ShowEmail,
                case
                    when u.Gender = 'Male' then 'm'
                    when u.Gender = 'Female' then 'f'
                    else 'u'
                end as Gender,
                u.Birthdate as DateOfBirth, u.MemberSince as DateInserted, u.activated as Confirmed, u.Banned,
                u.UserRank as RankVal,
                u.UserRank as PointVal
            from Users u left join ForumAvatars fa on u.Avatar = fa.AvatarID
        ", $user_Map);


        // Role.
        $role_Map = array();
        $ex->exportTable('Role', "
            select `SecurityLevelID` as `RoleID`, `Description` as `Name`
            from `UserSecurityLevels` `usl`",
            $role_Map
        );


        // User Role.
        $userRole_Map = array();
        $ex->exportTable('UserRole', "
         select `UserId` as `UserID`, `SecurityLevel` as `RoleID`
         from `Users` `u`", $userRole_Map);

        // User Meta.
        $ex->query("drop table if exists `z_UserMeta`");
        $ex->query("
            create table `z_UserMeta` (
                `UserID` int(11) not null,
                `Name` varchar(255) collate utf8_unicode_ci not null,
                `Value` text COLLATE utf8_unicode_ci
            ) engine=InnoDB default charset=utf8 collate=utf8_unicode_ci;"
        );

        // Signatures
        $signaturesBeginTime = microtime(true);
        $ex->query("
            insert into `z_UserMeta` (`UserID`, `Name`, `Value`)

            select `UserID`, 'Plugin.Signatures.Sig' as `Name`, `signatureparsed` as `Value`
            from `Users` `u`
            where `Signature` > ''

            union

            select `UserID`, 'Plugin.Signatures.Format', 'HTML'
            from `Users` `u`
            where `Signature` > ''"
        );
        $signaturesEndTime = microtime(true);
        $signaturesElapsed = ExportModel::formatElapsed($signaturesBeginTime, $signaturesEndTime);
        $ex->comment("Exported Signatures ($signaturesElapsed)");

        // Category.
        $ex->query("drop table if exists `z_Category`");
        $ex->query("
            create table `z_Category` (
              `NewID` int(11) unsigned not null auto_increment,
              `CategoryID` int(11) default null,
              `ForumID` int(11) default null,
              primary key (`NewID`),
              key `CategoryID` (`CategoryID`),
              key `ForumID` (`ForumID`)
            ) engine=InnoDB default charset=utf8;"
        );
        $ex->query("
            insert into `z_Category` (`CategoryID`)

            select `CategoryId`
            from `TblForumCategories` `fc`
            where Title in (" . $this->categoriesToKeep . ")"
        );

        $ex->query("
            insert into `z_Category` (`ForumID`)

            select `ForumId`
            from `TblForums` `f`
            where `CategoryId` in (
                select `CategoryId`
                from `TblForumCategories` `fc`
                where Title in (" . $this->categoriesToKeep . ")
            )"
        );

        $category_Map = array();
        $ex->exportTable('Category', "
            select `oc`.`NewID` as `CategoryID`, NULL as `ParentCategoryID`, `Title` as `Name`, `Description`,
                `ListOrder` as `Sort`, `CreateDate` as `DateInserted`
            from `TblForumCategories` `fc`
            left join `z_Category` `oc` using (`CategoryID`)
            where `oc`.`NewID` is not null

            union

            select `oc`.`NewID` as `CategoryID`,
            if (`ParentForumId` > 0,
                (select `NewID` from `TblForums` `of` left join `z_Category` `c` using (`ForumID`) where `of`.`ForumID` = `f`.`ParentForumId`),
                (select `NewID` from `TblForumCategories` `ofc` left join `z_Category` `c` using (`CategoryID`) where `ofc`.`CategoryID` = `f`.`CategoryId`)
            ) as `ParentCategoryID`,
            `Title` as `Name`, `Description`, `ListOrder` as `Sort`, `CreateDate` as `DateInserted`
            from `TblForums` `f`
            left join `z_Category` `oc` using (`ForumID`)
            where `oc`.`NewID` is not null",
            $category_Map
        );

        $otherGamesResult = $ex->query("
            select `oc`.`NewId`
            from `TblForumCategories` `c` left join `z_Category` `oc` using(`CategoryId`)
            where `c`.`Title` = 'Other Games'"
        );
        if (is_resource($otherGamesResult) && $otherGames = mysql_fetch_assoc($otherGamesResult)) {
            $otherGamesID = $otherGames['NewId'];
        } else {
            trigger_error('"Other Games" category does not exist', E_USER_ERROR);
        }
        unset($otherGamesResult, $otherGames);

        // Tags
        $tag_Map = array(
            'NameRaw' => array(
                'Column' => 'Name',
                'Filter' => 'FormatUrl'
            )
        );
        $ex->exportTable('Tag', "
            select `CategoryId` as `TagID`, `Title` as `NameRaw`, `Title` as `FullName`
            from `TblForumCategories`
            where `Title` not in (" . $this->categoriesToKeep . ")",
            $tag_Map
        );

        // Discussion.
        $discussion_Map = array();
        $ex->exportTable('Discussion', "
            select `t`.`ThreadId` as `DiscussionID`,
                if(
                    `oc`.`Title` in (" . $this->categoriesToKeep . "),
                    `c`.`NewID`,
                    " . $otherGamesID . "
                ) as `CategoryID`,
                `t`.`Title` as `Name`, `p`.`BodyParsed` as `Body`, 'HTML' as `Format`,
                `t`.`CreateDate` as `DateInserted`, `t`.`FirstPostUserId` as `InsertUserID`,
                if(`t`.`IsSticky` = 1, 2, 0) as `Announce`,
                if(`t`.`IsLocked` = 1, 1, 0) as `Closed`
            from `TblThreads` `t`
                left join `TblPosts` `p` on `t`.`FirstPostId` = `p`.`PostId`
                left join `z_Category` `c` using (`ForumId`)
                left join `TblForums` `f` using (`ForumId`)
                left join `TblForumCategories` `oc` on `f`.`CategoryId` = `oc`.`CategoryId`
            where `t`.`IsDeleted` = '0'",
            $discussion_Map
        );


        // TagDiscussion
        $tagDiscussion_Map = array();
        $ex->exportTable('TagDiscussion', "
            select `f`.`CategoryId` as `TagID`, `t`.`ThreadId` as `DiscussionID`
            from `TblThreads` `t`
                left join `TblForums` `f` using (`ForumId`)
                left join `TblForumCategories` `c` using (`CategoryId`)
            where `c`.`Title` not in (" . $this->categoriesToKeep . ")",
            $tagDiscussion_Map
        );


        // Comment.
        $comment_Map = array();
        $ex->exportTable('Comment', "
            select `p`.`PostId` as `CommentID`, `p`.`ThreadId` as `DiscussionID`, `p`.`BodyParsed` as `Body`, 'HTML' as `Format`,
                `p`.`CreateDate` as `DateInserted`, `p`.`UserId` as `InsertUserID`
            from `TblPosts` `p`
            where `p`.`IsDeleted` = '0'
                and `p`.`PostId` not in (select `FirstPostId` from `TblThreads` where `IsDeleted` = '0')",
            $comment_Map
        );

        // Polls.
        $poll_Map = array();
        $ex->exportTable('Poll', "
            select `pl`.`PollID`, `p`.`ThreadId` as `DiscussionID`, `pl`.`Title` as `Name`,
            0 as `Anonymous`, `pl`.`Day` as `DateInserted`
            from `Polls` `pl` left join `TblPosts` `p` on `pl`.`PollID` = `p`.`PollID`
            left join `TblThreads` `t` on `p`.`PostID` = `t`.`FirstPostID`
            where `t`.`ThreadId` is not null",
            $poll_Map
        );

        $pollOption_Map = array();
        $ex->exportTable('PollOption', "
            select `PollAnswerID` as `PollOptionID`, `PollID`, `Answer` as `Body`, 'BBCode' as `Format`,
                `Votes` as `CountVotes`
            from `PollAnswers`",
            $pollOption_Map
        );


        // Bookmarks
        $bookmark_Map = array();
        $ex->exportTable('UserDiscussion', "
            select `UserID`, `ThreadID` as `DiscussionID`, `LastVisit` as `DateLastViewed`, 1 as `Bookmarked`
            from `TblThreadSubscriptions`",
            $bookmark_Map
        );


        // Ignores
        $ignoresBeginTime = microtime(true);
        $ex->query(
            "insert into `z_UserMeta` (`UserID`, `Name`, `Value`)

            select `UserId` as `UserID`, concat('Plugin.Ignore.Blocked.User.', `IgnoredUserId`) as `Name`, now() as `Value`
            from `TblIgnoredUsers`"
        );
        $ignoresEndTime = microtime(true);
        $ignoresElapsed = ExportModel::formatElapsed($ignoresBeginTime, $ignoresEndTime);
        $ex->comment("Exported Ignores ($ignoresElapsed)");

        // User Meta.
        $userMeta_Map = array();
        $ex->exportTable('UserMeta', "
            select * from `z_UserMeta`",
            $userMeta_Map
        );

        $ex->endExport();
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * MyBB exporter tool.
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license GNU GPL2
 * @package VanillaPorter
 * @see functions.commandline.php for command line usage.
 */

$supported['mybb'] = array('name' => 'MyBB', 'prefix' => 'mybb_');
$supported['mybb']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Passwords' => 1,
    'Avatars' => 1,
    'Bookmarks' => 1,
);

class MyBB extends ExportController {
    /**
     * You can use this to require certain tables and columns be present.
     *
     * @var array Required tables => columns
     */
    protected $sourceTables = array(
        'forums' => array(),
        'posts' => array(),
        'threads' => array(),
        'users' => array(),
    );

    /**
     * Main export process.
     *
     * @param ExportModel $ex
     * @see $_Structures in ExportModel for allowed destination tables & columns.
     */
    public function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('posts');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Reiterate the platform name here to be included in the porter file header.
        $ex->beginExport('', 'MyBB');

        // User.
        $user_Map = array(
            'uid' => 'UserID',
            'username' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'avatar' => 'Photo',
            'regdate2' => 'DateInserted',
            'regdate3' => 'DateFirstVisit',
            'email' => 'Email',
        );
        $ex->exportTable('User', "
         select u.*,
            FROM_UNIXTIME(regdate) as regdate2,
            FROM_UNIXTIME(regdate) as regdate3,
            FROM_UNIXTIME(lastactive) as DateLastActive,
            concat(password, salt) as Password,
            'mybb' as HashMethod
         from :_users u
         ", $user_Map);

        // Role.
        $role_Map = array(
            'gid' => 'RoleID',
            'title' => 'Name',
            'description' => 'Description',
        );
        $ex->exportTable('Role', "
         select *
         from :_usergroups", $role_Map);

        // User Role.
        $userRole_Map = array(
            'uid' => 'UserID',
            'usergroup' => 'RoleID',
        );
        $ex->exportTable('UserRole', "
         select u.uid, u.usergroup
         from :_users u", $userRole_Map);

        // Category.
        $category_Map = array(
            'fid' => 'CategoryID',
            'pid' => 'ParentCategoryID',
            'disporder' => 'Sort',
            'name' => 'Name',
            'description' => 'Description',
        );
        $ex->exportTable('Category', "
         select *
         from :_forums f
         ", $category_Map);

        // Discussion.
        $discussion_Map = array(
            'tid' => 'DiscussionID',
            'fid' => 'CategoryID',
            'uid' => 'InsertUserID',
            'subject' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'views' => 'CountViews',
            'replies' => 'CountComments',
        );
        $ex->exportTable('Discussion', "
         select *,
            FROM_UNIXTIME(dateline) as DateInserted,
            'BBCode' as Format
         from :_threads t", $discussion_Map);

        // Comment.
        $comment_Map = array(
            'pid' => 'CommentID',
            'tid' => 'DiscussionID',
            'uid' => 'InsertUserID',
            'message' => array('Column' => 'Body'),
        );
        $ex->exportTable('Comment', "
         select p.*,
            FROM_UNIXTIME(dateline) as DateInserted,
            'BBCode' as Format
         from :_posts p", $comment_Map);

        // UserDiscussion.
        $userDiscussion_Map = array(
            'tid' => 'DiscussionID',
            'uid' => 'UserID',
        );
        $ex->exportTable('UserDiscussion', "
         select *,
            1 as Bookmarked
         from :_threadsubscriptions t", $userDiscussion_Map);

        $ex->endExport();
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * NodeBB exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['nodebb'] = array('name' => 'NodeBB 0.*', 'prefix' => 'gdn_');
$supported['nodebb']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'PrivateMessages' => 1,
    'UserWall' => 1,
    'UserNotes' => 1,
    'Bookmarks' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
    'Reactions' => 1
);

class NodeBB extends ExportController {

    /**
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('topic');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->beginExport('', 'NodeBB 0.*', array('HashMethod' => 'Vanilla'));

        // Users
        $user_Map = array(
            'uid' => 'UserID',
            'username' => 'Name',
            'password' => 'Password',
            'email' => 'Email',
            'confirmed' => 'Confirmed',
            'showemail' => 'ShowEmail',
            'joindate' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate')),
            'lastonline' => array('Column' => 'DateLastActive', 'Filter' => array($this, 'tsToDate')),
            'lastposttime' => array('Column' => 'DateUpdated', 'Filter' => array($this, 'tsToDate')),
            'banned' => 'Banned',
            'admin' => 'Admin',
            'hm' => 'HashMethod'
        );

        $ex->exportTable('User', "

             select uid, username, password, email, `email:confirmed` as confirmed, showemail, joindate, lastonline, lastposttime, banned, 0 as admin, 'crypt' as hm
             from :_user

             ", $user_Map);

        //Roles
        $role_Map = array(
            '_num' => 'RoleID',
            '_key' => array('Column' => 'Name', 'Filter' => array($this, 'roleNameFromKey')),
            'description' => 'Description'
        );

        $ex->exportTable('Role', "

            select gm._key as _key, gm._num as _num, g.description as description
            from :_group_members gm left join :_group g
            on gm._key like concat(g._key, '%')

            ", $role_Map);

        $userRole_Map = array(
            'id' => 'RoleID',
            'members' => 'UserID'
        );

        $ex->exportTable('UserRole', "

            select *, g._num as id
            from :_group_members g join :_group_members__members m
            on g._id = m._parentid

        ", $userRole_Map);

        // Signatutes.
        $userMeta_Map = array(
            'uid' => 'UserID',
            'name' => 'Name',
            'signature' => 'Value'
        );

        $ex->exportTable('UserMeta', "

            select uid, 'Plugin.Signatures.Sig' as name, signature
            from :_user
            where length(signature) > 1

            union

            select uid, 'Plugin.Signatures.Format', 'Markdown'
            from :_user
            where length(signature) > 1

            union

            select uid, 'Profile.Website' as name, website
            from :_user
            where length(website) > 7

            union

            select uid, 'Profile.Location' as name, location
            from :_user
            where length(location) > 1

        ", $userMeta_Map);

        // Categories
        $category_Map = array(
            'cid' => 'CategoryID',
            'name' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'description' => 'Description',
            'order' => 'Sort',
            'parentCid' => 'ParentCategoryID',
            'slug' => array('Column' => 'UrlCode', 'Filter' => array($this, 'removeNumId')),
            'image' => 'Photo',
            'disabled' => 'Archived'
        );

        $ex->exportTable('Category', "

            select *
            from :_category

        ", $category_Map);

        if (!$ex->indexExists('z_idx_topic', ':_topic')) {
            $ex->query("create index z_idx_topic on :_topic(mainPid);");
        }
        if (!$ex->indexExists('z_idx_post', ':_post')) {
            $ex->query("create index z_idx_post on :_post(pid);");
        }
        if (!$ex->indexExists('z_idx_poll', ':_poll')) {
            $ex->query("create index z_idx_poll on :_poll(tid);");
        }

        $ex->query("drop table if exists z_discussionids;");
        $ex->query("

            create table z_discussionids (
                tid int unsigned,
                primary key(tid)
            );

        ");

        $ex->query("

            insert ignore z_discussionids (
                tid
            )
            select mainPid
            from :_topic
            where mainPid is not null
            and deleted != 1;

        ");

        $ex->query("drop table if exists z_reactiontotalsupvote;");
        $ex->query("

            create table z_reactiontotalsupvote (
                value varchar(50),
                total int,
                primary key (value)
            );

        ");

        $ex->query("drop table if exists z_reactiontotalsdownvote;");
        $ex->query("

            create table z_reactiontotalsdownvote (
                value varchar(50),
                total int,
                primary key (value)
            );

        ");

        $ex->query("drop table if exists z_reactiontotals;");
        $ex->query("

            create table z_reactiontotals (
              value varchar(50),
              upvote int,
              downvote int,
              primary key (value)
            );

        ");

        $ex->query("

            insert z_reactiontotalsupvote
            select value, count(*) as totals
            from :_uid_upvote
            group by value;

        ");

        $ex->query("

            insert z_reactiontotalsdownvote
            select value, count(*) as totals
            from :_uid_downvote
            group by value;

        ");

        $ex->query("

            insert z_reactiontotals
            select *
            from (
                select u.value, u.total as up, d.total as down
                from z_reactiontotalsupvote u
                left join z_reactiontotalsdownvote d
                on u.value = d.value

                union

                select d.value, u.total as up, d.total as down
                from z_reactiontotalsdownvote d
                left join z_reactiontotalsupvote u
                on u.value = d.value
            ) as reactions

        ");

        //Discussions
        $discussion_Map = array(
            'tid' => 'DiscussionID',
            'cid' => 'CategoryID',
            'title' => 'Name',
            'content' => 'Body',
            'uid' => 'InsertUserID',
            'locked' => 'Closed',
            'pinned' => 'Announce',
            'timestamp' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate')),
            'edited' => array('Column' => 'DateUpdated', 'Filter' => array($this, 'tsToDate')),
            'editor' => 'UpdateUserID',
            'viewcount' => 'CountViews',
            'format' => 'Format',
            'votes' => 'Score',
            'attributes' => array('Column' => 'Attributes', 'Filter' => array($this, 'serializeReactions')),
            'poll' => array('Column' => 'Type', 'Filter' => array($this, 'isPoll'))
        );

        $ex->exportTable('Discussion', "

            select p.tid, cid, title, content, p.uid, locked, pinned, p.timestamp, p.edited, p.editor, viewcount, votes, poll._id as poll, 'Markdown' as format, concat(ifnull(u.total, 0), ':', ifnull(d.total, 0)) as attributes
            from :_topic t
            left join :_post p
            on t.mainPid = p.pid
            left join z_reactiontotalsupvote u
            on u.value = t.mainPid
            left join z_reactiontotalsdownvote d
            on d.value = t.mainPid
            left join :_poll poll
            on p.tid = poll.tid
            where t.deleted != 1

        ", $discussion_Map);

        $ex->query("drop table if exists z_comments;");
        $ex->query("

            create table z_comments (
                pid int,
                content text,
                uid varchar(255),
                tid varchar(255),
                timestamp double,
                edited varchar(255),
                editor varchar(255),
                votes int,
                upvote int,
                downvote int,
                primary key(pid)
            );

        ");

        $ex->query("

            insert ignore z_comments (
                pid,
                content,
                uid,
                tid,
                timestamp,
                edited,
                editor,
                votes
            )
            select p.pid, p.content, p.uid, p.tid, p.timestamp, p.edited, p.editor, p.votes
            from :_post p
            left join z_discussionids t
            on t.tid = p.pid
            where p.deleted != 1 and t.tid is null;

        ");

        $ex->query("

            update z_comments as c
            join z_reactiontotals r
            on r.value = c.pid
            set c.upvote = r.upvote, c.downvote = r.downvote;

        ");

        // Comments
        $comment_Map = array(
            'content' => 'Body',
            'uid' => 'InsertUserID',
            'tid' => 'DiscussionID',
            'timestamp' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate')),
            'edited' => array('Column' => 'DateUpdated', 'Filter' => array($this, 'tsToDate')),
            'editor' => 'UpdateUserID',
            'votes' => 'Score',
            'format' => 'Format',
            'attributes' => array('Column' => 'Attributes', 'Filter' => array($this, 'serializeReactions'))
        );

        $ex->exportTable('Comment', "

            select content, uid, tid, timestamp, edited, editor, votes, 'Markdown' as format, concat(ifnull(upvote, 0), ':', ifnull(downvote, 0)) as attributes
            from z_comments

        ", $comment_Map);

        //Polls
        $poll_Map = array(
            'pollid' => 'PollID',
            'title' => 'Name',
            'tid' => 'DiscussionID',
            'votecount' => 'CountVotes',
            'uid' => 'InsertUserID',
            'timestamp' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate'))
        );

        $ex->exportTable('Poll', "

            select *
            from :_poll p left join :_poll_settings ps
            on ps._key like concat(p._key, ':', '%')

        ", $poll_Map);

        $pollOption_Map = array(
            '_num' => 'PollOptionID',
            '_key' => array('Column' => 'PollID', 'Filter' => array($this, 'idFromKey')),
            'title' => 'Body',
            'sort' => 'Sort',
            'votecount' => array('Column' => 'CountVotes', 'Filter' => array($this, 'makeNullZero')),
            'format' => 'Format'
        );

        $ex->exportTable('PollOption', "

            select _num, _key, title, id+1 as sort, votecount, 'Html' as format
            from :_poll_options
            where title is not null

        ", $pollOption_Map);

        $pollVote_Map = array(
            'userid' => 'UserID',
            'poll_option_id' => 'PollOptionID'
        );

        $ex->exportTable('PollVote', "

            select povm.members as userid, po._num as poll_option_id
            from :_poll_options_votes__members povm
            left join :_poll_options_votes pov
            on povm._parentid = pov._id
            left join :_poll_options po
            on pov._key like concat(po._key, ':', '%')
            where po.title is not null

        ", $pollVote_Map);

        //Tags
        if (!$ex->indexExists('z_idx_topic_key', ':_topic')) {
            $ex->query("create index z_idx_topic_key on :_topic (_key);");
        }

        $tag_Map = array(
            'slug' => array('Column' => 'Name', 'Filter' => array($this, 'nameToSlug')),
            'fullname' => 'FullName',
            'count' => 'CountDiscussions',
            'tagid' => 'TagID',
            'cid' => 'CategoryID',
            'type' => 'Type',
            'timestamp' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate')),
            'uid' => 'InsertUserID'
        );

        $now = time();

        $ex->query("set @rownr=1000;");

        $ex->exportTable('Tag', "

            select @rownr:=@rownr+1 as tagid, members as fullname, members as slug, '' as type, count, timestamp, uid, cid
            from (
                select members, count(*) as count, _parentid
                from :_topic_tags__members
                group by members
            ) as tags
            join :_topic_tags tt
            on tt._id = _parentid
            left join :_topic t
            on substring(tt._key, 1, length(tt._key) - 5) = t._key

        ", $tag_Map);

        $tagDiscussion_Map = array(
            'tagid' => 'TagID',
            'tid' => 'DiscussionID',
            'cid' => 'CategoryID',
            'timestamp' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate'))
        );

        $ex->query("set @rownr=1000;");

        $ex->exportTable('TagDiscussion', "

            select tagid, cid, tid, timestamp
            from :_topic_tags__members two
            join (
                select @rownr:=@rownr+1 as tagid, members as fullname, members as slug, count
                from (
                    select members, count(*) as count
                    from :_topic_tags__members
                    group by members
                ) as tags
            ) as tagids
            on two.members = tagids.fullname
            join :_topic_tags tt
            on tt._id = _parentid
            left join :_topic t
            on substring(tt._key, 1, length(tt._key) - 5) = t._key

        ", $tagDiscussion_Map);

        //Conversations
        if (!$ex->indexExists('z_idx_message_key', ':_message')) {
            $ex->query("create index z_idx_message_key on :_message(_key);");
        }
        $ex->query("drop table if exists z_pmto;");
        $ex->query("

            create table z_pmto (
                pmid int unsigned,
                userid int,
                groupid int,
                primary key(pmid, userid)
            );

        ");

        $ex->query("

            insert ignore z_pmto (
                pmid,
                userid
            )
            select substring_index(_key, ':', -1), fromuid
            from :_message;

        ");

        $ex->query("

            insert ignore z_pmto (
                pmid,
                userid
            )
            select substring_index(_key, ':', -1), touid
            from :_message;

        ");

        $ex->query("drop table if exists z_pmto2;");
        $ex->query("

            create table z_pmto2 (
                pmid int unsigned,
                userids varchar(250),
                groupid int unsigned,
                primary key (pmid)
            );

        ");

        $ex->query("

            replace z_pmto2 (
                pmid,
                userids
            )
            select pmid, group_concat(userid order by userid)
            from z_pmto
            group by pmid;

        ");

        $ex->query("drop table if exists z_pmgroup;");
        $ex->query("

            create table z_pmgroup (
                userids varchar(250),
                groupid varchar(255),
                firstmessageid int,
                lastmessageid int,
                countmessages int,
                primary key (userids, groupid)
            );

        ");

        $ex->query("

            insert z_pmgroup
            select userids, concat('message:', min(pmid)), min(pmid), max(pmid), count(*)
            from z_pmto2
            group by userids;

        ");

        $ex->query("

            update z_pmto2 as p
            left join z_pmgroup g
            on p.userids = g.userids
            set p.groupid = g.firstmessageid;

        ");

        $ex->query("

            update z_pmto as p
            left join z_pmto2 p2
            on p.pmid = p2.pmid
            set p.groupid = p2.groupid;

        ");

        $ex->query("create index z_idx_pmto_cid on z_pmto(groupid);");
        $ex->query("create index z_idx_pmgroup_cid on z_pmgroup(firstmessageid);");

        $conversation_Map = array(
            'conversationid' => 'ConversationID',
            'firstmessageid' => 'FirstMessageID',
            'lastmessageid' => 'LastMessageID',
            'countparticipants' => 'CountParticipants',
            'countmessages' => 'CountMessages'
        );

        $ex->exportTable('Conversation', "

            select *, firstmessageid as conversationid, 2 as countparticipants
            from z_pmgroup
            left join :_message
            on groupid = _key;

        ", $conversation_Map);


        $conversationMessage_Map = array(
            'messageid' => 'MessageID',
            'conversationid' => 'ConversationID',
            'content' => 'Body',
            'format' => 'Format',
            'fromuid' => 'InsertUserID',
            'timestamp' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate'))
        );

        $ex->exportTable('ConversationMessage', "

            select groupid as conversationid, pmid as messageid, content, 'Text' as format, fromuid, timestamp
            from z_pmto2
            left join :_message
            on concat('message:', pmid) = _key

        ", $conversationMessage_Map);

        $userConversationMap = array(
            'conversationid' => 'ConversationID',
            'userid' => 'UserID',
            'lastmessageid' => 'LastMessageID'
        );

        $ex->exportTable('UserConversation', "

            select p.groupid as conversationid, userid, lastmessageid
            from z_pmto p
            left join z_pmgroup
            on firstmessageid = p.groupid;

        ", $userConversationMap);

        //Bookmarks (watch)
        $userDiscussion_Map = array(
            'members' => 'UserID',
            '_key' => array('Column' => 'DiscussionID', 'Filter' => array($this, 'idFromKey')),
            'bookmarked' => 'Bookmarked'
        );

        $ex->exportTable('UserDiscussion', "
            select members, _key, 1 as bookmarked
            from :_tid_followers__members
            left join :_tid_followers
            on _parentid = _id
        ", $userDiscussion_Map);

        //Reactions
        if (!$ex->indexExists('z_idx_topic_mainpid', ':_topic')) {
            $ex->query("create index z_idx_topic_mainpid on :_topic(mainPid);");
        }
        if (!$ex->indexExists('z_idx_uid_downvote', ':_uid_downvote')) {
            $ex->query("create index z_idx_uid_downvote on :_uid_downvote(value);");
        }
        if (!$ex->indexExists('z_idx_uid_upvote', ':_uid_upvote')) {
            $ex->query("create index z_idx_uid_upvote on :_uid_upvote(value);");
        }

        $userTag_Map = array(
            'tagid' => 'TagID',
            'recordtype' => 'RecordType',
            '_key' => array('Column' => 'UserID', 'Filter' => array($this, 'idFromKey')),
            'value' => 'RecordID',
            'score' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate')),
            'total' => 'Total'
        );

        $ex->exportTable('UserTag', "

            select 11 as tagid, 'Discussion' as recordtype, u._key, u.value, score, total
            from :_uid_upvote u
            left join z_discussionids t
            on u.value = t.tid
            left join z_reactiontotalsupvote r
            on  r.value = u.value
            where u._key != 'uid:NaN:upvote'
            and t.tid is not null

            union

            select 11 as tagid, 'Comment' as recordtype, u._key, u.value, score, total
            from :_uid_upvote u
            left join z_discussionids t
            on u.value = t.tid
            left join z_reactiontotalsupvote r
            on  r.value = u.value
            where u._key != 'uid:NaN:upvote'
            and t.tid is null

            union

            select 10 as tagid, 'Discussion' as recordtype, u._key, u.value, score, total
            from :_uid_downvote u
            left join z_discussionids t
            on u.value = t.tid
            left join z_reactiontotalsdownvote r
            on  r.value = u.value
            where u._key != 'uid:NaN:downvote'
            and t.tid is not null

            union

            select 10 as tagid, 'Comment' as recordtype, u._key, u.value, score, total
            from :_uid_downvote u
            left join z_discussionids t
            on u.value = t.tid
            left join z_reactiontotalsdownvote r
            on  r.value = u.value
            where u._key != 'uid:NaN:downvote'
            and t.tid is null

        ", $userTag_Map);

        //TODO: Permissions

        $ex->endExport();

    }

    public function nameToSlug($name) {
        return $this->url($name);
    }

    protected $_urlTranslations = array(
        '–' => '-',
        '—' => '-',
        'À' => 'A',
        'Á' => 'A',
        'Â' => 'A',
        'Ã' => 'A',
        'Ä' => 'Ae',
        'Ä' => 'A',
        'Å' => 'A',
        'Ā' => 'A',
        'Ą' => 'A',
        'Ă' => 'A',
        'Æ' => 'Ae',
        'Ç' => 'C',
        'Ć' => 'C',
        'Č' => 'C',
        'Ĉ' => 'C',
        'Ċ' => 'C',
        'Ď' => 'D',
        'Đ' => 'D',
        'Ð' => 'D',
        'È' => 'E',
        'É' => 'E',
        'Ê' => 'E',
        'Ë' => 'E',
        'Ē' => 'E',
        'Ě' => 'E',
        'Ĕ' => 'E',
        'Ė' => 'E',
        'Ĝ' => 'G',
        'Ğ' => 'G',
        'Ġ' => 'G',
        'Ģ' => 'G',
        'Ĥ' => 'H',
        'Ħ' => 'H',
        'Ì' => 'I',
        'Í' => 'I',
        'Î' => 'I',
        'Ï' => 'I',
        'Ī' => 'I',
        'Ĩ' => 'I',
        'Ĭ' => 'I',
        'Į' => 'I',
        'İ' => 'I',
        'Ĳ' => 'IJ',
        'Ĵ' => 'J',
        'Ķ' => 'K',
        'Ł' => 'K',
        'Ľ' => 'K',
        'Ĺ' => 'K',
        'Ļ' => 'K',
        'Ŀ' => 'K',
        'Ñ' => 'N',
        'Ń' => 'N',
        'Ň' => 'N',
        'Ņ' => 'N',
        'Ŋ' => 'N',
        'Ò' => 'O',
        'Ó' => 'O',
        'Ô' => 'O',
        'Õ' => 'O',
        'Ö' => 'Oe',
        'Ö' => 'Oe',
        'Ō' => 'O',
        'Ő' => 'O',
        'Ŏ' => 'O',
        'Œ' => 'OE',
        'Ŕ' => 'R',
        'Ŗ' => 'R',
        'Ś' => 'S',
        'Š' => 'S',
        'Ş' => 'S',
        'Ŝ' => 'S',
        'Ť' => 'T',
        'Ţ' => 'T',
        'Ŧ' => 'T',
        'Ț' => 'T',
        'Ù' => 'U',
        'Ú' => 'U',
        'Û' => 'U',
        'Ü' => 'Ue',
        'Ū' => 'U',
        'Ü' => 'Ue',
        'Ů' => 'U',
        'Ű' => 'U',
        'Ŭ' => 'U',
        'Ũ' => 'U',
        'Ų' => 'U',
        'Ŵ' => 'W',
        'Ý' => 'Y',
        'Ŷ' => 'Y',
        'Ÿ' => 'Y',
        'Ź' => 'Z',
        'Ž' => 'Z',
        'Ż' => 'Z',
        'Þ' => 'T',
        'à' => 'a',
        'á' => 'a',
        'â' => 'a',
        'ã' => 'a',
        'ä' => 'ae',
        'ä' => 'ae',
        'å' => 'a',
        'ā' => 'a',
        'ą' => 'a',
        'ă' => 'a',
        'æ' => 'ae',
        'ç' => 'c',
        'ć' => 'c',
        'č' => 'c',
        'ĉ' => 'c',
        'ċ' => 'c',
        'ď' => 'd',
        'đ' => 'd',
        'ð' => 'd',
        'è' => 'e',
        'é' => 'e',
        'ê' => 'e',
        'ë' => 'e',
        'ē' => 'e',
        'ę' => 'e',
        'ě' => 'e',
        'ĕ' => 'e',
        'ė' => 'e',
        'ƒ' => 'f',
        'ĝ' => 'g',
        'ğ' => 'g',
        'ġ' => 'g',
        'ģ' => 'g',
        'ĥ' => 'h',
        'ħ' => 'h',
        'ì' => 'i',
        'í' => 'i',
        'î' => 'i',
        'ï' => 'i',
        'ī' => 'i',
        'ĩ' => 'i',
        'ĭ' => 'i',
        'į' => 'i',
        'ı' => 'i',
        'ĳ' => 'ij',
        'ĵ' => 'j',
        'ķ' => 'k',
        'ĸ' => 'k',
        'ł' => 'l',
        'ľ' => 'l',
        'ĺ' => 'l',
        'ļ' => 'l',
        'ŀ' => 'l',
        'ñ' => 'n',
        'ń' => 'n',
        'ň' => 'n',
        'ņ' => 'n',
        'ŉ' => 'n',
        'ŋ' => 'n',
        'ò' => 'o',
        'ó' => 'o',
        'ô' => 'o',
        'õ' => 'o',
        'ö' => 'oe',
        'ö' => 'oe',
        'ø' => 'o',
        'ō' => 'o',
        'ő' => 'o',
        'ŏ' => 'o',
        'œ' => 'oe',
        'ŕ' => 'r',
        'ř' => 'r',
        'ŗ' => 'r',
        'š' => 's',
        'ù' => 'u',
        'ú' => 'u',
        'û' => 'u',
        'ü' => 'ue',
        'ū' => 'u',
        'ü' => 'ue',
        'ů' => 'u',
        'ű' => 'u',
        'ŭ' => 'u',
        'ũ' => 'u',
        'ų' => 'u',
        'ŵ' => 'w',
        'ý' => 'y',
        'ÿ' => 'y',
        'ŷ' => 'y',
        'ž' => 'z',
        'ż' => 'z',
        'ź' => 'z',
        'þ' => 't',
        'ß' => 'ss',
        'ſ' => 'ss',
        'А' => 'A',
        'Б' => 'B',
        'В' => 'V',
        'Г' => 'G',
        'Д' => 'D',
        'Е' => 'E',
        'Ё' => 'YO',
        'Ж' => 'ZH',
        'З' => 'Z',
        'Й' => 'Y',
        'К' => 'K',
        'Л' => 'L',
        'М' => 'M',
        'Н' => 'N',
        'О' => 'O',
        'П' => 'P',
        'Р' => 'R',
        'С' => 'S',
        'ș' => 's',
        'ț' => 't',
        'Ț' => 'T',
        'Т' => 'T',
        'У' => 'U',
        'Ф' => 'F',
        'Х' => 'H',
        'Ц' => 'C',
        'Ч' => 'CH',
        'Ш' => 'SH',
        'Щ' => 'SCH',
        'Ъ' => '',
        'Ы' => 'Y',
        'Ь' => '',
        'Э' => 'E',
        'Ю' => 'YU',
        'Я' => 'YA',
        'а' => 'a',
        'б' => 'b',
        'в' => 'v',
        'г' => 'g',
        'д' => 'd',
        'е' => 'e',
        'ё' => 'yo',
        'ж' => 'zh',
        'з' => 'z',
        'и' => 'i',
        'й' => 'y',
        'к' => 'k',
        'л' => 'l',
        'м' => 'm',
        'н' => 'n',
        'о' => 'o',
        'п' => 'p',
        'р' => 'r',
        'с' => 's',
        'т' => 't',
        'у' => 'u',
        'ф' => 'f',
        'х' => 'h',
        'ц' => 'c',
        'ч' => 'ch',
        'ш' => 'sh',
        'щ' => 'sch',
        'ъ' => '',
        'ы' => 'y',
        'ь' => '',
        'э' => 'e',
        'ю' => 'yu',
        'я' => 'ya'
    );

    public function url($mixed) {

        // Preliminary decoding
        $mixed = strip_tags(html_entity_decode($mixed, ENT_COMPAT, 'UTF-8'));
        $mixed = strtr($mixed, $this->_urlTranslations);
        $mixed = preg_replace('`[\']`', '', $mixed);

        // Test for Unicode PCRE support
        // On non-UTF8 systems this will result in a blank string.
        $unicodeSupport = (preg_replace('`[\pP]`u', '', 'P') != '');

        // Convert punctuation, symbols, and spaces to hyphens
        if ($unicodeSupport) {
            $mixed = preg_replace('`[\pP\pS\s]`u', '-', $mixed);
        } else {
            $mixed = preg_replace('`[\s_[^\w\d]]`', '-', $mixed);
        }

        // Lowercase, no trailing or repeat hyphens
        $mixed = preg_replace('`-+`', '-', strtolower($mixed));
        $mixed = trim($mixed, '-');

        return rawurlencode($mixed);
    }

    public function tsToDate($time) {
        if (!$time) {
            return null;
        }

        return gmdate('Y-m-d H:i:s', $time / 1000);
    }

    public function removeNumId($slug) {
        $regex = '/(\d*)\//';
        $newslug = preg_replace($regex, '', $slug);
    }

    public function roleNameFromKey($key) {
        $regex = '/\w*:([\w|\s|-]*):/';
        preg_match($regex, $key, $matches);

        return $matches[1];
    }

    public function idFromKey($key) {
        $regex = '/\w*:(\d*):/';
        preg_match($regex, $key, $matches);

        return $matches[1];
    }

    public function makeNullZero($value) {
        if (!$value) {
            return 0;
        }

        return $value;
    }

    public function isPoll($value) {
        if ($value) {
            return 'poll';
        }

        return null;
    }

    public function serializeReactions($reactions) {
        if ($reactions == '0:0') {
            return null;
        }
        $reactionArray = explode(':', $reactions);
        $arraynum = 1;
        if ($reactionArray[0] > 0 && $reactionArray[1] > 0) {
            $arraynum = 2;
        }
        $attributes = 'a:1:{s:5:"React";a:' . $arraynum . ':{';
        if ($reactionArray[0] > 0) {
            $attributes .= 's:2:"Up";s:' . strlen($reactionArray[0]) . ':"' . $reactionArray[0] . '";';
        }
        if ($reactionArray[1] > 0) {
            $attributes .= 's:4:"Down";s:' . strlen($reactionArray[1]) . ':"' . $reactionArray[1] . '";';
        }
        $attributes .= '}}';

        return $attributes;
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * phpBB exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['phpbb2'] = array('name' => 'phpBB 2', 'prefix' => 'phpbb_');
$supported['phpbb2']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'PrivateMessages' => 1,
    'Passwords' => 1,
);

class PhpBB2 extends ExportController {

    /** @var array Required tables => columns */
    protected $sourceTables = array(
        'users' => array(
            'user_id',
            'username',
            'user_password',
            'user_email',
            'user_timezone',
            'user_posts',
            'user_regdate',
            'user_lastvisit'
        ),
        'groups' => array('group_id', 'group_name', 'group_description'),
        'user_group' => array('user_id', 'group_id'),
        'forums' => array('forum_id', 'forum_name', 'forum_desc', 'forum_order'),
        'topics' => array(
            'topic_id',
            'forum_id',
            'topic_poster',
            'topic_title',
            'topic_views',
            'topic_first_post_id',
            'topic_status',
            'topic_type',
            'topic_time'
        ),
        'posts' => array('post_id', 'topic_id', 'poster_id', 'post_time', 'post_edit_time'),
        'posts_text' => array('post_id', 'post_text'),
        'privmsgs' => array(
            'privmsgs_id',
            'privmsgs_subject',
            'privmsgs_from_userid',
            'privmsgs_to_userid',
            'privmsgs_date'
        ),
        'privmsgs_text' => array('privmsgs_text_id', 'privmsgs_bbcode_uid', 'privmsgs_text')
    );

    /**
     * Forum-specific export format.
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('posts_text');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->sourcePrefix = 'phpbb_';

        // Begin
        $ex->beginExport('', 'phpBB 2.*', array('HashMethod' => 'phpBB'));

        // Users
        $user_Map = array(
            'user_id' => 'UserID',
            'username' => 'Name',
            'user_password' => 'Password',
            'user_email' => 'Email',
            'user_timezone' => 'HourOffset',
            'user_posts' => array('Column' => 'CountComments', 'Type' => 'int')
        );
        $ex->exportTable('User', "select *,
            FROM_UNIXTIME(nullif(user_regdate, 0)) as DateFirstVisit,
            FROM_UNIXTIME(nullif(user_lastvisit, 0)) as DateLastActive,
            FROM_UNIXTIME(nullif(user_regdate, 0)) as DateInserted
         from :_users", $user_Map);  // ":_" will be replace by database prefix


        // Roles
        $role_Map = array(
            'group_id' => 'RoleID',
            'group_name' => 'Name',
            'group_description' => 'Description'
        );
        // Skip single-user groups
        $ex->exportTable('Role', 'select * from :_groups where group_single_user = 0', $role_Map);


        // UserRoles
        $userRole_Map = array(
            'user_id' => 'UserID',
            'group_id' => 'RoleID'
        );
        // Skip pending memberships
        $ex->exportTable('UserRole', '
            select
                user_id,
                group_id
            from :_user_group
            where user_pending = 0
        ;', $userRole_Map);

        // Categories
        $category_Map = array(
            'id' => 'CategoryID',
            'cat_title' => 'Name',
            'description' => 'Description',
            'parentid' => 'ParentCategoryID'
        );
        $ex->exportTable('Category',
            "select
  c.cat_id * 1000 as id,
  c.cat_title,
  c.cat_order * 1000 as Sort,
  null as parentid,
  '' as description
from :_categories c

union all

select
  f.forum_id,
  f.forum_name,
  c.cat_order * 1000 + f.forum_order,
  c.cat_id * 1000 as parentid,
  f.forum_desc
from :_forums f
left join :_categories c
  on f.cat_id = c.cat_id", $category_Map);

        // Discussions
        $discussion_Map = array(
            'topic_id' => 'DiscussionID',
            'forum_id' => 'CategoryID',
            'topic_poster' => 'InsertUserID',
            'topic_title' => 'Name',
            'Format' => 'Format',
            'topic_views' => 'CountViews'
        );
        $ex->exportTable('Discussion', "select t.*,
        'BBCode' as Format,
         case t.topic_status when 1 then 1 else 0 end as Closed,
         case t.topic_type when 1 then 1 else 0 end as Announce,
         FROM_UNIXTIME(t.topic_time) as DateInserted
        from :_topics t",
            $discussion_Map);

        // Comments
        $comment_Map = array(
            'post_id' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'post_text' => array('Column' => 'Body', 'Filter' => array($this, 'removeBBCodeUIDs')),
            'Format' => 'Format',
            'poster_id' => 'InsertUserID'
        );
        $ex->exportTable('Comment', "select p.*, pt.post_text, pt.bbcode_uid,
        'BBCode' as Format,
         FROM_UNIXTIME(p.post_time) as DateInserted,
         FROM_UNIXTIME(nullif(p.post_edit_time,0)) as DateUpdated
         from :_posts p inner join :_posts_text pt on p.post_id = pt.post_id",
            $comment_Map);

        // Conversations tables.
        $ex->query("drop table if exists z_pmto;");

        $ex->query("create table z_pmto (
id int unsigned,
userid int unsigned,
primary key(id, userid));");

        $ex->query("insert ignore z_pmto (id, userid)
select privmsgs_id, privmsgs_from_userid
from :_privmsgs;");

        $ex->query("insert ignore z_pmto (id, userid)
select privmsgs_id, privmsgs_to_userid
from :_privmsgs;");

        $ex->query("drop table if exists z_pmto2;");

        $ex->query("create table z_pmto2 (
  id int unsigned,
  userids varchar(250),
  primary key (id)
);");

        $ex->query("insert ignore z_pmto2 (id, userids)
select
  id,
  group_concat(userid order by userid)
from z_pmto
group by id;");

        $ex->query("drop table if exists z_pm;");

        $ex->query("create table z_pm (
  id int unsigned,
  subject varchar(255),
  subject2 varchar(255),
  userids varchar(250),
  groupid int unsigned
);");

        $ex->query("insert z_pm (
  id,
  subject,
  subject2,
  userids
)
select
  pm.privmsgs_id,
  pm.privmsgs_subject,
  case when pm.privmsgs_subject like 'Re: %' then trim(substring(pm.privmsgs_subject, 4)) else pm.privmsgs_subject end as subject2,
  t.userids
from :_privmsgs pm
join z_pmto2 t
  on t.id = pm.privmsgs_id;");

        $ex->query("create index z_idx_pm on z_pm (id);");

        $ex->query("drop table if exists z_pmgroup;");

        $ex->query("create table z_pmgroup (
  groupid int unsigned,
  subject varchar(255),
  userids varchar(250)
);");

        $ex->query("insert z_pmgroup (
  groupid,
  subject,
  userids
)
select
  min(pm.id),
  pm.subject2,
  pm.userids
from z_pm pm
group by pm.subject2, pm.userids;");

        $ex->query("create index z_idx_pmgroup on z_pmgroup (subject, userids);");
        $ex->query("create index z_idx_pmgroup2 on z_pmgroup (groupid);");

        $ex->query("update z_pm pm
join z_pmgroup g
  on pm.subject2 = g.subject and pm.userids = g.userids
set pm.groupid = g.groupid;");

        // Conversations.
        $conversation_Map = array(
            'privmsgs_id' => 'ConversationID',
            'privmsgs_from_userid' => 'InsertUserID',
            'RealSubject' => array(
                'Column' => 'Subject',
                'Type' => 'varchar(250)',
                'Filter' => array('Phpbb2', 'EntityDecode')
            )
        );

        $ex->exportTable('Conversation', "select
  g.subject as RealSubject,
  pm.*,
  from_unixtime(pm.privmsgs_date) as DateInserted
from :_privmsgs pm
join z_pmgroup g
  on g.groupid = pm.privmsgs_id", $conversation_Map);

        // Coversation Messages.
        $conversationMessage_Map = array(
            'privmsgs_id' => 'MessageID',
            'groupid' => 'ConversationID',
            'privmsgs_text' => array('Column' => 'Body', 'Filter' => array($this, 'removeBBCodeUIDs')),
            'privmsgs_from_userid' => 'InsertUserID'
        );
        $ex->exportTable('ConversationMessage',
            "select
         pm.*,
         txt.*,
         txt.privmsgs_bbcode_uid as bbcode_uid,
         pm2.groupid,
         'BBCode' as Format,
         FROM_UNIXTIME(pm.privmsgs_date) as DateInserted
       from :_privmsgs pm
       join :_privmsgs_text txt
         on pm.privmsgs_id = txt.privmsgs_text_id
       join z_pm pm2
         on pm.privmsgs_id = pm2.id", $conversationMessage_Map);

        // User Conversation.
        $userConversation_Map = array(
            'userid' => 'UserID',
            'groupid' => 'ConversationID'
        );
        $ex->exportTable('UserConversation',
            "select
         g.groupid,
         t.userid
       from z_pmto t
       join z_pmgroup g
         on g.groupid = t.id;", $userConversation_Map);

        $ex->query('drop table if exists z_pmto');
        $ex->query('drop table if exists z_pmto2;');
        $ex->query('drop table if exists z_pm;');
        $ex->query('drop table if exists z_pmgroup;');

        // End
        $ex->endExport();
    }

    public static function entityDecode($value) {
        return html_entity_decode($value, ENT_QUOTES, 'UTF-8');
    }

    public function removeBBCodeUIDs($value, $field, $row) {
        $UID = $row['bbcode_uid'];

        return str_replace(':' . $UID, '', $value);
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * phpBB exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['phpbb3'] = array('name' => 'phpBB 3', 'prefix' => 'phpbb_');
$supported['phpbb3']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Attachments' => 1,
    'PrivateMessages' => 1,
    'Permissions' => 1,
    'Bookmarks' => 1,
    'Signatures' => 1,
    'Polls' => 1,
    'Passwords' => 1,
);

class PhpBB3 extends ExportController {

    /** @var array Required tables => columns */
    protected $sourceTables = array(
        'users' => array(
            'user_id',
            'username',
            'user_password',
            'user_email',
            'user_timezone',
            'user_posts',
            'user_regdate',
            'user_lastvisit',
            'user_regdate'
        ),
        'groups' => array('group_id', 'group_name', 'group_desc'),
        'user_group' => array('user_id', 'group_id'),
        'forums' => array('forum_id', 'forum_name', 'forum_desc', 'left_id', 'parent_id'),
        'topics' => array(
            'topic_id',
            'forum_id',
            'topic_poster',
            'topic_title',
            'topic_views',
            'topic_first_post_id',
            'topic_status',
            'topic_type',
            'topic_time',
            'topic_last_post_time',
            'topic_last_post_time'
        ),
        'posts' => array(
            'post_id',
            'topic_id',
            'post_text',
            'poster_id',
            'post_edit_user',
            'post_time',
            'post_edit_time'
        ),
        'bookmarks' => array('user_id', 'topic_id')
    );

    /**
     * Forum-specific export format.
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('posts');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->sourcePrefix = 'phpbb_';


        // Begin
        $ex->beginExport('', 'phpBB 3.*', array('HashMethod' => 'phpBB'));

        // Users.

        // Grab the avatar salt.
        $px = $ex->getValue("select config_value from :_config where config_name = 'avatar_salt'", '');
        $cdn = $this->param('cdn', '');

        $user_Map = array(
            'user_id' => 'UserID',
            'username' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'user_password' => 'Password',
            'user_email' => 'Email',
            'user_timezone' => 'HourOffset',
            'user_posts' => array('Column' => 'CountComments', 'Type' => 'int'),
            'photo' => 'Photo',
            'user_rank' => 'RankID',
            'user_ip' => 'LastIPAddress'
        );
        $ex->exportTable('User', "select *,
            case user_avatar_type
               when 1 then concat('$cdn', 'phpbb/', '$px', '_', user_id, substr(user_avatar from locate('.', user_avatar)))
               when 'avatar.driver.upload' then concat('$cdn', 'phpbb/', '$px', '_', user_id, substr(user_avatar from locate('.', user_avatar)))
               when 2 then user_avatar
               else null end as photo,
            FROM_UNIXTIME(nullif(user_regdate, 0)) as DateFirstVisit,
            FROM_UNIXTIME(nullif(user_lastvisit, 0)) as DateLastActive,
            FROM_UNIXTIME(nullif(user_regdate, 0)) as DateInserted,
            ban_userid is not null as Banned
         from :_users
            left join :_banlist bl ON (ban_userid = user_id)
         ", $user_Map);  // ":_" will be replace by database prefix

        // Roles
        $role_Map = array(
            'group_id' => 'RoleID',
            'group_name' => 'Name',
            'group_desc' => 'Description'
        );
        $ex->exportTable('Role', 'select * from :_groups', $role_Map);

        $this->exportUserNotes();

        // Ranks.
        $rank_Map = array(
            'rank_id' => 'RankID',
            'level' => array(
                'Column' => 'Level',
                'Filter' => function ($value) {
                    static $level = 0;
                    $level++;

                    return $level;
                }
            ),
            'rank_title' => 'Name',
            'title2' => 'Label',
            'rank_min' => array(
                'Column' => 'Attributes',
                'Filter' => function ($value, $field, $row) {
                    $result = array();

                    if ($row['rank_min']) {
                        $result['Criteria']['CountPosts'] = $row['rank_min'];
                    }

                    if ($row['rank_special']) {
                        $result['Criteria']['Manual'] = true;
                    }

                    return serialize($result);
                }
            )
        );
        $ex->exportTable('Rank', "
             select
                r.*,
                r.rank_title as title2,
                0 as level
             from :_ranks r
             order by
                rank_special,
                rank_min
        ;", $rank_Map);

        // Permissions.
        $ex->exportTable('Permission', "
            select
                group_id as RoleID,
                case
                    when group_name like '%Guest%' or group_name like 'BOTS' then 'View'
                    when group_name like '%Mod%' then 'View,Garden.SignIn.Allow,Garden.Profiles.Edit,Garden.Settings.View,Vanilla.Discussions.Add,Vanilla.Comments.Add,Garden.Moderation.Manage'
                    when group_name like '%Admin%' then 'All'
                    else 'View,Garden.SignIn.Allow,Garden.Profiles.Edit,Vanilla.Discussions.Add,Vanilla.Comments.Add'
                end as _Permissions
            from :_groups
        ");

        // UserRoles
        $userRole_Map = array(
            'user_id' => 'UserID',
            'group_id' => 'RoleID'
        );
        $ex->exportTable('UserRole', '
            select
                user_id,
                group_id
            from :_users

            union

            select
                user_id,
                group_id
            from :_user_group
         ', $userRole_Map);


        // Signatutes.
        $userMeta_Map = array(
            'user_id' => 'UserID',
            'name' => 'Name',
            'user_sig' => array('Column' => 'Value', 'Filter' => array($this, 'removeBBCodeUIDs'))
        );
        $ex->exportTable('UserMeta', "
            select
                user_id,
                'Plugin.Signatures.Sig' as name,
                user_sig,
                user_sig_bbcode_uid as bbcode_uid
            from :_users
            where length(user_sig) > 1

            union

            select
                user_id,
                'Plugin.Signatures.Format',
                'BBCode',
                null
            from :_users
            where length(user_sig) > 1
         ", $userMeta_Map);

        // Categories
        $category_Map = array(
            'forum_id' => 'CategoryID',
            'forum_name' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'forum_desc' => 'Description',
            'left_id' => 'Sort'
        );
        $ex->exportTable('Category', "
            select
                *,
                nullif(parent_id,0) as ParentCategoryID
            from :_forums
        ", $category_Map);

        // Discussions
        $discussion_Map = array(
            'topic_id' => 'DiscussionID',
            'forum_id' => 'CategoryID',
            'topic_poster' => 'InsertUserID',
            'topic_title' => 'Name',
            'Format' => 'Format',
            'topic_views' => 'CountViews',
            'topic_first_post_id' => array('Column' => 'FirstCommentID', 'Type' => 'int'),
            'type' => 'Type'
        );
        $ex->exportTable('Discussion', "
            select t.*,
                'BBCode' as Format,
                case t.topic_status when 1 then 1 else 0 end as Closed,
                case t.topic_type when 1 then 1 else 0 end as Announce,
                case when t.poll_start > 0 then 'poll' else null end as type,
                FROM_UNIXTIME(t.topic_time) as DateInserted,
                FROM_UNIXTIME(t.topic_last_post_time) as DateUpdated,
                FROM_UNIXTIME(t.topic_last_post_time) as DateLastComment
            from :_topics t
         ", $discussion_Map);

        // Comments
        $comment_Map = array(
            'post_id' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'post_text' => array('Column' => 'Body', 'Filter' => array($this, 'removeBBCodeUIDs')),
            'Format' => 'Format',
            'poster_id' => 'InsertUserID',
            'poster_ip' => array('Column' => 'InsertIPAddress', 'Filter' => 'forceIP4'),
            'post_edit_user' => 'UpdateUserID'
        );
        $ex->exportTable('Comment', "
            select
                p.*,
                'BBCode' as Format,
                FROM_UNIXTIME(p.post_time) as DateInserted,
                FROM_UNIXTIME(nullif(p.post_edit_time,0)) as DateUpdated
            from :_posts p
        ", $comment_Map);

        // UserDiscussion
        $userDiscussion_Map = array(
            'user_id' => 'UserID',
            'topic_id' => 'DiscussionID'
        );
        $ex->exportTable('UserDiscussion', "
            select
                b.*,
                1 as Bookmarked
            from :_bookmarks b
        ", $userDiscussion_Map);

        // Conversations tables.
        $ex->query("drop table if exists z_pmto;");

        $ex->query("
            create table z_pmto(
                id int unsigned,
                userid int unsigned,
                primary key(id, userid)
            );
        ");

        $ex->query("
            insert ignore into z_pmto(id, userid)
                select
                    msg_id,
                    author_id
                from :_privmsgs
        ");

        $ex->query("
            insert ignore into z_pmto(id, userid)
                select
                    msg_id,
                    user_id
                from :_privmsgs_to;
        ");

        $ex->query("
            insert ignore into z_pmto(id, userid)
                select
                    msg_id,
                    author_id
                from :_privmsgs_to
        ");

        $ex->query("drop table if exists z_pmto2;");

        $ex->query("
            create table z_pmto2 (
                id int unsigned,
                userids varchar(250),
                primary key (id)
            );
        ");

        $ex->query("
            insert ignore into z_pmto2(id, userids)
                select
                    id,
                    group_concat(userid order by userid)
                from z_pmto
                group by id;
        ");

        $ex->query("drop table if exists z_pm;");

        $ex->query("
            create table z_pm(
                id int unsigned,
                subject varchar(255),
                subject2 varchar(255),
                userids varchar(250),
                groupid int unsigned
            );
        ");

        $ex->query("
            insert into z_pm(id, subject, subject2, userids)
                select
                    pm.msg_id,
                    pm.message_subject,
                    case
                        when pm.message_subject like 'Re: %' then trim(substring(pm.message_subject, 4))
                        else pm.message_subject
                    end as subject2,
                    t.userids
                from :_privmsgs pm
                    join z_pmto2 t on t.id = pm.msg_id;
        ");

        $ex->query("create index z_idx_pm on z_pm(id);");

        $ex->query("drop table if exists z_pmgroup;");

        $ex->query("
            create table z_pmgroup(
                groupid int unsigned,
                subject varchar(255),
                userids varchar(250)
            );
        ");

        $ex->query("
            insert into z_pmgroup(groupid, subject, userids)
                select
                    min(pm.id),
                    pm.subject2,
                    pm.userids
                from z_pm pm
                group by
                    pm.subject2, pm.userids;
        ");

        $ex->query("create index z_idx_pmgroup on z_pmgroup (subject, userids);");
        $ex->query("create index z_idx_pmgroup2 on z_pmgroup (groupid);");

        $ex->query("
            update z_pm pm
                join z_pmgroup g on pm.subject2 = g.subject
                    and pm.userids = g.userids
            set pm.groupid = g.groupid;
        ");

        // Polls.
        $poll_Map = array(
            'poll_id' => 'PollID',
            'poll_title' => 'Name',
            'topic_id' => 'DiscussionID',
            'topic_time' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'topic_poster' => 'InsertUserID',
            'anonymous' => 'Anonymous'
        );
        $ex->exportTable('Poll', "
            select distinct
                t.*,
                t.topic_id as poll_id,
                1 as anonymous
            from :_poll_options po
                join :_topics t on po.topic_id = t.topic_id
        ", $poll_Map);

        $pollOption_Map = array(
            'id' => 'PollOptionID',
            'poll_option_id' => 'Sort',
            'topic_id' => 'PollID',
            'poll_option_text' => 'Body',
            'format' => 'Format',
            'poll_option_total' => 'CountVotes',
            'topic_time' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'topic_poster' => 'InsertUserID'
        );
        $ex->exportTable('PollOption', "
            select
                po.*,
                po.poll_option_id * 1000000 + po.topic_id as id,
                'Html' as format,
                t.topic_time,
                t.topic_poster
            from :_poll_options po
                join :_topics t on po.topic_id = t.topic_id
        ", $pollOption_Map);

        $pollVote_Map = array(
            'vote_user_id' => 'UserID',
            'id' => 'PollOptionID'
        );
        $ex->exportTable('PollVote', "
            select
                v.*,
                v.poll_option_id * 1000000 + v.topic_id as id
            from :_poll_votes v
        ", $pollVote_Map);

        // Conversations.
        $conversation_Map = array(
            'msg_id' => 'ConversationID',
            'author_id' => 'InsertUserID',
            'RealSubject' => array(
                'Column' => 'Subject',
                'Type' => 'varchar(250)',
                'Filter' => array('Phpbb2', 'EntityDecode')
            )
        );

        $ex->exportTable('Conversation', "
            select
                g.subject as RealSubject,
                pm.*,
                from_unixtime(pm.message_time) as DateInserted
            from :_privmsgs pm
                join z_pmgroup g on g.groupid = pm.msg_id
        ", $conversation_Map);

        // Coversation Messages.
        $conversationMessage_Map = array(
            'msg_id' => 'MessageID',
            'groupid' => 'ConversationID',
            'message_text' => array('Column' => 'Body', 'Filter' => array($this, 'removeBBCodeUIDs')),
            'author_id' => 'InsertUserID'
        );
        $ex->exportTable('ConversationMessage', "
            select
                pm.*,
                pm2.groupid,
                'BBCode' as Format,
                FROM_UNIXTIME(pm.message_time) as DateInserted
            from :_privmsgs pm
                join z_pm pm2 on pm.msg_id = pm2.id
        ", $conversationMessage_Map);

        // User Conversation.
        $userConversation_Map = array(
            'userid' => 'UserID',
            'groupid' => 'ConversationID'
        );
        $ex->exportTable('UserConversation', "
            select
                g.groupid,
                t.userid
            from z_pmto t
                join z_pmgroup g on g.groupid = t.id;
        ", $userConversation_Map);

        $ex->query('drop table if exists z_pmto');
        $ex->query('drop table if exists z_pmto2;');
        $ex->query('drop table if exists z_pm;');
        $ex->query('drop table if exists z_pmgroup;');

        // Media.
        $cdn = $this->param('cdn', '');
        $media_Map = array(
            'attach_id' => 'MediaID',
            'real_filename' => 'Name',
            'thumb_path' => array('Column' => 'ThumbPath', 'Filter' => array($this, 'filterThumbnailData')),
            'thumb_width' => array('Column' => 'ThumbWidth', 'Filter' => array($this, 'filterThumbnailData')),
            'post_id' => 'InsertUserID',
            'mimetype' => 'Type',
            'filesize' => 'Size',
        );
        $ex->exportTable('Media', "
            select
                case when a.post_msg_id = t.topic_first_post_id then 'discussion' else 'comment' end as ForeignTable,
                case when a.post_msg_id = t.topic_first_post_id then a.topic_id else a.post_msg_id end as ForeignID,
                concat('$cdn','FileUpload/', a.physical_filename, '.', a.extension) as Path,
                concat('$cdn','FileUpload/', a.physical_filename, '.', a.extension) as thumb_path,
                128 as thumb_width,
                FROM_UNIXTIME(a.filetime) as DateInserted,
                a.*
            from :_attachments a
                join :_topics t on a.topic_id = t.topic_id
        ", $media_Map);

        $this->exportBanList();

        // End
        $ex->endExport();
    }

    protected function exportUserNotes() {
        $ex = $this->ex;

        $corruptedRecords = [];

        // User notes.
        $userNote_Map = array(
            'log_id' => array('Column' => 'UserNoteID', 'Type' => 'int'),
            'user_id' => array('Column' => 'InsertUserID', 'Type' => 'int'),
            'reportee_id' => array('Column' => 'UserID', 'Type' => 'int'),
            'log_ip' => array('Column' => 'InsertIPAddress', 'Type' => 'varchar(15)'),
            'log_time' => array('Column' => 'DateInserted', 'Type' => 'datetime', 'Filter' => 'timestampToDate'),
            'log_operation' => array(
                'Column' => 'Type',
                'Type' => 'varchar(10)',
                'Filter' => function ($value) {
                    switch (strtoupper($value)) {
                        case 'LOG_USER_WARNING_BODY':
                            return 'warning';
                        default:
                            return 'note';
                    }
                }
            ),
            'format' => array('Column' => 'Format', 'Type' => 'varchar(20)'),
            'log_data' => array(
                'Column' => 'Body',
                'Type' => 'text',
                'Filter' => function ($value, $field, $row) use (&$corruptedRecords) {
                    $unserializedValue = @unserialize($value);

                    if (!$unserializedValue || !is_array($unserializedValue)) {
                        $corruptedRecords[] = $row['log_id'];
                        return '';
                    }
                    return array_pop($unserializedValue);
                }
            )
        );
        $ex->exportTable('UserNote', "
            select
                l.*,
                'Text' as format
            from :_log l
            where
                reportee_id > 0
                and log_operation in ('LOG_USER_GENERAL', 'LOG_USER_WARNING_BODY')
        ", $userNote_Map);


        if (count($corruptedRecords) > 0) {
            $ex->Comment("Corrupted records found in \"_log\" table while exporting to UserNote\n".print_r($corruptedRecords, true));
        }
    }

    /**
     * Export email and ip ban list.
     */
    public function exportBanList() {
        $ex = $this->ex;
        $ex->exportTable('Ban', "
            select
                bl.*,
                ban_id as BanID,
                if (ban_ip='', 'Email', 'IpAddress') as BanType,
                if(ban_ip='', ban_email, ban_ip) as BanValue,
                Concat('Imported ban. ', ban_give_reason) as Notes,
                NOW() as DateInserted
            from :_banlist bl
            where bl.ban_userid = 0
                and (ban_ip!='' or ban_email!='')
        ");
    }

    public function removeBBCodeUIDs($r, $field = '', $row = '') {
        if (!$r) {
            return $r;
        }

        $UID = trim($row['bbcode_uid']);
//      $UID = '2zp03s9s';
        if ($UID) {
            $r = preg_replace("`((?::[a-zA-Z])?:$UID)`", '', $r);
        }

        // Remove smilies.
        $r = preg_replace('#<!\-\- s(.*?) \-\-><img src="\{SMILIES_PATH\}\/.*? \/><!\-\- s\1 \-\->#', '\1', $r);
        // Remove links.
        $regex = '`<!-- [a-z] --><a\s+class="[^"]+"\s+href="([^"]+)">([^<]+)</a><!-- [a-z] -->`';
        $r = preg_replace($regex, '[url=$1]$2[/url]', $r);

        // Allow mailto: links w/o a class.
        $regex = '`<!-- [a-z] --><a\s+href="mailto:([^"]+)">([^<]+)</a><!-- [a-z] -->`i';
        $r = preg_replace($regex, '[url=$1]$2[/url]', $r);

        $r = str_replace(
            array('&quot;', '&#39;', '&#58;', 'Â', '&#46;', '&amp;'),
            array('"', "'", ':', '', '.', '&'),
            $r
        );

        return $r;
    }

    /**
     * Filter used by $Media_Map to replace value for ThumbPath and ThumbWidth when the file is not an image.
     *
     * @access public
     * @see ExportModel::_exportTable
     *
     * @param string $value Current value
     * @param string $field Current field
     * @param array $row Contents of the current record.
     * @return string|null Return the supplied value if the record's file is an image. Return null otherwise
     */
    public function filterThumbnailData($value, $field, $row) {
        if (strpos(strtolower($row['mimetype']), 'image/') === 0) {
            return $value;
        } else {
            return null;
        }
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * PunBB exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['punbb'] = array('name' => 'PunBB 1', 'prefix' => 'punbb_');
$supported['punbb']['CommandLine'] = array(
    'avatarpath' => array('Full path of forum avatars.', 'Sx' => '::')
);
$supported['punbb']['features'] = array(
    'Avatars' => 1,
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Attachments' => 1,
    'Permissions' => 1,
    'Tags' => 1,
    'Signatures' => 1,
    'Passwords' => 1
);

class PunBB extends ExportController {

    /** @var bool Path to avatar images */
    protected $avatarPath = false;

    /** @var string CDN path prefix */
    protected $cdn = '';

    /** @var array Required tables => columns */
    public $sourceTables = array();

    /**
     * Forum-specific export format
     *
     * @todo Project file size / export time and possibly break into multiple files
     *
     * @param ExportModel $ex
     *
     */
    protected function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('posts');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->beginExport('', 'PunBB 1.*', array('HashMethod' => 'punbb'));

        $this->cdn = $this->param('cdn', '');

        if ($avatarPath = $this->param('avatarpath', false)) {
            if (!$avatarPath = realpath($avatarPath)) {
                echo "Unable to access path to avatars: $avatarPath\n";
                exit(1);
            }

            $this->avatarPath = $avatarPath;
        }
        unset($avatarPath);

        // User.
        $user_Map = array(
            'AvatarID' => array('Column' => 'Photo', 'Filter' => array($this, 'getAvatarByID')),
            'id' => 'UserID',
            'username' => 'Name',
            'email' => 'Email',
            'timezone' => 'HourOffset',
            'registration_ip' => 'InsertIPAddress',
            'PasswordHash' => 'Password'
        );
        $ex->exportTable('User', "
         SELECT
             u.*, u.id AS AvatarID,
             concat(u.password, '$', u.salt) AS PasswordHash,
             from_unixtime(registered) AS DateInserted,
             from_unixtime(last_visit) AS DateLastActive
         FROM :_users u
         WHERE group_id <> 2", $user_Map);

        // Role.
        $role_Map = array(
            'g_id' => 'RoleID',
            'g_title' => 'Name'
        );
        $ex->exportTable('Role', "SELECT * FROM :_groups", $role_Map);

        // Permission.
        $permission_Map = array(
            'g_id' => 'RoleID',
            'g_modertor' => 'Garden.Moderation.Manage',
            'g_mod_edit_users' => 'Garden.Users.Edit',
            'g_mod_rename_users' => 'Garden.Users.Delete',
            'g_read_board' => 'Vanilla.Discussions.View',
            'g_view_users' => 'Garden.Profiles.View',
            'g_post_topics' => 'Vanilla.Discussions.Add',
            'g_post_replies' => 'Vanilla.Comments.Add',
            'g_pun_attachment_allow_download' => 'Plugins.Attachments.Download.Allow',
            'g_pun_attachment_allow_upload' => 'Plugins.Attachments.Upload.Allow',

        );
        $permission_Map = $ex->fixPermissionColumns($permission_Map);
        $ex->exportTable('Permission', "
      SELECT
         g.*,
         g_post_replies AS `Garden.SignIn.Allow`,
         g_mod_edit_users AS `Garden.Users.Add`,
         CASE WHEN g_title = 'Administrators' THEN 'All' ELSE NULL END AS _Permissions
      FROM :_groups g", $permission_Map);

        // UserRole.
        $userRole_Map = array(
            'id' => 'UserID',
            'group_id' => 'RoleID'
        );
        $ex->exportTable('UserRole',
            "SELECT
            CASE u.group_id WHEN 2 THEN 0 ELSE id END AS id,
            u.group_id
          FROM :_users u", $userRole_Map);

        // Signatures.
        $ex->exportTable('UserMeta', "
         SELECT
         id,
         'Plugin.Signatures.Sig' AS Name,
         signature
      FROM :_users u
      WHERE u.signature IS NOT NULL", array('id ' => 'UserID', 'signature' => 'Value'));


        // Category.
        $category_Map = array(
            'id' => 'CategoryID',
            'forum_name' => 'Name',
            'forum_desc' => 'Description',
            'disp_position' => 'Sort',
            'parent_id' => 'ParentCategoryID'
        );
        $ex->exportTable('Category', "
      SELECT
        id,
        forum_name,
        forum_desc,
        disp_position,
        cat_id * 1000 AS parent_id
      FROM :_forums f
      UNION

      SELECT
        id * 1000,
        cat_name,
        '',
        disp_position,
        NULL
      FROM :_categories", $category_Map);

        // Discussion.
        $discussion_Map = array(
            'id' => 'DiscussionID',
            'poster_id' => 'InsertUserID',
            'poster_ip' => 'InsertIPAddress',
            'closed' => 'Closed',
            'sticky' => 'Announce',
            'forum_id' => 'CategoryID',
            'subject' => 'Name',
            'message' => 'Body'

        );
        $ex->exportTable('Discussion', "
      SELECT t.*,
        from_unixtime(p.posted) AS DateInserted,
        p.poster_id,
        p.poster_ip,
        p.message,
        from_unixtime(p.edited) AS DateUpdated,
        eu.id AS UpdateUserID,
        'BBCode' AS Format
      FROM :_topics t
      LEFT JOIN :_posts p
        ON t.first_post_id = p.id
      LEFT JOIN :_users eu
        ON eu.username = p.edited_by", $discussion_Map);

        // Comment.
        $comment_Map = array(
            'id' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'poster_id' => 'InsertUserID',
            'poster_ip' => 'InsertIPAddress',
            'message' => 'Body'
        );
        $ex->exportTable('Comment', "
            SELECT p.*,
        'BBCode' AS Format,
        from_unixtime(p.posted) AS DateInserted,
        from_unixtime(p.edited) AS DateUpdated,
        eu.id AS UpdateUserID
      FROM :_topics t
      JOIN :_posts p
        ON t.id = p.topic_id
      LEFT JOIN :_users eu
        ON eu.username = p.edited_by
      WHERE p.id <> t.first_post_id;", $comment_Map);

        if ($ex->exists('tags')) {
            // Tag.
            $tag_Map = array(
                'id' => 'TagID',
                'tag' => 'Name'
            );
            $ex->exportTable('Tag', "SELECT * FROM :_tags", $tag_Map);

            // TagDisucssion.
            $tagDiscussionMap = array(
                'topic_id' => 'DiscussionID',
                'tag_id' => 'TagID'
            );
            $ex->exportTable('TagDiscussion', "SELECT * FROM :_topic_tags", $tagDiscussionMap);
        }

        if ($ex->exists('attach_files')) {
            // Media.
            $media_Map = array(
                'id' => 'MediaID',
                'filename' => 'Name',
                'file_mime_type' => 'Type',
                'size' => 'Size',
                'owner_id' => 'InsertUserID',
                'thumb_path' => array('Column' => 'ThumbPath', 'Filter' => array($this, 'filterThumbnailData')),
                'thumb_width' => array('Column' => 'ThumbWidth', 'Filter' => array($this, 'filterThumbnailData')),
            );
            $ex->exportTable('Media', "
                select f.*,
                    concat({$this->cdn}, 'FileUpload/', f.file_path) as Path,
                    concat({$this->cdn}, 'FileUpload/', f.file_path) as thumb_path,
                    128 as thumb_width,
                    from_unixtime(f.uploaded_at) as DateInserted,
                    case when post_id is null then 'Discussion' else 'Comment' end as ForeignTable,
                    coalesce(post_id, topic_id) as ForieignID
                from :_attach_files f
            ", $media_Map);
        }

        // End
        $ex->endExport();
    }

    public function stripMediaPath($absPath) {
        if (($pos = strpos($absPath, '/uploads/')) !== false) {
            return substr($absPath, $pos + 9);
        }

        return $absPath;
    }

    public function filterPermissions($permissions, $columnName, &$row) {
        $permissions2 = unserialize($permissions);

        foreach ($permissions2 as $name => $value) {
            if (is_null($value)) {
                $permissions2[$name] = false;
            }
        }

        if (is_array($permissions2)) {
            $row = array_merge($row, $permissions2);
            $this->ex->currentRow = $row;

            return isset($permissions2['PERMISSION_ADD_COMMENTS']) ? $permissions2['PERMISSION_ADD_COMMENTS'] : false;
        }

        return false;
    }

    public function forceBool($value) {
        if ($value) {
            return true;
        }

        return false;
    }

    /**
     * Take the user ID, avatar type value and generate a path to the avatar file.
     *
     * @param $value Row field value.
     * @param $field Name of the current field.
     * @param $row All of the current row values.
     *
     * @return null|string
     */
    public function getAvatarByID($value, $field, $row) {
        if (!$this->avatarPath) {
            return null;
        }

        switch ($row['avatar']) {
            case 1:
                $extension = 'gif';
                break;
            case 2:
                $extension = 'jpg';
                break;
            case 3:
                $extension = 'png';
                break;
            default:
                return null;
        }

        $avatarFilename = "{$this->avatarPath}/{$value}.$extension";

        if (file_exists($avatarFilename)) {
            $avatarBasename = basename($avatarFilename);

            return "{$this->cdn}punbb/avatars/$avatarBasename";
        } else {
            return null;
        }
    }

    /**
     * Filter used by $Media_Map to replace value for ThumbPath and ThumbWidth when the file is not an image.
     *
     * @access public
     * @see ExportModel::_exportTable
     *
     * @param string $value Current value
     * @param string $field Current field
     * @param array $row Contents of the current record.
     * @return string|null Return the supplied value if the record's file is an image. Return null otherwise
     */
    public function filterThumbnailData($value, $field, $row) {
        if (strpos(strtolower($row['file_mime_type']), 'image/') === 0) {
            return $value;
        } else {
            return null;
        }
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * Simple:Press exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['simplepress'] = array('name' => 'SimplePress 1', 'prefix' => 'wp_');
$supported['simplepress']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'PrivateMessages' => 1,
    'Permissions' => 1,
    'Passwords' => 1,
);

class SimplePress extends ExportController {

    /** @var array Required tables => columns */
    protected $sourceTables = array(
        'sfforums' => array(),
        'sfposts' => array(),
        'sftopics' => array(),
        'users' => array('ID', 'user_nicename', 'user_pass', 'user_email', 'user_registered')
        //'meta' => array()
    );

    /**
     * Forum-specific export format.
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {
        $ex->sourcePrefix = 'wp_';

        $characterSet = $ex->getCharacterSet('posts');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Begin
        $ex->beginExport('', 'SimplePress 1.*', array('HashMethod' => 'Vanilla'));

        // Users
        $user_Map = array(
            'user_id' => 'UserID',
            'display_name' => 'Name',
            'user_pass' => 'Password',
            'user_email' => 'Email',
            'user_registered' => 'DateInserted',
            'lastvisit' => 'DateLastActive'
        );
        $ex->exportTable('User',
            "select m.*, u.user_pass, u.user_email, u.user_registered
          from :_users u
          join :_sfmembers m
            on u.ID = m.user_id;", $user_Map);

        // Roles
        $role_Map = array(
            'usergroup_id' => 'RoleID',
            'usergroup_name' => 'Name',
            'usergroup_desc' => 'Description'
        );
        $ex->exportTable('Role',
            "select
            usergroup_id,
            usergroup_name,
            usergroup_desc
         from :_sfusergroups

         union

         select
            100,
            'Administrators',
            ''", $role_Map);

        // Permissions.
        $ex->exportTable('Permission', "select
            usergroup_id as RoleID,
case
   when usergroup_name like 'Guest%' then 'View'
   when usergroup_name like 'Member%' then 'View,Garden.SignIn.Allow,Garden.Profiles.Edit,Vanilla.Discussions.Add,Vanilla.Comments.Add'
   when usergroup_name like 'Mod%' then 'View,Garden.SignIn.Allow,Garden.Profiles.Edit,Garden.Settings.View,Vanilla.Discussions.Add,Vanilla.Comments.Add,Garden.Moderation.Manage'
end as _Permissions
         from :_sfusergroups

         union

         select 100, 'All'");

        // UserRoles
        $userRole_Map = array(
            'user_id' => 'UserID',
            'usergroup_id' => 'RoleID'
        );
        $ex->exportTable('UserRole',
            "select
            m.user_id,
            m.usergroup_id
         from :_sfmemberships m

         union

         select
            um.user_id,
            100
         from :_usermeta um
         where um.meta_key = 'wp_capabilities'
            and um.meta_value like '%PF Manage Forums%'", $userRole_Map);

        // Categories
        $category_Map = array(
            'forum_id' => 'CategoryID',
            'forum_name' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'forum_desc' => 'Description',
            'forum_seq' => 'Sort',
            'form_slug' => 'UrlCode',
            'parent_id' => 'ParentCategoryID'
        );
        $ex->exportTable('Category', "
         select
            f.forum_id,
            f.forum_name,
            f.forum_seq,
            f.forum_desc,
            lower(f.forum_slug) as forum_slug,
            case when f.parent = 0 then f.group_id + 1000 else f.parent end as parent_id
         from :_sfforums f

         union

         select
            1000 + g.group_id,
            g.group_name,
            g.group_seq,
            g.group_desc,
            null,
            null
         from :_sfgroups g", $category_Map);

        // Discussions
        $discussion_Map = array(
            'topic_id' => 'DiscussionID',
            'forum_id' => 'CategoryID',
            'user_id' => 'InsertUserID',
            'topic_name' => 'Name',
            'Format' => 'Format',
            'topic_date' => 'DateInserted',
            'topic_pinned' => 'Announce',
            'topic_slug' => array('Column' => 'Slug', 'Type' => 'varchar(200)')
        );
        $ex->exportTable('Discussion', "select t.*,
            'Html' as Format
         from :_sftopics t", $discussion_Map);

        if ($ex->exists('sftags')) {
            // Tags
            $tag_Map = array(
                'tag_id' => 'TagID',
                'tag_name' => 'Name'
            );
            $ex->exportTable('Tag', "select * from :_sftags", $tag_Map);

            if ($ex->exists('sftagmeta')) {
                $tagDiscussion_Map = array(
                    'tag_id' => 'TagID',
                    'topic_id' => 'DiscussionID'
                );
                $ex->exportTable('TagDiscussion', "select * from :_sftagmeta", $tagDiscussion_Map);
            }
        }

        // Comments
        $comment_Map = array(
            'post_id' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'post_content' => 'Body',
            'Format' => 'Format',
            'user_id' => 'InsertUserID',
            'post_date' => 'DateInserted',
            'poster_ip' => 'InsertIPAddress'
        );
        $ex->exportTable('Comment', "select p.*,
            'Html' as Format
         from :_sfposts p", $comment_Map);

        // Conversation.
        $conv_Map = array(
            'message_id' => 'ConversationID',
            'from_id' => 'InsertUserID',
            'sent_date' => 'DateInserted'
        );
        $ex->exportTable('Conversation',
            "select *
         from :_sfmessages
         where is_reply = 0", $conv_Map);

        // ConversationMessage.
        $convMessage_Map = array(
            'message_id' => 'MessageID',
            'from_id' => 'InsertUserID',
            'message' => array('Column' => 'Body')
        );
        $ex->exportTable('ConversationMessage',
            'select c.message_id as ConversationID, m.*
         from :_sfmessages c
         join :_sfmessages m
           on (m.is_reply = 0 and m.message_id = c.message_id) or (m.is_reply = 1 and c.is_reply = 0 and m.message_slug = c.message_slug and m.from_id in (c.from_id, c.to_id) and m.to_id in (c.from_id, c.to_id));',
            $convMessage_Map);

        // UserConversation
        $userConv_Map = array(
            'message_id' => 'ConversationID',
            'from_id' => 'UserID'
        );
        $ex->exportTable('UserConversation',
            'select message_id, from_id
         from :_sfmessages
         where is_reply = 0

         union

         select message_id, to_id
         from :_sfmessages
         where is_reply = 0',
            $userConv_Map);

        // End
        $ex->endExport();
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * Migration package for Simplest Forum (http://joomlacode.org/gf/project/simplestforum/)
 *
 * @copyright Vanilla Forums Inc. 2010-2014
 * @license GNU GPL2
 * @package VanillaPorter
 * @see functions.commandline.php for command line usage.
 */

$supported['simplestforum'] = array(
    'name' => 'Simplest Forum',
    'prefix' => 'jos_'
);
$supported['simplestforum']['CommandLine'] = array(
    'attachments' => array(
        'Directory of image files; If provided, use to validate images in DB and remove invalid references', 'Sx' => '::'
    )
);
$supported['simplestforum']['features'] = array(
    'Attachments' => 1,
    'Bookmarks' => 1,
    'Categories' => 1,
    'Comments' => 1,
    'Discussions' => 1,
    'Polls' => 1,
    'Ranks' => 1,
    'Roles' => 1,
    'Signatures' => 1,
    'Users' => 1
);

class Simplestforum extends ExportController {

    /**
     * Main export process.
     *
     * @param ExportModel $ex
     * @see $_Structures in ExportModel for allowed destination tables & columns.
     */
    public function forumExport($ex) {

        $cdn = $this->param('cdn', '~cf/');


        $characterSet = $ex->getCharacterSet('simplestforum_post');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }


        $ex->beginExport('', 'Simplest Forum');

        $imageDirectory = $this->param('attachments', false);

        // Validate images
        if ($imageDirectory) {
            if (!is_dir($imageDirectory)) {
                exit("Invalid attachments directory: $imageDirectory");
            }

            $images = scandir($imageDirectory);
            if (!empty($images)) {
                $imageTotal = count($images);

                $ex->comment("Verifying attachments against $imageTotal files.");

                array_walk($images, function (&$value, $key) {
                    $value =  "'" . mysql_real_escape_string($value) ."'";
                });

                $ex->query("
                    update :_simplestforum_post
                    set images = ''
                    where images != ''
                        and images not in (" . implode(',', $images) . ")");
            }
        }

        // User
        $user_Map = array();
        $ex->exportTable('User', "
            select id as UserID,  username as Name, Password, 'joomla' as HashMethod, Email
            from :_users",
            $user_Map
        );


        // Role
        $role_Map = array();
        $ex->exportTable('Role', "
            select id as RoleID, Name
            from :_core_acl_aro_groups",
            $role_Map
        );


        // UserRole
        $userRole_Map = array();
        $ex->exportTable('UserRole', "
            select id as UserID, gid as RoleID
            from :_users
            ",
            $userRole_Map);


        // Category
        $category_Map = array();
        $ex->exportTable('Category', "
            select id as CategoryID, Name, Description
            from :_simplestforum_forum",
            $category_Map);


        // Discussion
        $discussion_Map = array();
        $ex->exportTable('Discussion', "
            select id as DiscussionID, subject as Name, message as Body, forumId as CategoryID, authorId as InsertUserID,
                date as DateInserted, modified_by as UpdateUserID, modified as DateUpdated
            from :_simplestforum_post
            where published = 1 and parentId = 0",
            $discussion_Map);


        // Comment
        $comment_Map = array();
        $ex->exportTable('Comment', "
            select id as CommentID, message as Body, thread as DiscussionID, authorId as InsertUserID,
                date as DateInserted, modified_by as UpdateUserID, modified as DateUpdated
            from :_simplestforum_post
            where published = 1 and parentId != 0",
            $comment_Map
        );


        // Media
        $media_Map = array();
        $ex->exportTable('Media', "
            select images as Name, concat('$cdn', 'simplestforum/', images) as Path, authorid as InsertUserID,
                date as DateInserted, id as ForeignID, 'discussion' as ForeignTable,
                concat('$cdn', 'simplestforum/', images) as ThumbPath,
                lower(concat('image/', substr(images, instr(images, '.') + 1))) as Type
            from :_simplestforum_post
            where images > '' and parentid = 0

            union

            select images as Name, concat('$cdn', 'simplestforum/', images) as Path, authorid as InsertUserID,
                date as DateInserted, id as ForeignID, 'comment' as ForeignTable,
                concat('$cdn', 'simplestforum/', images) as ThumbPath,
                lower(concat('image/', substr(images, instr(images, '.') + 1))) as Type
            from :_simplestforum_post
            where images > '' and parentid > 0",
            $media_Map
        );


        $ex->endExport();
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/* Written by John Crenshaw for Priacta, Inc. */
/**
 * SMF exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @author John Crenshaw
 * @package VanillaPorter
 */

$supported['smf'] = array('name' => 'Simple Machines 1', 'prefix' => 'smf_'); // SMF
$supported['smf']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Attachments' => 1,
    'PrivateMessages' => 1,
    'Passwords' => 1,
);

class SMF extends ExportController {

    /** @var array Required tables => columns */
    protected $sourceTables = array(
        'boards' => array(),
        'messages' => array(),
        'personal_messages' => array(),
        'pm_recipients' => array(),
        'categories' => array('ID_CAT', 'name', 'catOrder'),
        'membergroups' => array(),
        'members' => array('ID_MEMBER', 'memberName', 'passwd', 'emailAddress', 'dateRegistered')
    );

    /**
     * Forum-specific export format.
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('messages');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Begin
        $ex->beginExport('', 'SMF 1.*', array('HashMethod' => 'Django'));

        // Users
        $user_Map = array(
            'ID_MEMBER' => 'UserID',
            'memberName' => 'Name',
            'password' => 'Password',
            'emailAddress' => 'Email',
            'DateInserted' => 'DateInserted',
            'timeOffset' => 'HourOffset',
            'posts' => 'CountComments',
            //'avatar'=>'Photo',
            'birthdate' => 'DateOfBirth',
            'DateFirstVisit' => 'DateFirstVisit',
            'DateLastActive' => 'DateLastActive',
            'DateUpdated' => 'DateUpdated'
        );
        $ex->exportTable('User', "
         select m.*,
            from_unixtime(dateRegistered) as DateInserted,
            from_unixtime(dateRegistered) as DateFirstVisit,
            from_unixtime(lastLogin) as DateLastActive,
            from_unixtime(lastLogin) as DateUpdated,
            concat('sha1$', lower(memberName), '$', passwd) as `password`,
            if(m.avatar <> '', m.avatar, concat('attachments/', a.filename)) as Photo
         from :_members m
         left join :_attachments a on a.ID_MEMBER = m.ID_MEMBER ", $user_Map);

        // Roles
        $role_Map = array(
            'ID_GROUP' => 'RoleID',
            'groupName' => 'Name'
        );
        $ex->exportTable('Role', "select * from :_membergroups", $role_Map);

        // UserRoles
        $userRole_Map = array(
            'ID_MEMBER' => 'UserID',
            'ID_GROUP' => 'RoleID'
        );
        $ex->exportTable('UserRole', "select * from :_members", $userRole_Map);

        // Categories
        $category_Map = array(
            'Name' => array('Column' => 'Name', 'Filter' => array($this, 'decodeNumericEntity')),
        );

        $ex->exportTable('Category',
            "
      select
        (`ID_CAT` + 1000000) as `CategoryID`,
        `name` as `Name`,
      '' as `Description`,
      null as `ParentCategoryID`,
        `catOrder` as `Sort`
      from :_categories

     union

      select
        b.`ID_BOARD` as `CategoryID`,

        b.`name` as `Name`,
        b.`description` as `Description`,
      (CASE WHEN b.`ID_PARENT` = 0 THEN (`ID_CAT` + 1000000) ELSE `ID_PARENT` END) as `ParentCategoryID`,
        b.`boardOrder` as `Sort`
      from :_boards b

     ", $category_Map);

        // Discussions
        $discussion_Map = array(
            'ID_TOPIC' => 'DiscussionID',
            'subject' => array('Column' => 'Name', 'Filter' => array($this, 'decodeNumericEntity')),
            //,'Filter'=>'bb2html'),
            'body' => array('Column' => 'Body'),
            //,'Filter'=>'bb2html'),
            'Format' => 'Format',
            'ID_BOARD' => 'CategoryID',
            'DateInserted' => 'DateInserted',
            'DateUpdated' => 'DateUpdated',
            'ID_MEMBER' => 'InsertUserID',
            'DateLastComment' => 'DateLastComment',
            'UpdateUserID' => 'UpdateUserID',
            'locked' => 'Closed',
            'isSticky' => 'Announce',
            'CountComments' => 'CountComments',
            'numViews' => 'CountViews',
            'LastCommentUserID' => 'LastCommentUserID',
            'ID_LAST_MSG' => 'LastCommentID'
        );
        $ex->exportTable('Discussion', "
      select t.*,
         (t.numReplies + 1) as CountComments,
         m.subject,
         m.body,
         from_unixtime(m.posterTime) as DateInserted,
         from_unixtime(m.modifiedTime) as DateUpdated,
         m.ID_MEMBER,
         from_unixtime(m_end.posterTime) AS DateLastComment,
         m_end.ID_MEMBER AS UpdateUserID,
         m_end.ID_MEMBER AS LastCommentUserID,
         'BBCode' as Format
       from :_topics t
       join :_messages as m on t.ID_FIRST_MSG = m.ID_MSG
       join :_messages as m_end on t.ID_LAST_MSG = m_end.ID_MSG

       -- where t.spam = 0 AND m.spam = 0;

       ", $discussion_Map);

        // Comments
        $comment_Map = array(
            'ID_MSG' => 'CommentID',
            'ID_TOPIC' => 'DiscussionID',
            'Format' => 'Format',
            'body' => array('Column' => 'Body'), //,'Filter'=>'bb2html'),
            'ID_MEMBER' => 'InsertUserID',
            'DateInserted' => 'DateInserted'
        );
        $ex->exportTable('Comment',
            "select m.*,
         from_unixtime(m.posterTime) AS DateInserted,
         'BBCode' as Format
       from :_messages m
       join :_topics t on m.ID_TOPIC = t.ID_TOPIC
       where m.ID_MSG <> t.ID_FIRST_MSG;
       ", $comment_Map);

        // Media
        $media_Map = array(
            'ID_ATTACH' => 'MediaID',
            'ID_MSG' => 'ForeignID',
            'size' => 'Size',
            'height' => 'ImageHeight',
            'width' => 'ImageWidth',
            'extract_mimetype' => array(
                'Column' => 'Type',
                'Filter' => function($value, $field, $row) {
                    return $this->getMimeTypeFromFileName($row['Path']);
                }
            ),
            'thumb_path' => array('Column' => 'ThumbPath', 'Filter' => array($this, 'filterThumbnailData')),
            'thumb_width' => array('Column' => 'ThumbWidth', 'Filter' => array($this, 'filterThumbnailData')),
        );
        $ex->exportTable('Media', "
            select
                a.*,
                concat('attachments/', a.filename) as Path,
                IF(b.filename is not null, concat('attachments/', b.filename), null) as thumb_path,
                null as extract_mimetype,
                b.width as thumb_width,
                if(t.ID_TOPIC is null, 'Comment', 'Discussion') as ForeignTable
            from :_attachments a
                left join :_attachments b on b.ID_ATTACH = a.ID_THUMB
                left join :_topics t on a.ID_MSG = t.ID_FIRST_MSG
            where a.attachmentType = 0
                and a.ID_MSG > 0
        ", $media_Map);

        // Conversations need a bit more conversion so execute a series of queries for that.
        $ex->query('create table :_smfpmto (
  id int,
  to_id int,
  deleted tinyint,
  primary key(id, to_id)
)');

        $ex->query('insert :_smfpmto (
  id,
  to_id,
  deleted
)
select
  ID_PM,
  ID_MEMBER_FROM,
  deletedBySender
from :_personal_messages');

        $ex->query('insert ignore :_smfpmto (
  id,
  to_id,
  deleted
)
select
  ID_PM,
  ID_MEMBER,
  deleted
from :_pm_recipients');

        $ex->query('create table :_smfpmto2 (
  id int,
  to_ids varchar(255),
  primary key(id)
)');

        $ex->query('insert :_smfpmto2 (
  id,
  to_ids
)
select
  id,
  group_concat(to_id order by to_id)
from :_smfpmto
group by id');

        $ex->query('create table :_smfpm (
  id int,
  group_id int,
  subject varchar(200),
  subject2 varchar(200),
  from_id int,
  to_ids varchar(255))');

        $ex->query('create index :_idx_smfpm2 on :_smfpm (subject2, from_id)');
        $ex->query('create index :_idx_smfpmg on :_smfpm (group_id)');

        $ex->query('insert :_smfpm (
  id,
  subject,
  subject2,
  from_id,
  to_ids
)
select
  ID_PM,
  subject,
  case when subject like \'Re: %\' then trim(substring(subject, 4)) else subject end as subject2,
  ID_MEMBER_FROM,
  to2.to_ids
from :_personal_messages pm
join :_smfpmto2 to2
  on pm.ID_PM = to2.id');

        $ex->query('create table :_smfgroups (
  id int primary key,
  subject2 varchar(200),
  to_ids varchar(255)
)');

        $ex->query('insert :_smfgroups
select
  min(id) as group_id, subject2, to_ids
from :_smfpm
group by subject2, to_ids');

        $ex->query('create index :_idx_smfgroups on :_smfgroups (subject2, to_ids)');

        $ex->query('update :_smfpm pm
join :_smfgroups g
  on pm.subject2 = g.subject2 and pm.to_ids = g.to_ids
set pm.group_id = g.id');

        // Conversation.
        $conv_Map = array(
            'id' => 'ConversationID',
            'from_id' => 'InsertUserID',
            'DateInserted' => 'DateInserted',
            'subject2' => array('Column' => 'Subject', 'Type' => 'varchar(255)')
        );
        $ex->exportTable('Conversation',
            "select
  pm.group_id,
  pm.from_id,
  pm.subject2,
  from_unixtime(pm2.msgtime) as DateInserted
from :_smfpm pm
join :_personal_messages pm2
  on pm.id = pm2.ID_PM
where pm.id = pm.group_id", $conv_Map);

        // ConversationMessage.
        $convMessage_Map = array(
            'id' => 'MessageID',
            'group_id' => 'ConversationID',
            'DateInserted' => 'DateInserted',
            'from_id' => 'InsertUserID',
            'body' => array('Column' => 'Body')
        );
        $ex->exportTable('ConversationMessage',
            "select
  pm.id,
  pm.group_id,
  from_unixtime(pm2.msgtime) as DateInserted,
  pm.from_id,
  'BBCode' as Format,
  case when pm.subject = pm.subject2 then concat(pm.subject, '\n\n', pm2.body) else pm2.body end as body
from :_smfpm pm
join :_personal_messages pm2
  on pm.id = pm2.ID_PM", $convMessage_Map);

        // UserConversation.
        $userConv_Map = array(
            'to_id' => 'UserID',
            'group_id' => 'ConversationID',
            'deleted' => 'Deleted'
        );
        $ex->exportTable('UserConversation',

            "select
   pm.group_id,
   t.to_id,
   t.deleted
 from :_smfpmto t
 join :_smfpm pm
   on t.id = pm.group_id", $userConv_Map);

        $ex->query('drop table :_smfpm');
        $ex->query('drop table :_smfpmto');
        $ex->query('drop table :_smfpmto2');
        $ex->query('drop table :_smfgroups');

        // End
        $ex->endExport();
//      echo implode("\n\n", $ex->Queries);
    }

    public function decodeNumericEntity($text) {
        if (function_exists('mb_decode_numericentity')) {
            $convmap = array(0x0, 0x2FFFF, 0, 0xFFFF);

            return mb_decode_numericentity($text, $convmap, 'UTF-8');
        } else {
            return $text;
        }
    }

    public function _pcreEntityToUtf($matches) {
        $char = intval(is_array($matches) ? $matches[1] : $matches);

        if ($char < 0x80) {
            // to prevent insertion of control characters
            if ($char >= 0x20) {
                return htmlspecialchars(chr($char));
            } else {
                return "&#$char;";
            }
        } else {
            if ($char < 0x80000) {
                return chr(0xc0 | (0x1f & ($char >> 6))) . chr(0x80 | (0x3f & $char));
            } else {
                return chr(0xe0 | (0x0f & ($char >> 12))) . chr(0x80 | (0x3f & ($char >> 6))) . chr(0x80 | (0x3f & $char));
            }
        }
    }

    /**
     * Determine mime type from file name
     *
     * @param string $fileName File name (Can be full path or file name only)
     * @return null|string Mime type if it could be determined or null.
     */
    public function getMimeTypeFromFileName($fileName) {
        $mimeType = null;

        $extension = pathinfo($fileName, PATHINFO_EXTENSION);
        if ($extension) {
            $mimeType = MimeTypeFromExtension('.'.strtolower($extension));
        }

        return $mimeType;
    }

    /**
     * Filter used by $Media_Map to replace value for ThumbPath and ThumbWidth when the file is not an image.
     *
     * @access public
     * @see ExportModel::_exportTable
     *
     * @param string $value Current value
     * @param string $field Current field
     * @param array $row Contents of the current record.
     * @return string|null Return the supplied value if the record's file is an image. Return null otherwise
     */
    public function filterThumbnailData($value, $field, $row) {
        $mimeType = $this->getMimeTypeFromFileName($row['Path']);
        if ($mimeType && strpos($mimeType, 'image/') === 0) {
            return $value;
        } else {
            return null;
        }
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/* Written by John Crenshaw for Priacta, Inc. */
/**
 * SMF2 exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @author John Crenshaw
 * @package VanillaPorter
 */

$supported['smf2'] = array('name' => 'Simple Machines 2', 'prefix' => 'smf_');
$supported['smf2']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Attachments' => 1,
    'Bookmarks' => 1,
    'PrivateMessages' => 1,
    'Passwords' => 1,
);

class SMF2 extends ExportController {

    /** @var array Required tables => columns */
    protected $sourceTables = array(
        'boards' => array(),
        'messages' => array(),
        'personal_messages' => array(),
        'pm_recipients' => array(),
        'categories' => array('id_cat', 'name', 'cat_order'),
        'membergroups' => array(),
        'members' => array('id_member', 'member_name', 'passwd', 'email_address', 'date_registered')
    );

    /**
     * Forum-specific export format.
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('messages');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Begin
        $ex->beginExport('', 'SMF 2.*', array('HashMethod' => 'Django'));

        // Users
        $user_Map = array(
            'id_member' => 'UserID',
            'member_name' => 'Name',
            'password' => 'Password',
            'email_address' => 'Email',
            'DateInserted' => 'DateInserted',
            'timeOffset' => 'HourOffset',
            'posts' => 'CountComments',
            //'avatar'=>'Photo',
            'Photo' => 'Photo',
            'birthdate' => 'DateOfBirth',
            'DateFirstVisit' => 'DateFirstVisit',
            'DateLastActive' => 'DateLastActive',
            'DateUpdated' => 'DateUpdated'
        );
        $ex->exportTable('User', "
         select m.*,
            from_unixtime(date_registered) as DateInserted,
            from_unixtime(date_registered) as DateFirstVisit,
            from_unixtime(last_login) as DateLastActive,
            from_unixtime(last_login) as DateUpdated,
            concat('sha1$', lower(member_name), '$', passwd) as `password`,
            if(m.avatar <> '', m.avatar, concat('attachments/', a.filename)) as Photo
         from :_members m
         left join :_attachments a on a.id_member = m.id_member ", $user_Map);

        // Roles
        $role_Map = array(
            'id_group' => 'RoleID',
            'group_name' => 'Name'
        );
        $ex->exportTable('Role', "select * from :_membergroups", $role_Map);

        // UserRoles
        $userRole_Map = array(
            'id_member' => 'UserID',
            'id_group' => 'RoleID'
        );
        $ex->exportTable('UserRole', "select * from :_members", $userRole_Map);

        // Categories
        $category_Map = array(
            'Name' => array('Column' => 'Name', 'Filter' => array($this, 'decodeNumericEntity')),
        );

        $ex->exportTable('Category',
            "
            select
              (`id_cat` + 1000000) as `CategoryID`,
              `name` as `Name`,
              '' as `Description`,
              null as `ParentCategoryID`,
              `cat_order` as `Sort`
            from :_categories

            union

            select
              b.`id_board` as `CategoryID`,

              b.`name` as `Name`,
                b.`description` as `Description`,
              (CASE WHEN b.`id_parent` = 0 THEN (`id_cat` + 1000000) ELSE `id_parent` END) as `ParentCategoryID`,
              b.`board_order` as `Sort`
            from :_boards b

            ", $category_Map);

        // Discussions
        $discussion_Map = array(
            'id_topic' => 'DiscussionID',
            'subject' => array('Column' => 'Name', 'Filter' => array($this, 'decodeNumericEntity')),
            //,'Filter'=>'bb2html'),
            'body' => array('Column' => 'Body'),
            //,'Filter'=>'bb2html'),
            'Format' => 'Format',
            'id_board' => 'CategoryID',
            'DateInserted' => 'DateInserted',
            'DateUpdated' => 'DateUpdated',
            'id_member' => 'InsertUserID',
            'DateLastComment' => 'DateLastComment',
            'UpdateUserID' => 'UpdateUserID',
            'locked' => 'Closed',
            'isSticky' => 'Announce',
            'CountComments' => 'CountComments',
            'numViews' => 'CountViews',
            'LastCommentUserID' => 'LastCommentUserID',
            'id_last_msg' => 'LastCommentID'
        );
        $ex->exportTable('Discussion', "
      select t.*,
         (t.num_replies + 1) as CountComments,
         m.subject,
         m.body,
         from_unixtime(m.poster_time) as DateInserted,
         from_unixtime(m.modified_time) as DateUpdated,
         m.id_member,
         from_unixtime(m_end.poster_time) AS DateLastComment,
         m_end.id_member AS UpdateUserID,
         m_end.id_member AS LastCommentUserID,
         'BBCode' as Format
       from :_topics t
       join :_messages as m on t.id_first_msg = m.id_msg
       join :_messages as m_end on t.id_last_msg = m_end.id_msg

       -- where t.spam = 0 AND m.spam = 0;

       ", $discussion_Map);

        // Comments
        $comment_Map = array(
            'id_msg' => 'CommentID',
            'id_topic' => 'DiscussionID',
            'Format' => 'Format',
            'body' => array('Column' => 'Body'), //,'Filter'=>'bb2html'),
            'id_member' => 'InsertUserID',
            'DateInserted' => 'DateInserted'
        );
        $ex->exportTable('Comment',
            "select m.*,
               from_unixtime(m.poster_time) AS DateInserted,
               'BBCode' as Format
             from :_messages m
               join :_topics t on m.id_topic = t.id_topic
               where m.id_msg <> t.id_first_msg;
             ", $comment_Map);

        // Media
        $media_Map = array(
            'ID_ATTACH' => 'MediaID',
            'id_msg' => 'ForeignID',
            'size' => 'Size',
            'height' => 'ImageHeight',
            'width' => 'ImageWidth',
            'extract_mimetype' => array(
                'Column' => 'Type',
                'Filter' => function($value, $field, $row) {
                    return $this->getMimeTypeFromFileName($row['Path']);
                }
            ),
            'thumb_path' => array('Column' => 'ThumbPath', 'Filter' => array($this, 'filterThumbnailData')),
            'thumb_width' => array('Column' => 'ThumbWidth', 'Filter' => array($this, 'filterThumbnailData')),
        );
        $ex->exportTable('Media', "
            select a.*,
                concat('attachments/', a.filename) as Path,
                IF(b.filename is not null, concat('attachments/', b.filename), null) as thumb_path,
                null as extract_mimetype,
                b.width as thumb_width,
                if(t.id_topic is null, 'Comment', 'Discussion') as ForeignTable
            from :_attachments a
                left join :_attachments b on b.ID_ATTACH = a.ID_THUMB
                left join :_topics t on a.id_msg = t.id_first_msg
            where a.attachment_type = 0
                and a.id_msg > 0
        ", $media_Map);

        // Conversations
        $conversation_Map = array(
            'id_pm_head' => 'ConversationID',
            'subject' => 'Subject',
            'id_member_from' => 'InsertUserID',
            'unixmsgtime' => 'DateInserted',
        );

        $ex->exportTable('Conversation',
            "select
              pm.*,
              from_unixtime(pm.msgtime) as unixmsgtime
            from :_personal_messages pm
            ", $conversation_Map);


        $convMsg_Map = array(
            'id_pm' => 'MessageID',
            'id_pm_head' => 'ConversationID',
            'body' => 'Body',
            'format' => 'Format',
            'id_member_from' => 'InsertUserID',
            'unixmsgtime' => 'DateInserted',
        );

        $ex->exportTable('ConversationMessage',
            "select
              pm.*,
              from_unixtime(pm.msgtime) as unixmsgtime ,
              'BBCode' as format
            from :_personal_messages pm
            ", $convMsg_Map);


        $userConv_Map = array(
            'id_member2' => 'UserId',
            'id_pm_head' => 'ConversationID',
            'deleted2' => 'Deleted'
        );

        $ex->exportTable('UserConversation',
            "(select
              pm.id_member_from as id_member2,
              pm.id_pm_head,
              pm.deleted_by_sender as deleted2
            from :_personal_messages pm )
            UNION ALL
            (select
            pmr.id_member as id_member2,
            pm.id_pm_head,
            pmr.deleted as deleted2
            from :_personal_messages pm join :_pm_recipients pmr on pmr.id_pm = pm.id_pm
            )
            ", $userConv_Map);


        // End

        $ex->endExport();

    }

    public function decodeNumericEntity($text) {
        if (function_exists('mb_decode_numericentity')) {
            $convmap = array(0x0, 0x2FFFF, 0, 0xFFFF);

            return mb_decode_numericentity($text, $convmap, 'UTF-8');
        } else {
            return $text;
        }
    }

    public function _pcreEntityToUtf($matches) {
        $char = intval(is_array($matches) ? $matches[1] : $matches);

        if ($char < 0x80) {
            // to prevent insertion of control characters
            if ($char >= 0x20) {
                return htmlspecialchars(chr($char));
            } else {
                return "&#$char;";
            }
        } else {
            if ($char < 0x80000) {
                return chr(0xc0 | (0x1f & ($char >> 6))) . chr(0x80 | (0x3f & $char));
            } else {
                return chr(0xe0 | (0x0f & ($char >> 12))) . chr(0x80 | (0x3f & ($char >> 6))) . chr(0x80 | (0x3f & $char));
            }
        }
    }

    /**
     * Determine mime type from file name
     *
     * @param string $fileName File name (Can be full path or file name only)
     * @return null|string Mime type if it could be determined or null.
     */
    public function getMimeTypeFromFileName($fileName) {
        $mimeType = null;

        $extension = pathinfo($fileName, PATHINFO_EXTENSION);
        if ($extension) {
            $mimeType = MimeTypeFromExtension('.'.strtolower($extension));
        }

        return $mimeType;
    }

    /**
     * Filter used by $Media_Map to replace value for ThumbPath and ThumbWidth when the file is not an image.
     *
     * @access public
     * @see ExportModel::_exportTable
     *
     * @param string $value Current value
     * @param string $field Current field
     * @param array $row Contents of the current record.
     * @return string|null Return the supplied value if the record's file is an image. Return null otherwise
     */
    public function filterThumbnailData($value, $field, $row) {
        $mimeType = $this->getMimeTypeFromFileName($row['Path']);
        if ($mimeType && strpos($mimeType, 'image/') === 0) {
            return $value;
        } else {
            return null;
        }
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * Toast (.NET) exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['toast'] = array('name' => 'Toast', 'prefix' => 'tstdb_');
$supported['toast']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
);

class Toast extends ExportController {
    public static $passwordFormats = array(0 => 'md5', 1 => 'sha1', 2 => 'sha256', 3 => 'sha384', 4 => 'sha512');

    /**
     *
     * @param ExportModel $ex
     */
    public function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('Post');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->beginExport('', 'Toast Forum');
        $ex->sourcePrefix = 'tstdb_';

        // User.
        $user_Map = array(
            'ID' => 'UserID',
            'Username' => 'Name',
            'Email' => 'Email',
            'LastLoginDate' => array('Column' => 'DateLastActive', 'Type' => 'datetime'),
            'IP' => 'LastIPAddress'
        );
        $ex->exportTable('User', "
         select
            *,
            NOW() as DateInserted
         from :_Member u", $user_Map);

        // Determine safe RoleID to use for non-existant Member role
        $lastRoleID = 1001;
        $lastRoleResult = $ex->query("select max(ID) as LastID from :_Group");
        if ($lastRoleResult) {
            $lastRole = mysql_fetch_array($lastRoleResult);
            $lastRoleID = $lastRole['LastID'] + 1;
        }

        // Role.
        // Add default Member role.
        $role_Map = array(
            'ID' => 'RoleID',
            'Name' => 'Name'
        );
        $ex->exportTable('Role', "
         select
            ID,
            Name
         from :_Group

         union all

         select
            $lastRoleID as ID,
            'Member' as Name
         from :_Group;", $role_Map);

        // UserRole.
        // Users without roles get put into new Member role.
        $userRole_Map = array(
            'MemberID' => 'UserID',
            'GroupID' => 'RoleID'
        );
        $ex->exportTable('UserRole', "
         select
            GroupID,
            MemberID
         from :_MemberGroupLink

         union all

         select
            $lastRoleID as GroupID,
            m.ID as MemberID
         from :_Member m
         left join :_MemberGroupLink l
            on l.MemberID = m.ID
         where l.GroupID is null", $userRole_Map);

        // Signatures.
        $ex->exportTable('UserMeta', "
         select
            ID as UserID,
            'Plugin.Signatures.Sig' as `Name`,
            Signature as `Value`
         from :_Member
         where Signature <> ''

         union all

         select
            ID as UserID,
            'Plugin.Signatures.Format' as `Name`,
            'BBCode' as `Value`
         from :_Member
         where Signature <> '';");

        // Category.
        $category_Map = array(
            'ID' => 'CategoryID',
            'CategoryID' => 'ParentCategoryID',
            'ForumName' => 'Name',
            'Description' => 'Description'
        );

        $ex->exportTable('Category', "
         select
            f.ID,
            f.CategoryID * 1000 as CategoryID,
            f.ForumName,
            f.Description
         from :_Forum f

         union all

         select
            c.ID * 1000 as ID,
            -1 as CategoryID,
            c.Name as ForumName,
            null as Description
         from :_Category c;", $category_Map);

        // Discussion.
        $discussion_Map = array(
            'ID' => 'DiscussionID',
            'ForumID' => 'CategoryID',
            'MemberID' => 'InsertUserID',
            'PostDate' => 'DateInserted',
            'ModifyDate' => 'DateUpdated',
            'LastPostDate' => 'DateLastComment',
            'Subject' => 'Name',
            'Message' => 'Body',
            'Hits' => 'CountViews',
            'ReplyCount' => 'CountComments'
        );
        $ex->exportTable('Discussion', "
         select p.*,
            'Html' as Format
         from :_Post p
         where p.Topic = 1
            and p.Deleted = 0;", $discussion_Map);

        // Comment.
        $comment_Map = array(
            'ID' => 'CommentID',
            'TopicID' => 'DiscussionID',
            'MemberID' => 'InsertUserID',
            'PostDate' => 'DateInserted',
            'ModifyDate' => 'DateUpdated',
            'Message' => 'Body'
        );
        $ex->exportTable('Comment', "
         select *,
            'Html' as Format
         from :_Post p
         where Topic = 0 and Deleted = 0;", $comment_Map);


        $ex->endExport();
    }

    public function cleanDate($value) {
        if (!$value) {
            return null;
        }
        if (substr($value, 0, 4) == '0000') {
            return null;
        }

        return $value;
    }

}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * Truncated exporter tool.
 *
 * @copyright Vanilla Forums Inc. 2010-2014
 * @license GNU GPL2
 * @package VanillaPorter
 * @see functions.commandline.php for command line usage.
 */

$supported['truncated'] = array('name'=> 'Truncated', 'prefix'=>'GDN_');
$supported['truncated']['CommandLine'] = array(
    'comments' => array(
        'Number of latest comments to export.  Truncation of other tables will be relative to this sample.',
        'Req' => true,
        'Sx' => '::'
    )
);
$supported['truncated']['features'] = array(
    'Attachments' => 1,
    'Avatars' => 1,
    'Bookmarks' => 1,
    'Categories' => 1,
    'Comments' => 1,
    'Discussions' => 1,
    'Passwords' => 1,
    'Permissions' => 1,
    'PrivateMessages' => 1,
    'Roles' => 1,
    'Signatures' => 1,
    'UserNotes' => 1,
    'Users' => 1,
    'UserWall' => 1
);

class Truncated extends ExportController {

    /**
     * Main export process.
     *
     * @param ExportModel $ex
     * @see $_Structures in ExportModel for allowed destination tables & columns.
     */
    public function forumExport($ex) {
        $characterSet = $ex->getCharacterSet('Comment');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $comments = $this->param('comments', '10000');

        $ex->beginExport('', 'Vanilla 2.* (truncated)');


        // Comment
        $this->cloneTableStructure($ex, 'Comment', 'z_Comment');
        $ex->query("
            insert into z_Comment

            select c.*
            from :_Comment c
            order by DateInserted desc
            limit $comments");
        $ex->exportTable('Comment', "
            select *
            from z_Comment
            order by CommentID asc");


        //Discussion
        $this->cloneTableStructure($ex, 'Discussion', 'z_Discussion');
        $ex->query("
            insert into z_Discussion

            select d.*
            from :_Discussion d
            where d.DiscussionID in (select DiscussionID from z_Comment)");
        $this->exportTable($ex, 'Discussion', 'z_');


        // Category
        $this->exportTable($ex, 'Category');


        // Role
        $this->exportTable($ex, 'Role');


        // Permission
        $this->exportTable($ex, 'Permission');


        // User
        $this->cloneTableStructure($ex, 'User', 'z_User');
        $ex->query("
            insert into z_User

            select u.*
            from :_User u
            where u.Admin = 1
            order by u.UserID asc
            limit 1");
        $ex->query("
            insert ignore into z_User

            select u.*
            from :_User u
            where u.UserID in (select InsertUserID from z_Comment)");
        $ex->query("
            insert ignore into z_User

            select u.*
            from :_User u
            where u.UserID in (select InsertUserID from z_Discussion)");
        $this->exportTable($ex, 'User', 'z_');


        // UserRole
        $ex->exportTable('UserRole', "
            select ur.*
            from :_UserRole ur
            where ur.UserID in (select UserID from z_User)");


        // Activity
        // @todo Make this faster.
        /*
        $ex->ExportTable('Activity', "
            select a.*
            from :_Activity a
            where a.ActivityUserID in (select UserID from z_User)");
        */

        // UserConversation
        $this->cloneTableStructure($ex, 'UserConversation', 'z_UserConversation');
        $ex->query("
            insert into z_UserConversation

            select uc.*
            from :_UserConversation uc
            where uc.UserID in (select UserID from :_User)");
        $this->exportTable($ex, 'UserConversation', 'z_');


        // Conversation
        $ex->exportTable('Conversation', "
            select c.*
            from :_Conversation c
            where c.ConversationID in (select ConversationID from z_UserConversation)");


        // ConversationMessage
        $ex->exportTable('ConversationMessage', "
            select cm.*
            from :_ConversationMessage cm
            where cm.ConversationID in (select ConversationID from z_UserConversation)");


        // Media
        $ex->exportTable('Media', "
            select md.*
            from :_Media md
            where md.ForeignTable = 'discussion' and md.ForeignID in (select DiscussionID from z_Discussion)

            union

            select mc.*
            from :_Media mc
            where mc.ForeignTable = 'comment' and mc.ForeignID in (select CommentID from z_Comment)
        ");


        // UserComment
        $ex->exportTable('UserComment', "
            select uc.*
            from :_UserComment uc
            where uc.UserID in (select UserID from z_User)");


        // UserDiscussion
        // @todo Make this faster
        /*
        $ex->ExportTable('UserDiscussion', "
            select ud.*
            from :_UserDiscussion ud
            where ud.UserID in (select UserID from z_User)");
        */


        // UserMeta
        $ex->exportTable('UserMeta', "
            select um.*
            from :_UserMeta um
            where um.UserID in (select UserID from z_User)");

        // Tag
        $this->exportTable($ex, 'Tag');


        // TagDiscussion
        $ex->exportTable('TagDiscussion', "
            select td.*
            from :_TagDiscussion td
            where td.DiscussionID in (select DiscussionID from z_Discussion)");


        if ($ex->exists('Group')) {
            // Group
            $this->exportTable($ex, 'Group');


            // UserGroup
            $ex->exportTable('UserGroup', "
            SELECT ug.*
            FROM :_UserGroup ug
            WHERE ug.UserID IN (SELECT UserID FROM z_User)");
        }


        $ex->endExport();
    }

    /**
     * Clone the structure from one table to a new one.
     *
     * @param ExportModel $ex Export model.
     * @param string $source The name of the source table.
     * @param string $destination The name of the destination table.
     * @param bool $usePrefix Should the DB prefix be used for the source name?
     * @param bool $temporary Should this be a temporary table?
     *
     * @return bool True on successful creation of the table, false if not
     */
    protected function cloneTableStructure($ex, $source, $destination, $temporary = false) {
        if (!$ex->exists($source)) {
            return;
        }

        $temporary = $temporary ? ' temporary ' : '';

        $ex->query("drop table if exists $destination");
        return $ex->query("create $temporary table $destination like :_{$source}");
    }

    /**
     *
     * @param ExportModel $ex
     * @param string $tableName Name of table to export
     * @param string $prefix Prefix to use for table name.  Defaults to placeholder for prefix parameter.
     */
    protected function exportTable($ex, $tableName, $prefix = ':_') {
        if (!$ex->exists($tableName)) {
            return;
        }

        $ex->exportTable($tableName, "select * from $prefix{$tableName}");
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * User Voice exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['uservoice'] = array('name' => 'User Voice', 'prefix' => 'cs_');
$supported['uservoice']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Bookmarks' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
);

class UserVoice extends ExportController {
    /**
     *
     * @param ExportModel $ex
     */
    public function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('Threads');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->beginExport('', 'User Voice');
        $ex->sourcePrefix = 'cs_';


        // User.
        $user_Map = array(
            'LastActivity' => array('Column' => 'DateLastActive'),
            'UserName' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'CreateDate' => array('Column' => 'DateInserted'),
        );
        $ex->exportTable('User', "
         select u.*,
         concat('sha1$', m.PasswordSalt, '$', m.Password) as Password,
         'django' as HashMethod,
         if(a.Content is not null, concat('import/userpics/avatar',u.UserID,'.jpg'), NULL) as Photo
         from :_Users u
         left join aspnet_Membership m on m.UserId = u.MembershipID
         left join :_UserAvatar a on a.UserID = u.UserID", $user_Map);


        // Role.
        $role_Map = array(
            'RoleId' => array('Column' => 'RoleID', 'Filter' => array($this, 'roleIDConverter')),
            'RoleName' => 'Name'
        );
        $ex->exportTable('Role', "
         select *
         from aspnet_Roles", $role_Map);

        // User Role.
        $userRole_Map = array(
            'RoleId' => array('Column' => 'RoleID', 'Filter' => array($this, 'roleIDConverter')),
        );
        $ex->exportTable('UserRole', "
         select u.UserID, ur.RoleId
         from aspnet_UsersInRoles ur
         left join :_Users u on ur.UserId = u.MembershipID
         ", $userRole_Map);


        // Category.
        $category_Map = array(
            'SectionID' => 'CategoryID',
            'ParentID' => 'ParentCategoryID',
            'SortOrder' => 'Sort',
            'DateCreated' => 'DateInserted'
        );
        $ex->exportTable('Category', "
         select s.*
         from :_Sections s", $category_Map);


        // Discussion.
        $discussion_Map = array(
            'ThreadID' => 'DiscussionID',
            'SectionID' => 'CategoryID',
            'UserID' => 'InsertUserID',
            'PostDate' => 'DateInserted',
            'ThreadDate' => 'DateLastComment',
            'TotalViews' => 'CountViews',
            'TotalReplies' => 'CountComments',
            'IsLocked' => 'Closed',
            'MostRecentPostAuthorID' => 'LastCommentUserID',
            'MostRecentPostID' => 'LastCommentID',
            'Subject' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'Body' => array('Column' => 'Body', 'Filter' => 'HTMLDecoder'),
            'IPAddress' => 'InsertIPAddress'
        );
        $ex->exportTable('Discussion', "
         select t.*,
            p.Subject,
            p.Body,
            'Html' as Format,
            p.IPAddress as InsertIPAddress,
            if(t.IsSticky  > 0, 2, 0) as Announce
         from :_Threads t
         left join :_Posts p on p.ThreadID = t.ThreadID
         where p.SortOrder = 1", $discussion_Map);


        // Comment.
        $comment_Map = array(
            'PostID' => 'CommentID',
            'ThreadID' => 'DiscussionID',
            'UserID' => 'InsertUserID',
            'IPAddress' => 'InsertIPAddress',
            'Body' => array('Column' => 'Body', 'Filter' => 'HTMLDecoder'),
            'PostDate' => 'DateInserted'
        );
        $ex->exportTable('Comment', "
         select p.*
         from :_Posts p
         where SortOrder > 1", $comment_Map);


        // Bookmarks
        $userDiscussion_Map = array(
            'ThreadID' => 'DiscussionID'
        );
        $ex->exportTable('UserDiscussion', "
         select t.*,
            '1' as Bookmarked,
            NOW() as DateLastViewed
         from :_TrackedThreads t", $userDiscussion_Map);

        // Media.
        /*$Media_Map = array(
           'FileName' => 'Name',
           'ContentType' => 'Type',
           'ContentSize' => 'Size',
           'UserID' => 'InsertUserID',
           'Created' => 'DateInserted'
        );
        $ex->ExportTable('Media', "
           select a.*,
              if(p.SortOrder = 1, 'Discussion', 'Comment') as ForeignTable,
              if(p.SortOrder = 1, p.ThreadID, a.PostID) as ForeignID,
              concat('import/attach/', a.FileName) as Path
           from :_PostAttachments a
           left join :_Posts p on p.PostID = a.PostID
           where IsRemote = 0", $Media_Map);
        */

        // Decode files in database.
        $this->exportHexAvatars();
        //$this->ExportHexAttachments();


        // El fin.
        $ex->endExport();
    }

    /**
     * Role IDs are crazy hex strings of hyphenated octets.
     * Create an integer RoleID using the first 4 characters.
     *
     * @param string $roleID
     * @return int
     */
    public function roleIDConverter($roleID) {
        return hexdec(substr($roleID, 0, 4));
    }

    /**
     * Avatars are hex-encoded in the database.
     */
    public function exportHexAvatars($thumbnail = true) {
        $this->ex->comment("Exporting hex encoded columns...");

        $result = $this->ex->query("select UserID, Length, ContentType, Content from :_UserAvatar");
        $path = '/www/porter/userpics';
        $count = 0;

        while ($row = mysql_fetch_assoc($result)) {
            // Build path
            if (!file_exists(dirname($path))) {
                $r = mkdir(dirname($path), 0777, true);
                if (!$r) {
                    die("Could not create " . dirname($path));
                }
            }

            $photoPath = $path . '/pavatar' . $row['UserID'] . '.jpg';
            file_put_contents($photoPath, hex2bin($row['Content']));
            $this->ex->status('.');

            if ($thumbnail) {
                if ($thumbnail === true) {
                    $thumbnail = 50;
                }

                //$PicPath = str_replace('/avat', '/pavat', $photoPath);
                $thumbPath = str_replace('/pavat', '/navat', $photoPath);
                generateThumbnail($photoPath, $thumbPath, $thumbnail, $thumbnail);
            }
            $count++;
        }
        $this->ex->status("$count Hex Encoded.\n");
        $this->ex->comment("$count Hex Encoded.", false);
    }

    /**
     *
     */
    public function exportHexAttachments() {
        $this->ex->comment("Exporting hex encoded columns...");

        $result = $this->ex->query("select a.*, p.PostID
         from :_PostAttachments a
         left join :_Posts p on p.PostID = a.PostID
         where IsRemote = 0");
        $path = '/www/porter/attach';
        $count = 0;

        while ($row = mysql_fetch_assoc($result)) {
            // Build path
            if (!file_exists(dirname($path))) {
                $r = mkdir(dirname($path), 0777, true);
                if (!$r) {
                    die("Could not create " . dirname($path));
                }
            }

            file_put_contents($path . '/' . $row['FileName'], hex2bin($row['Content']));
            $count++;
        }
        $this->ex->status("$count Hex Encoded.\n");
        $this->ex->comment("$count Hex Encoded.", false);
    }
}

/**
 * Get the file extension from a mime-type.
 * @param string $mime
 * @param string $ext If this argument is specified then this extension will be added to the list of known types.
 * @return string The file extension without the dot.
 */
function mimeToExt($mime, $ext = null) {
    static $known = array('text/plain' => 'txt', 'image/jpeg' => 'jpg');
    $mime = strtolower($mime);

    if ($ext !== null) {
        $known[$mime] = ltrim($ext, '.');
    }

    if (array_key_exists($mime, $known)) {
        return $known[$mime];
    }

    // We don't know the mime type so we need to just return the second part as the extension.
    $result = trim(strrchr($mime, '/'), '/');

    if (substr($result, 0, 2) === 'x-') {
        $result = substr($result, 2);
    }

    return $result;
}

if (!function_exists('hex2bin')) {
    function hex2bin($hexstr) {
        $n = strlen($hexstr);
        $sbin = "";
        $i = 0;
        while ($i < $n) {
            $a = substr($hexstr, $i, 2);
            $c = pack("H*", $a);
            if ($i == 0) {
                $sbin = $c;
            } else {
                $sbin .= $c;
            }
            $i += 2;
        }

        return $sbin;
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * Vanilla 1 exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['vanilla1'] = array('name' => 'Vanilla 1', 'prefix' => 'LUM_');
$supported['vanilla1']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Attachments' => 1,
    'PrivateMessages' => 1,
    'Passwords' => 1,
    'Bookmarks' => 1,
);

class Vanilla1 extends ExportController {

    /** @var array Required tables => columns */
    public $sourceTables = array(
        'User' => array('UserID', 'Name', 'Password', 'Email', 'CountComments'),
        'Role' => array('RoleID', 'Name', 'Description'),
        'Category' => array('CategoryID', 'Name', 'Description'),
        'Discussion' => array(
            'DiscussionID',
            'Name',
            'CategoryID',
            'DateCreated',
            'AuthUserID',
            'DateLastActive',
            'Closed',
            'Sticky',
            'CountComments',
            'Sink',
            'LastUserID'
        ),
        'Comment' => array(
            'CommentID',
            'DiscussionID',
            'AuthUserID',
            'DateCreated',
            'EditUserID',
            'DateEdited',
            'Body',
            'Deleted'
        )
    );

    /**
     * Forum-specific export format
     * @todo Project file size / export time and possibly break into multiple files
     * @param ExportModel $ex
     *
     */
    protected function forumExport($ex) {
        $this->ex = $ex;

        $characterSet = $ex->getCharacterSet('Comment');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Begin
        $ex->beginExport('', 'Vanilla 1.*');

        // Users
        $user_Map = array(
            'UserID' => 'UserID',
            'Name' => 'Name',
            'Password' => 'Password',
            'Email' => 'Email',
            'Icon' => 'Photo',
            'CountComments' => 'CountComments',
            'Discovery' => 'DiscoveryText'
        );
        $ex->exportTable('User', "SELECT * FROM :_User", $user_Map);  // ":_" will be replaced by database prefix

        // Roles

        // Since the zero role is a valid role in Vanilla 1 then we'll have to reassign it.
        $r = $ex->query('select max(RoleID) as RoleID from :_Role');
        $zeroRoleID = 0;
        if (is_resource($r)) {
            while (($row = @mysql_fetch_assoc($r)) !== false) {
                $zeroRoleID = $row['RoleID'];
            }
        }
        $zeroRoleID++;

        /*
            'RoleID' => 'int',
            'Name' => 'varchar(100)',
            'Description' => 'varchar(200)'
         */
        $role_Map = array(
            'RoleID' => 'RoleID',
            'Name' => 'Name',
            'Description' => 'Description'
        );
        $ex->exportTable('Role',
            "select RoleID, Name, Description from :_Role union all select $zeroRoleID, 'Applicant', 'Created by the Vanilla Porter'",
            $role_Map);

        $permission_Map = array(
            'RoleID' => 'RoleID',
            'PERMISSION_SIGN_IN' => 'Garden.SignIn.Allow',
            'Permissions' => array(
                'Column' => 'Vanilla.Comments.Add',
                'Type' => 'tinyint',
                'Filter' => array($this, 'filterPermissions')
            ),
            'PERMISSION_START_DISCUSSION' => array(
                'Column' => 'Vanilla.Discussions.Add',
                'Type' => 'tinyint',
                'Filter' => array($this, 'forceBool')
            ),
            'PERMISSION_SINK_DISCUSSION' => array(
                'Column' => 'Vanilla.Discussions.Sink',
                'Type' => 'tinyint',
                'Filter' => array($this, 'forceBool')
            ),
            'PERMISSION_STICK_DISCUSSIONS' => array(
                'Column' => 'Vanilla.Discussions.Announce',
                'Type' => 'tinyint',
                'Filter' => array($this, 'forceBool')
            ),
            'PERMISSION_CLOSE_DISCUSSIONS' => array(
                'Column' => 'Vanilla.Discussions.Close',
                'Type' => 'tinyint',
                'Filter' => array($this, 'forceBool')
            ),
            'PERMISSION_EDIT_DISCUSSIONS' => array(
                'Column' => 'Vanilla.Discussions.Edit',
                'Type' => 'tinyint',
                'Filter' => array($this, 'forceBool')
            ),
            'PERMISSION_EDIT_COMMENTS' => array(
                'Column' => 'Vanilla.Comments.Edit',
                'Type' => 'tinyint',
                'Filter' => array($this, 'forceBool')
            ),
            'PERMISSION_APPROVE_APPLICANTS' => array(
                'Column' => 'Garden.Moderation.Manage',
                'Type' => 'tinyint',
                'Filter' => array($this, 'forceBool')
            ),
            'PERMISSION_EDIT_USERS' => array(
                'Column' => 'Garden.Users.Edit',
                'Type' => 'tinyint',
                'Filter' => array($this, 'forceBool')
            ),
            'PERMISSION_CHANGE_APPLICATION_SETTINGS' => array(
                'Column' => 'Garden.Settings.Manage',
                'Type' => 'tinyint',
                'Filter' => array($this, 'forceBool')
            )
        );
        $ex->exportTable('Permission', "select * from :_Role", $permission_Map);

        // UserRoles
        /*
            'UserID' => 'int',
            'RoleID' => 'int'
         */
        $userRole_Map = array(
            'UserID' => 'UserID',
            'RoleID' => 'RoleID'
        );
        $ex->exportTable('UserRole',
            "select UserID, case RoleID when 0 then $zeroRoleID else RoleID end as RoleID from :_User", $userRole_Map);

        // Categories
        /*
            'CategoryID' => 'int',
            'Name' => 'varchar(30)',
            'Description' => 'varchar(250)',
            'ParentCategoryID' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int'
         */
        $category_Map = array(
            'CategoryID' => 'CategoryID',
            'Name' => 'Name',
            'Description' => 'Description'
        );
        $ex->exportTable('Category', "select CategoryID, Name, Description from :_Category", $category_Map);

        // Discussions
        /*
            'DiscussionID' => 'int',
            'Name' => 'varchar(100)',
            'CategoryID' => 'int',
            'Body' => 'text',
            'Format' => 'varchar(20)',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int',
            'Score' => 'float',
            'Announce' => 'tinyint',
            'Closed' => 'tinyint'
         */
        $discussion_Map = array(
            'DiscussionID' => 'DiscussionID',
            'Name' => 'Name',
            'CategoryID' => 'CategoryID',
            'DateCreated' => 'DateInserted',
            'DateCreated2' => 'DateUpdated',
            'AuthUserID' => 'InsertUserID',
            'DateLastActive' => 'DateLastComment',
            'AuthUserID2' => 'UpdateUserID',
            'Closed' => 'Closed',
            'Sticky' => 'Announce',
            'CountComments' => 'CountComments',
            'Sink' => 'Sink',
            'LastUserID' => 'LastCommentUserID'
        );
        $ex->exportTable('Discussion',
            "SELECT d.*,
            d.LastUserID as LastCommentUserID,
            d.DateCreated as DateCreated2, d.AuthUserID as AuthUserID2,
            c.Body,
            c.FormatType as Format
         FROM :_Discussion d
         LEFT JOIN :_Comment c
            ON d.FirstCommentID = c.CommentID
         WHERE coalesce(d.WhisperUserID, 0) = 0 and d.Active = 1", $discussion_Map);

        // Comments
        /*
            'CommentID' => 'int',
            'DiscussionID' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int',
            'Format' => 'varchar(20)',
            'Body' => 'text',
            'Score' => 'float'
         */
        $comment_Map = array(
            'CommentID' => 'CommentID',
            'DiscussionID' => 'DiscussionID',
            'AuthUserID' => 'InsertUserID',
            'DateCreated' => 'DateInserted',
            'EditUserID' => 'UpdateUserID',
            'DateEdited' => 'DateUpdated',
            'Body' => 'Body',
            'FormatType' => 'Format'
        );
        $ex->exportTable('Comment', "
         SELECT
            c.*
         FROM :_Comment c
         JOIN :_Discussion d
            ON c.DiscussionID = d.DiscussionID
         WHERE d.FirstCommentID <> c.CommentID
            AND c.Deleted = '0'
            AND coalesce(d.WhisperUserID, 0) = 0
            AND coalesce(c.WhisperUserID, 0) = 0", $comment_Map);

        $ex->exportTable('UserDiscussion', "
         SELECT
            w.UserID,
            w.DiscussionID,
            w.CountComments,
            w.LastViewed as DateLastViewed,
            case when b.UserID is not null then 1 else 0 end AS Bookmarked
         FROM :_UserDiscussionWatch w
         LEFT JOIN :_UserBookmark b
            ON w.DiscussionID = b.DiscussionID AND w.UserID = b.UserID");

        // Conversations

        // Create a mapping tables for conversations.
        // These mapping tables are used to group comments that a) are in the same discussion and b) are from and to the same users.

        $ex->query("drop table if exists z_pmto");

        $ex->query("create table z_pmto (
  CommentID int,
  UserID int,
  primary key(CommentID, UserID)
 )");

        $ex->query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  CommentID,
  AuthUserID
from :_Comment
where coalesce(WhisperUserID, 0) <> 0");

        $ex->query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  CommentID,
  WhisperUserID
from :_Comment
where coalesce(WhisperUserID, 0) <> 0");

        $ex->query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  c.CommentID,
  d.AuthUserID
from :_Discussion d
join :_Comment c
  on c.DiscussionID = d.DiscussionID
where coalesce(d.WhisperUserID, 0) <> 0");

        $ex->query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  c.CommentID,
  d.WhisperUserID
from :_Discussion d
join :_Comment c
  on c.DiscussionID = d.DiscussionID
where coalesce(d.WhisperUserID, 0) <> 0");

        $ex->query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  c.CommentID,
  c.AuthUserID
from :_Discussion d
join :_Comment c
  on c.DiscussionID = d.DiscussionID
where coalesce(d.WhisperUserID, 0) <> 0");

        $ex->query("drop table if exists z_pmto2");

        $ex->query("create table z_pmto2 (
  CommentID int,
  UserIDs varchar(250),
  primary key (CommentID)
)");

        $ex->query("insert z_pmto2 (
  CommentID,
  UserIDs
)
select
  CommentID,
  group_concat(UserID order by UserID)
from z_pmto
group by CommentID");


        $ex->query("drop table if exists z_pm");

        $ex->query("create table z_pm (
  CommentID int,
  DiscussionID int,
  UserIDs varchar(250),
  GroupID int
)");

        $ex->query("insert ignore z_pm (
  CommentID,
  DiscussionID
)
select
  CommentID,
  DiscussionID
from :_Comment
where coalesce(WhisperUserID, 0) <> 0");

        $ex->query("insert ignore z_pm (
  CommentID,
  DiscussionID
)
select
  c.CommentID,
  c.DiscussionID
from :_Discussion d
join :_Comment c
  on c.DiscussionID = d.DiscussionID
where coalesce(d.WhisperUserID, 0) <> 0");

        $ex->query("update z_pm pm
join z_pmto2 t
  on t.CommentID = pm.CommentID
set pm.UserIDs = t.UserIDs");

        $ex->query("drop table if exists z_pmgroup");

        $ex->query("create table z_pmgroup (
  GroupID int,
  DiscussionID int,
  UserIDs varchar(250)
)");

        $ex->query("insert z_pmgroup (
  GroupID,
  DiscussionID,
  UserIDs
)
select
  min(pm.CommentID),
  pm.DiscussionID,
  t2.UserIDs
from z_pm pm
join z_pmto2 t2
  on pm.CommentID = t2.CommentID
group by pm.DiscussionID, t2.UserIDs");

        $ex->query("create index z_idx_pmgroup on z_pmgroup (DiscussionID, UserIDs)");

        $ex->query("create index z_idx_pmgroup2 on z_pmgroup (GroupID)");

        $ex->query("update z_pm pm
join z_pmgroup g
  on pm.DiscussionID = g.DiscussionID and pm.UserIDs = g.UserIDs
set pm.GroupID = g.GroupID");

        $conversation_Map = array(
            'AuthUserID' => 'InsertUserID',
            'DateCreated' => 'DateInserted',
            'DiscussionID' => array('Column' => 'DiscussionID', 'Type' => 'int'),
            'CommentID' => 'ConversationID',
            'Name' => array('Column' => 'Subject', 'Type' => 'varchar(255)')
        );
        $ex->exportTable('Conversation',
            "select c.*, d.Name
from :_Comment c
join :_Discussion d
  on d.DiscussionID = c.DiscussionID
join z_pmgroup g
  on g.GroupID = c.CommentID;", $conversation_Map);

        // ConversationMessage.
        $conversationMessage_Map = array(
            'CommentID' => 'MessageID',
            'GroupID' => 'ConversationID',
            'Body' => 'Body',
            'FormatType' => 'Format',
            'AuthUserID' => 'InsertUserID',
            'DateCreated' => 'DateInserted'
        );
        $ex->exportTable('ConversationMessage',
            "select c.*, pm.GroupID
from z_pm pm
join :_Comment c
  on pm.CommentID = c.CommentID", $conversationMessage_Map);

        // UserConversation
        /*
           'UserID' => 'int',
           'ConversationID' => 'int',
           'LastMessageID' => 'int'
        */
        $userConversation_Map = array(
            'UserID' => 'UserID',
            'GroupID' => 'ConversationID'
        );
        $ex->exportTable('UserConversation',
            "select distinct
  pm.GroupID,
  t.UserID
from z_pmto t
join z_pm pm
  on pm.CommentID = t.CommentID", $userConversation_Map);

        $ex->query("drop table z_pmto");
        $ex->query("drop table z_pmto2");
        $ex->query("drop table z_pm");
        $ex->query("drop table z_pmgroup");

        // Media
        if ($ex->exists('Attachment')) {
            $media_Map = array(
                'AttachmentID' => 'MediaID',
                'Name' => 'Name',
                'MimeType' => 'Type',
                'Size' => 'Size',
                'Path' => array('Column' => 'Path', 'Filter' => array($this, 'stripMediaPath')),
                'UserID' => 'InsertUserID',
                'DateCreated' => 'DateInserted',
                'CommentID' => 'ForeignID'
                //'ForeignTable'
            );
            $ex->exportTable('Media',
                "select a.*, 'comment' as ForeignTable from :_Attachment a",
                $media_Map);
        }

        // End
        $ex->endExport();
    }

    public function stripMediaPath($absPath) {
        if (($pos = strpos($absPath, '/uploads/')) !== false) {
            return substr($absPath, $pos + 9);
        }

        return $absPath;
    }

    public function filterPermissions($permissions, $columnName, &$row) {
        $permissions2 = unserialize($permissions);

        foreach ($permissions2 as $name => $value) {
            if (is_null($value)) {
                $permissions2[$name] = false;
            }
        }

        if (is_array($permissions2)) {
            $row = array_merge($row, $permissions2);
            $this->ex->currentRow = $row;

            return isset($permissions2['PERMISSION_ADD_COMMENTS']) ? $permissions2['PERMISSION_ADD_COMMENTS'] : false;
        }

        return false;
    }

    public function forceBool($value) {
        if ($value) {
            return true;
        }

        return false;
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * Vanilla 2 exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['vanilla2'] = array('name' => 'Vanilla 2', 'prefix' => 'GDN_');
$supported['vanilla2']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Attachments' => 1,
    'PrivateMessages' => 1,
    'Permissions' => 1,
    'UserWall' => 1,
    'UserNotes' => 1,
    'Bookmarks' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
);

class Vanilla2 extends ExportController {

    /** @var array Required tables => columns */
    protected $_sourceTables = array();

    /**
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {
        $tables = array(
            'Activity',
            'Category',
            'Comment',
            'Conversation',
            'ConversationMessage',
            'Discussion',
            'Media',
            'Permission',
            'Role',
            'User',
            'UserComment',
            'UserConversation',
            'UserDiscussion',
            'UserMeta',
            'UserRole'
        );

        $ex->beginExport('', 'Vanilla 2.*', array('HashMethod' => 'Vanilla'));

        foreach ($tables as $tableName) {
            $this->exportTable($ex, $tableName);
        }

        $ex->endExport();
    }

    /**
     *
     * @param ExportModel $ex
     * @param string $tableName
     */
    protected function exportTable($ex, $tableName) {
        // Make sure the table exists.
        if (!$ex->exists($tableName)) {
            return;
        }

        $ex->exportTable($tableName, "select * from :_{$tableName}");
    }

}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * vBulletin exporter tool.
 *
 * This will migrate all vBulletin data for 3.x and 4.x forums.
 * It migrates all attachments from 2.x and later.
 *
 * Supports the FileUpload, ProfileExtender, and Signature plugins.
 * All vBulletin data appropriate for those plugins will be prepared
 * and transferred.
 *
 * To export only 1 category, add 'forumid=#' parameter to the URL.
 * To extract avatars stored in database, add 'avatars=1' parameter to the URL.
 * To extract attachments stored in db, add 'attachments=1' parameter to the URL.
 * To extract all usermeta data (title, skype, custom profile fields, etc),
 *    add 'usermeta=1' parameter to the URL.
 * To stop the export after only extracting files, add 'noexport=1' param to the URL.
 *
 * TO MIGRATE FILES, BEFORE IMPORTING YOU MUST:
 * 1) Copy entire 'customavatars' folder into Vanilla's /upload folder.
 * 2) Copy entire 'attachments' folder into Vanilla's / upload folder.
 * 3) Make BOTH folders writable by the server.
 * 4) Enable the FileUpload plugin. (Media table must be present.)
 *
 * filepath - Command line option to fix / check files are on disk.  Files named .attach are renamed
 * to the proper name and missing files are reported in missing-files.txt.
 *
 * @copyright Vanilla Forums Inc. 2010
 * @author Matt Lincoln Russell lincoln@icrontic.com
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['vbulletin'] = array('name' => 'vBulletin 3 & 4', 'prefix' => 'vb_');
// Commented commands are still supported, if you really want to use them.
$supported['vbulletin']['CommandLine'] = array(
    //'noexport' => array('Exports only the blobs.', 'Sx' => '::'),
    'mindate' => array('A date to import from. Like selective amnesia.'),
    //'forumid' => array('Only export 1 forum'),
    //'ipbanlist' => array('Export IP ban list, which is a terrible idea.'),
    'filepath' => array('Full path of file attachments to be renamed.', 'Sx' => '::')
);
$supported['vbulletin']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Attachments' => 1,
    'PrivateMessages' => 1,
    'Permissions' => 1,
    'UserWall' => 1,
    'UserNotes' => 1,
    'Bookmarks' => 1,
    'Passwords' => 1,
    'Signatures' => 1,
    'Ranks' => 1,
    'Polls' => 1,
);

/**
 * vBulletin-specific extension of generic ExportController.
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

class VBulletin extends ExportController {
    /* @var string SQL fragment to build new path to attachments. */
    public $attachSelect = "concat('/vbulletin/', left(f.filehash, 2), '/', f.filehash, '_', a.attachmentid,'.', f.extension) as Path";

    /* @var string SQL fragment to build new path to user photo. */
    public $avatarSelect = "case
      when a.userid is not null then concat('customavatars/', a.userid % 100,'/avatar_', a.userid, right(a.filename, instr(reverse(a.filename), '.')))
      when av.avatarpath is not null then av.avatarpath
      else null
      end as customphoto";

    /* @var array Default permissions to map. */
    public static $permissions = array(

        'genericpermissions' => array(
            1 => array('Garden.Profiles.View', 'Garden.Activity.View'),
            2 => 'Garden.Profiles.Edit',
            1024 => 'Plugins.Signatures.Edit'
        ),
        'forumpermissions' => array(
            1 => 'Vanilla.Discussions.View',
            16 => 'Vanilla.Discussions.Add',
            64 => 'Vanilla.Comments.Add',
            4096 => 'Plugins.Attachments.Download',
            8192 => 'Plugins.Attachments.Upload'
        ),
        'adminpermissions' => array(
            1 => array(
                'Garden.Moderation.Manage',
                'Vanilla.Discussions.Announce',
                'Vanilla.Discussions.Close',
                'Vanilla.Discussions.Delete',
                'Vanilla.Comments.Delete',
                'Vanilla.Comments.Edit',
                'Vanilla.Discussions.Edit',
                'Vanilla.Discussions.Sink',
                'Garden.Activity.Delete',
                'Garden.Users.Add',
                'Garden.Users.Edit',
                'Garden.Users.Approve',
                'Garden.Users.Delete',
                'Garden.Applicants.Manage'
            ),
            2 => array(
                'Garden.Settings.View',
                'Garden.Settings.Manage',
                'Garden.Messages.Manage',
                'Vanilla.Spam.Manage'
            )
//          4 => 'Garden.Settings.Manage',),
        ),
//      'wolpermissions' => array(
//          16 => 'Plugins.WhosOnline.ViewHidden')
    );

    public static $permissions2 = array();

    /** @var array Required tables => columns. Commented values are optional. */
    protected $sourceTables = array(
        //'attachment'
        //'contenttype'
        //'customavatar'
        'deletionlog' => array('type', 'primaryid'),
        //'filedata'
        'forum' => array('forumid', 'description', 'displayorder', 'title', 'description', 'displayorder'),
        //'phrase' => array('varname','text','product','fieldname','varname'),
        //'pm'
        //'pmgroup'
        //'pmreceipt'
        //'pmtext'
        'post' => array('postid', 'threadid', 'pagetext', 'userid', 'dateline', 'visible'),
        //'setting'
        'subscribethread' => array('userid', 'threadid'),
        'thread' => array(
            'threadid',
            'forumid',
            'postuserid',
            'title',
            'open',
            'sticky',
            'dateline',
            'lastpost',
            'visible'
        ),
        //'threadread'
        'user' => array(
            'userid',
            'username',
            'password',
            'email',
            'referrerid',
            'timezoneoffset',
            'posts',
            'salt',
            'birthday_search',
            'joindate',
            'lastvisit',
            'lastactivity',
            'membergroupids',
            'usergroupid',
            'usertitle',
            'homepage',
            'aim',
            'icq',
            'yahoo',
            'msn',
            'skype',
            'styleid',
            'avatarid'
        ),
        //'userban'
        'userfield' => array('userid'),
        'usergroup' => array('usergroupid', 'title', 'description'),
        //'visitormessage'
    );

    /**
     * Export each table one at a time.
     *
     * @param ExportModel $ex
     */
    protected function forumExport($ex) {
        // Allow limited export of 1 category via ?forumid=ID
        $forumID = $this->param('forumid');
        if ($forumID) {
            $forumWhere = ' and t.forumid ' . (strpos($forumID, ', ') === false ? "= $forumID" : "in ($forumID)");
        } else {
            $forumWhere = '';
        }

        $characterSet = $ex->getCharacterSet('post');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Begin
        $ex->beginExport('', 'vBulletin 3.* and 4.*');
        $this->exportBlobs(
            $this->param('files'),
            $this->param('avatars'),
            $forumWhere
        );

        if ($this->param('noexport')) {
            $ex->comment('Skipping the export.');
            $ex->endExport();

            return;
        }
        // Check to see if there is a max date.
        $minDate = $this->param('mindate');
        if ($minDate) {
            $minDate = strtotime($minDate);
            $ex->comment("Min topic date ($minDate): " . date('c', $minDate));
        }
        $now = time();

        $cdn = $this->param('cdn', '');

        // Grab all of the ranks.
        $ranks = $ex->get("select * from :_usertitle order by minposts desc", 'usertitleid');

        // Users
        $user_Map = array(
            'userid' => 'UserID',
            'username' => 'Name',
            'password2' => 'Password',
            'email' => 'Email',
            'referrerid' => 'InviteUserID',
            'timezoneoffset' => 'HourOffset',
            'ipaddress' => 'LastIPAddress',
            'ipaddress2' => 'InsertIPAddress',
            'usertitle' => array(
                'Column' => 'Title',
                'Filter' => function ($value) {
                    return trim(strip_tags(str_replace('&nbsp;', ' ', $value)));
                }
            ),
            'posts' => array(
                'Column' => 'RankID',
                'Filter' => function ($value) use ($ranks) {
                    // Look  up the posts in the ranks table.
                    foreach ($ranks as $rankID => $row) {
                        if ($value >= $row['minposts']) {
                            return $rankID;
                        }
                    }

                    return null;
                }
            )
        );

        // Use file avatar or the result of our blob export?
        if ($this->getConfig('usefileavatar')) {
            $user_Map['filephoto'] = 'Photo';
        } else {
            $user_Map['customphoto'] = 'Photo';
        }

        $ex->exportTable('User', "select u.*,
            ipaddress as ipaddress2,
            concat(`password`, salt) as password2,
            DATE_FORMAT(birthday_search,GET_FORMAT(DATE,'ISO')) as DateOfBirth,
            FROM_UNIXTIME(joindate) as DateFirstVisit,
            FROM_UNIXTIME(lastvisit) as DateLastActive,
            FROM_UNIXTIME(joindate) as DateInserted,
            FROM_UNIXTIME(lastactivity) as DateUpdated,
            case when avatarrevision > 0 then concat('$cdn', 'userpics/avatar', u.userid, '_', avatarrevision, '.gif')
                 when av.avatarpath is not null then av.avatarpath
                 else null
                 end as filephoto,
            {$this->avatarSelect},
            case when ub.userid is not null then 1 else 0 end as Banned,
            'vbulletin' as HashMethod
         from :_user u
         left join :_customavatar a
            on u.userid = a.userid
         left join :_avatar av
            on u.avatarid = av.avatarid
         left join :_userban ub
              on u.userid = ub.userid and ub.liftdate <= now() ",
            $user_Map);  // ":_" will be replace by database prefix

        // Roles
        $role_Map = array(
            'usergroupid' => 'RoleID',
            'title' => 'Name',
            'description' => 'Description'
        );
        $ex->exportTable('Role', 'select * from :_usergroup', $role_Map);

        // UserRoles
        $userRole_Map = array(
            'userid' => 'UserID',
            'usergroupid' => 'RoleID'
        );
        $ex->query("CREATE TEMPORARY TABLE VbulletinRoles (userid INT UNSIGNED NOT NULL, usergroupid INT UNSIGNED NOT NULL)");
        # Put primary groups into tmp table
        $ex->query("insert into VbulletinRoles (userid, usergroupid) select userid, usergroupid from :_user");
        # Put stupid CSV column into tmp table
        $secondaryRoles = $ex->query("select userid, usergroupid, membergroupids from :_user", true);
        if (is_resource($secondaryRoles)) {
            while (($row = @mysql_fetch_assoc($secondaryRoles)) !== false) {
                if ($row['membergroupids'] != '') {
                    $groups = explode(',', $row['membergroupids']);
                    foreach ($groups as $groupID) {
                        if (!$groupID) {
                            continue;
                        }
                        $ex->query("insert into VbulletinRoles (userid, usergroupid) values({$row['userid']},{$groupID})",
                            true);
                    }
                }
            }
        }
        # Export from our tmp table and drop
        $ex->exportTable('UserRole', 'select distinct userid, usergroupid from VbulletinRoles', $userRole_Map);
        $ex->query("DROP TABLE IF EXISTS VbulletinRoles");

        // Permissions.
        $permissions_Map = array(
            'usergroupid' => 'RoleID',
            'title' => array('Column' => 'Garden.SignIn.Allow', 'Filter' => array($this, 'signInPermission')),
            'genericpermissions' => array('Column' => 'GenericPermissions', 'type' => 'int'),
            'forumpermissions' => array('Column' => 'ForumPermissions', 'type' => 'int')
        );
        $this->addPermissionColumns(self::$permissions, $permissions_Map);
        $ex->exportTable('Permission', 'select * from :_usergroup', $permissions_Map);

//      $ex->EndExport();
//      return;

        // UserMeta
        $ex->query("CREATE TEMPORARY TABLE VbulletinUserMeta (`UserID` INT NOT NULL ,`Name` VARCHAR( 255 ) NOT NULL ,`Value` text NOT NULL)");
        # Standard vB user data
        $userFields = array(
            'usertitle' => 'Title',
            'homepage' => 'Website',
            'skype' => 'Skype',
            'styleid' => 'StyleID'
        );
        foreach ($userFields as $field => $insertAs) {
            $ex->query("insert into VbulletinUserMeta (UserID, Name, Value) select userid, 'Profile.$insertAs', $field from :_user where $field != ''");
        }
        # Dynamic vB user data (userfield)
        $profileFields = $ex->query("select varname, text from :_phrase where product='vbulletin' and fieldname='cprofilefield' and varname like 'field%_title'");
        if (is_resource($profileFields)) {
            $profileQueries = array();
            while ($field = @mysql_fetch_assoc($profileFields)) {
                $column = str_replace('_title', '', $field['varname']);
                $name = preg_replace('/[^a-zA-Z0-9\s_-]/', '', $field['text']);
                $profileQueries[] = "insert into VbulletinUserMeta (UserID, Name, Value)
               select userid, 'Profile." . $name . "', " . $column . " from :_userfield where " . $column . " != ''";
            }
            foreach ($profileQueries as $query) {
                $ex->query($query);
            }
        }


        // Signatures
        $sql = "
         select
            userid as UserID,
            'Plugin.Signatures.Sig' as Name,
            signature as Value
         from :_usertextfield
         where nullif(signature, '') is not null

         union

         select
            userid,
            'Plugin.Signatures.Format',
            'BBCode'
         from :_usertextfield
         where nullif(signature, '') is not null";
        $ex->exportTable('UserMeta', $sql);


        // Ranks
        $rank_Map = array(
            'usertitleid' => 'RankID',
            'title' => 'Name',
            'title2' => 'Label',
            'minposts' => array(
                'Column' => 'Attributes',
                'Filter' => function ($value) {
                    $result = array(
                        'Criteria' => array(
                            'CountPosts' => $value
                        )
                    );

                    return serialize($result);
                }
            ),
            'level' => array(
                'Column' => 'Level',
                'Filter' => function ($value) {
                    static $level = 1;

                    return $level++;
                }
            )
        );
        $ex->exportTable('Rank', "
         select ut.*, ut.title as title2, 0 as level
         from :_usertitle ut
         order by ut.minposts", $rank_Map);


        // Categories
        $category_Map = array(
            'forumid' => 'CategoryID',
            'description' => 'Description',
            'Name2' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'displayorder' => array('Column' => 'Sort', 'Type' => 'int'),
            'parentid' => 'ParentCategoryID'
        );
        $ex->exportTable('Category', "select f.*, title as Name2
         from :_forum f
         where 1 = 1 $forumWhere", $category_Map);

        $minDiscussionID = false;
        $minDiscussionWhere = false;
        if ($minDate) {
            $minDiscussionID = $ex->getValue("
            select max(threadid)
            from :_thread
            where dateline < $minDate
            ", false);

            $minDiscussionID2 = $ex->getValue("
            select min(threadid)
            from :_thread
            where dateline >= $minDate
            ", false);

            // The two discussion IDs should be the same, but let's average them.
            $minDiscussionID = floor(($minDiscussionID + $minDiscussionID2) / 2);

            $ex->comment('Min topic id: ' . $minDiscussionID);
        }

        // Discussions
        $discussion_Map = array(
            'threadid' => 'DiscussionID',
            'forumid' => 'CategoryID',
            'postuserid' => 'InsertUserID',
            'postuserid2' => 'UpdateUserID',
            'title' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'Format' => 'Format',
            'views' => 'CountViews',
            'ipaddress' => 'InsertIPAddress'
        );

        if ($ex->destination == 'database') {
            // Remove the filter from the title so that this doesn't take too long.
            $ex->HTMLDecoderDb('thread', 'title', 'threadid');
            unset($discussion_Map['title']['Filter']);
        }

        if ($minDiscussionID) {
            $minDiscussionWhere = "and t.threadid > $minDiscussionID";
        }

        $ex->exportTable('Discussion', "select t.*,
            t.postuserid as postuserid2,
            p.ipaddress,
            p.pagetext as Body,
            'BBCode' as Format,
            replycount+1 as CountComments,
            convert(ABS(open-1),char(1)) as Closed,
            if(convert(sticky,char(1))>0,2,0) as Announce,
            FROM_UNIXTIME(t.dateline) as DateInserted,
            FROM_UNIXTIME(lastpost) as DateUpdated,
            FROM_UNIXTIME(lastpost) as DateLastComment,
            if (t.pollid > 0, 'Poll', null) as Type
         from :_thread t
            left join :_deletionlog d on (d.type='thread' and d.primaryid=t.threadid)
            left join :_post p on p.postid = t.firstpostid
         where d.primaryid is null
            and t.visible = 1
            $minDiscussionWhere
            $forumWhere", $discussion_Map);

        // Comments
        $comment_Map = array(
            'postid' => 'CommentID',
            'threadid' => 'DiscussionID',
            'pagetext' => 'Body',
            'Format' => 'Format',
            'ipaddress' => 'InsertIPAddress'
        );

        if ($minDiscussionID) {
            $minDiscussionWhere = "and p.threadid > $minDiscussionID";
        }

        $ex->exportTable('Comment', "select p.*,
            'BBCode' as Format,
            p.userid as InsertUserID,
            p.userid as UpdateUserID,
         FROM_UNIXTIME(p.dateline) as DateInserted,
            FROM_UNIXTIME(p.dateline) as DateUpdated
         from :_post p
         inner join :_thread t
            on p.threadid = t.threadid
         left join :_deletionlog d
            on (d.type='post' and d.primaryid=p.postid)
         where p.postid <> t.firstpostid
            and d.primaryid is null
            and p.visible = 1
            $minDiscussionWhere
            $forumWhere", $comment_Map);

        // UserDiscussion
        if ($minDiscussionID) {
            $minDiscussionWhere = "where st.threadid > $minDiscussionID";
        }

        $ex->exportTable('UserDiscussion', "select
            st.userid as UserID,
            st.threadid as DiscussionID,
            '1' as Bookmarked,
            FROM_UNIXTIME(tr.readtime) as DateLastViewed
         from :_subscribethread st
         left join :_threadread tr on tr.userid = st.userid and tr.threadid = st.threadid
         $minDiscussionWhere");
        /*$ex->exportTable('UserDiscussion', "select
             tr.userid as UserID,
             tr.threadid as DiscussionID,
             FROM_UNIXTIME(tr.readtime) as DateLastViewed,
             case when st.threadid is not null then 1 else 0 end as Bookmarked
           from :_threadread tr
           left join :_subscribethread st on tr.userid = st.userid and tr.threadid = st.threadid");*/

        // Activity (from visitor messages in vBulletin 3.8+)
        if ($ex->exists('visitormessage')) {
            if ($minDiscussionID) {
                $minDiscussionWhere = "and dateline > $minDiscussionID";
            }


            $activity_Map = array(
                'postuserid' => 'RegardingUserID',
                'userid' => 'ActivityUserID',
                'pagetext' => 'Story',
                'NotifyUserID' => 'NotifyUserID',
                'Format' => 'Format'
            );
            $ex->exportTable('Activity', "select *,
               '{RegardingUserID,you} &rarr; {ActivityUserID,you}' as HeadlineFormat,
               FROM_UNIXTIME(dateline) as DateInserted,
               FROM_UNIXTIME(dateline) as DateUpdated,
               INET_NTOA(ipaddress) as InsertIPAddress,
               postuserid as InsertUserID,
               -1 as NotifyUserID,
               'BBCode' as Format,
               'WallPost' as ActivityType
            from :_visitormessage
            where state='visible'
               $minDiscussionWhere", $activity_Map);
        }

        $this->_exportConversations($minDate);

        $this->_exportPolls();

        // Media
        if ($ex->exists('attachment')) {
            $this->exportMedia($minDiscussionID);
        }

        // IP Ban list
        $ipBanlist = $this->param('ipbanlist');
        if ($ipBanlist) {

            $ex->query("DROP TABLE IF EXISTS `z_ipbanlist` ");
            $ex->query("CREATE TABLE `z_ipbanlist` (
            `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
            `ipaddress` varchar(50) DEFAULT NULL,
           PRIMARY KEY (`id`),
           UNIQUE KEY `ipaddress` (`ipaddress`)

         ) ENGINE=InnoDB DEFAULT CHARSET=utf8");

            $result = $ex->query("select value from :_setting where varname = 'banip'");
            $row = mysql_fetch_assoc($result);

            if ($row) {
                $insertSql = 'INSERT IGNORE INTO `z_ipbanlist` (`ipaddress`) values ';
                $ipString = str_replace("\r", "", $row['value']);
                $IPs = explode("\n", $ipString);
                foreach ($IPs as $IP) {
                    $IP = trim($IP);
                    if (empty($IP)) {
                        continue;
                    }
                    $insertSql .= '(\'' . mysql_real_escape_string($IP) . '\'), ';
                }
                $insertSql = substr($insertSql, 0, -2);
                $ex->query($insertSql);

                $ban_Map = array();
                $ex->exportTable('Ban',
                    "select 'IPAddress' as BanType, ipaddress as BanValue, 'Imported ban' as Notes, NOW() as DateInserted
                  FROM `z_ipbanlist`",
                    $ban_Map);

                $ex->query('DROP table if exists `z_ipbanlist` ');

            }
        }


        // End
        $ex->endExport();
    }

    protected function _exportConversations($minDate) {
        $ex = $this->ex;

        if ($minDate) {
            $minID = $ex->getValue("
            select max(pmtextid)
            from :_pmtext
            where dateline < $minDate
            ", false);
        } else {
            $minID = false;
        }
        $minWhere = '';

        $ex->query('drop table if exists z_pmto');
        $ex->query('create table z_pmto (
        pmtextid int unsigned,
        userid int unsigned,
        primary key(pmtextid, userid)
      )');

        if ($minID) {
            $minWhere = "where pmtextid > $minID";
        }

        $ex->query("insert ignore z_pmto (
        pmtextid,
        userid
      )
      select
        pmtextid,
        userid
      from :_pm
      $minWhere");

        $ex->query("insert ignore z_pmto (
        pmtextid,
        userid
      )
      select
        pmtextid,
        fromuserid
      from :_pmtext
      $minWhere;");

        $ex->query("insert ignore z_pmto (
        pmtextid,
        userid
      )
      select
        pm.pmtextid,
        r.userid
      from :_pm pm
      join :_pmreceipt r
        on pm.pmid = r.pmid
      $minWhere;");

        $ex->query("insert ignore z_pmto (
        pmtextid,
        userid
      )
      select
        pm.pmtextid,
        r.touserid
      from :_pm pm
      join :_pmreceipt r
        on pm.pmid = r.pmid
      $minWhere;");

        $ex->query('drop table if exists z_pmto2;');
        $ex->query('create table z_pmto2 (
        pmtextid int unsigned,
        userids varchar(250),
        primary key (pmtextid)
      );');

        $ex->query('insert z_pmto2 (
        pmtextid,
        userids
      )
      select
        pmtextid,
        group_concat(userid order by userid)
      from z_pmto t
      group by t.pmtextid;');

        $ex->query('drop table if exists z_pmtext;');
        $ex->query('create table z_pmtext (
        pmtextid int unsigned,
        title varchar(250),
        title2 varchar(250),
        userids varchar(250),
        group_id int unsigned
      );');

        $ex->query("insert z_pmtext (
        pmtextid,
        title,
        title2
      )
      select
        pmtextid,
        title,
        case when title like 'Re: %' then trim(substring(title, 4)) else title end as title2
      from :_pmtext pm
      $minWhere;");
        $ex->query('create index z_idx_pmtext on z_pmtext (pmtextid);');

        $ex->query('update z_pmtext pm
      join z_pmto2 t
        on pm.pmtextid = t.pmtextid
      set pm.userids = t.userids;');

        // A conversation is a group of pmtexts with the same title and same users.

        $ex->query('drop table if exists z_pmgroup;');
        $ex->query('create table z_pmgroup (
        group_id int unsigned,
        title varchar(250),
        userids varchar(250)
      );');

        $ex->query("insert z_pmgroup (
        group_id,
        title,
        userids
      )
      select
        min(pm.pmtextid),
        pm.title2,
        t2.userids
      from z_pmtext pm
      join z_pmto2 t2
        on pm.pmtextid = t2.pmtextid
      group by pm.title2, t2.userids;");

        $ex->query('create index z_idx_pmgroup on z_pmgroup (title, userids);');
        $ex->query('create index z_idx_pmgroup2 on z_pmgroup (group_id);');

        $ex->query('update z_pmtext pm
      join z_pmgroup g
        on pm.title2 = g.title and pm.userids = g.userids
      set pm.group_id = g.group_id;');

        // Conversations.
        $conversation_Map = array(
            'pmtextid' => 'ConversationID',
            'fromuserid' => 'InsertUserID',
            'title2' => array('Column' => 'Subject', 'Type' => 'varchar(250)')
        );
        $ex->exportTable('Conversation',
            'select
         pm.*,
         g.title as title2,
         FROM_UNIXTIME(pm.dateline) as DateInserted
       from :_pmtext pm
       join z_pmgroup g
         on g.group_id = pm.pmtextid', $conversation_Map);

        // Coversation Messages.
        $conversationMessage_Map = array(
            'pmtextid' => 'MessageID',
            'group_id' => 'ConversationID',
            'message' => 'Body',
            'fromuserid' => 'InsertUserID'
        );
        $ex->exportTable('ConversationMessage',
            "select
         pm.*,
         pm2.group_id,
         'BBCode' as Format,
         FROM_UNIXTIME(pm.dateline) as DateInserted
       from :_pmtext pm
       join z_pmtext pm2
         on pm.pmtextid = pm2.pmtextid", $conversationMessage_Map);

        // User Conversation.
        $userConversation_Map = array(
            'userid' => 'UserID',
            'group_id' => 'ConversationID'
        );
        $ex->exportTable('UserConversation',
            "select
         g.group_id,
         t.userid
       from z_pmto t
       join z_pmgroup g
         on g.group_id = t.pmtextid;", $userConversation_Map);

        $ex->query('drop table if exists z_pmto');
        $ex->query('drop table if exists z_pmto2;');
        $ex->query('drop table if exists z_pmtext;');
        $ex->query('drop table if exists z_pmgroup;');
    }

    /**
     * Converts database blobs into files.
     *
     * Creates /attachments and /customavatars folders in the same directory as the export file.
     *
     * @param bool $attachments Whether to move attachments.
     * @param bool $customAvatars Whether to move avatars.
     */
    public function exportBlobs($attachments = true, $customAvatars = true) {
        $ex = $this->ex;
        if ($ex->exists('attachment', array('contenttypeid', 'contentid')) === true) {
            $extension = ExportModel::fileExtension('a.filename');
        } else {
            $extension = ExportModel::fileExtension('filename');
        }

        if ($attachments) {
            $identity = 'f.attachmentid';
            if ($ex->exists('attachment', array('contenttypeid', 'contentid')) === true
                || $ex->exists('attach') === true) {
                $identity = 'f.filedataid';
            }

            $sql = "select
               f.filedata,
               $extension as extension,
               concat('attachments/', f.userid, '/', $identity, '.', lower(extension)) as Path
               from ";

            // Table is dependent on vBulletin version (v4+ is filedata, v3 is attachment)
            if ($ex->exists('attachment', array('contenttypeid', 'contentid')) === true) {
                $sql .= ":_filedata f left join :_attachment a on a.filedataid = f.filedataid";
            } elseif ($ex->exists('attach') === true) {
                $sql .= ":_filedata f left join :_attach a on a.filedataid = f.filedataid";
            } else {
                $sql .= ":_attachment f";
            }

            $ex->exportBlobs($sql, 'filedata', 'Path');
        }

        if ($customAvatars) {
            $sql = "select
               a.filedata,
               case when a.userid is not null then concat('customavatars/', a.userid % 100,'/avatar_', a.userid, right(a.filename, instr(reverse(a.filename), '.')))
                  else null end as customphoto
            from :_customavatar a
            ";
            $sql = str_replace('u.userid', 'a.userid', $sql);
            $ex->exportBlobs($sql, 'filedata', 'customphoto', 80);
        }

        // Export the group icons no matter what.
        if ($ex->exists('socialgroupicon', 'thumbnail_filedata') && ($attachments || $customAvatars)) {
            $sql = "
            select
               i.filedata,
               concat('vb/groupicons/', i.groupid, '.', i.extension) as path
            from :_socialgroupicon i";
            $ex->exportBlobs($sql, 'filedata', 'path');
        }
    }

    /**
     * Export the attachments as Media.
     *
     * In vBulletin 4.x, the filedata table was introduced.
     */
    public function exportMedia($minDiscussionID = false) {
        $ex = $this->ex;
        $instance = $this;

        if ($minDiscussionID) {
            $discussionWhere = "and t.threadid > $minDiscussionID";
        } else {
            $discussionWhere = '';
        }
        $media_Map = array(
            'attachmentid' => 'MediaID',
            'filename' => 'Name',
            'filesize' => 'Size',
            'userid' => 'InsertUserID',
            'extension' => array('Column' => 'Type', 'Filter' => array($this, 'buildMimeType')),
            'filehash' => array('Column' => 'Path', 'Filter' => array($this, 'buildMediaPath')),
            'filethumb' => array(
                'Column' => 'ThumbPath',
                'Filter' => function($value, $field, $row) use ($instance) {
                    $filteredData = $this->filterThumbnailData($value, $field, $row);

                    if ($filteredData) {
                        return $instance->buildMediaPath($value, $field, $row);
                    } else {
                        return null;
                    }
                }
            ),
            'thumb_width' => array('Column' => 'ThumbWidth', 'Filter' => array($this, 'filterThumbnailData')),
            'height' => array('Column' => 'ImageHeight', 'Filter' => array($this, 'buildMediaDimension')),
            'width' => array('Column' => 'ImageWidth', 'Filter' => array($this, 'buildMediaDimension')),
        );

        // Add hash fields if they exist (from 2.x)
        $attachColumns = array('hash', 'filehash');
        $missing = $ex->exists('attachment', $attachColumns);
        $attachColumnsString = '';
        foreach ($attachColumns as $columnName) {
            if (in_array($columnName, $missing)) {
                $attachColumnsString .= ", null as $columnName";
            } else {
                $attachColumnsString .= ", a.$columnName";
            }
        }
        // Do the export
        if ($ex->exists('attachment', array('contenttypeid', 'contentid')) === true) {
            // Exporting 4.x with 'filedata' table.
            // Build an index to join on.
            $result = $ex->query('show index from :_thread where Key_name = "ix_thread_firstpostid"', true);
            if (!mysql_num_rows($result)) {
                $ex->query('create index ix_thread_firstpostid on :_thread (firstpostid)');
            }
            $mediaSql = "
                select
                    case
                        when t.threadid is not null then 'discussion'
                        when ct.class = 'Post' then 'comment'
                        when ct.class = 'Thread' then 'discussion'
                        else ct.class
                    end as ForeignTable,
                    case
                        when t.threadid is not null then t.threadid
                        else a.contentid
                    end as ForeignID,
                    FROM_UNIXTIME(a.dateline) as DateInserted,
                    a.*,
                    f.extension,
                    f.filesize/*,*/
                    $attachColumnsString,
                    f.width,
                    f.height,
                    'mock_value' as filethumb,
                    128 as thumb_width
                from :_attachment a
                    join :_contenttype ct on a.contenttypeid = ct.contenttypeid
                    join :_filedata f on f.filedataid = a.filedataid
                    left join :_thread t on t.firstpostid = a.contentid and a.contenttypeid = 1
                where a.contentid > 0
                    $discussionWhere
            ";
            $ex->exportTable('Media', $mediaSql, $media_Map);

        } else {
            // Exporting 3.x without 'filedata' table.
            // Do NOT grab every field to avoid 'filedata' blob in 3.x.
            // Left join 'attachment' because we can't left join 'thread' on firstpostid (not an index).
            // Lie about the height & width to spoof FileUpload serving generic thumbnail if they aren't set.
            $extension = ExportModel::fileExtension('a.filename');
            $mediaSql = "
                select
                    a.attachmentid,
                    a.filename,
                    $extension as extension/*,*/
                    $attachColumnsString,
                    a.userid,
                    'discussion' as ForeignTable,
                    t.threadid as ForeignID,
                    FROM_UNIXTIME(a.dateline) as DateInserted,
                    '1' as height,
                    '1' as width,
                    'mock_value' as filethumb,
                    128 as thumb_width
                from :_thread t
                    left join :_attachment a ON a.postid = t.firstpostid
                where a.attachmentid > 0

                union all

                select
                    a.attachmentid,
                    a.filename,
                    $extension as extension/*,*/
                    $attachColumnsString,
                    a.userid,
                    'comment' as ForeignTable,
                    a.postid as ForeignID,
                    FROM_UNIXTIME(a.dateline) as DateInserted,
                    '1' as height,
                    '1' as width,
                    'mock_value' as filethumb,
                    128 as thumb_width
                from :_post p
                    inner join :_thread t ON p.threadid = t.threadid
                    left join :_attachment a ON a.postid = p.postid
                where p.postid <> t.firstpostid and a.attachmentid > 0
            ";
            $ex->exportTable('Media', $mediaSql, $media_Map);
        }

        // files named .attach need to be named properly.
        // file needs to be renamed and db updated.
        // if its an images; we need to include .thumb
        $attachmentPath = $this->param('filepath');
        if ($attachmentPath) {
            $missingFiles = array();
            if (is_dir($attachmentPath)) {
                $ex->comment("Checking files");
                $result = $ex->query($mediaSql);
                while ($row = mysql_fetch_assoc($result)) {
                    $filePath = $this->buildMediaPath('', '', $row);
                    $cdn = $this->param('cdn', '');

                    if (!empty($cdn)) {
                        $filePath = str_replace($cdn, '', $filePath);
                    }
                    $fullPath = $attachmentPath . $filePath;
                    if (file_exists($fullPath)) {
                        continue;
                    }

                    //check if named .attach
                    $p = explode('.', $fullPath);
                    $attachFilename = str_replace(end($p), 'attach', $fullPath);
                    if (file_exists($attachFilename)) {
                        // rename file
                        rename($attachFilename, $fullPath);
                        continue;
                    }

                    //check if md5 hash in root
                    if (getValue('hash', $row)) {
                        $md5Filename = $attachmentPath . $row['hash'] . '.' . $row['extension'];
                        if (file_exists($md5Filename)) {
                            // rename file
                            rename($md5Filename, $fullPath);
                            continue;
                        }
                    }

                    $missingFiles[] = $filePath;

                }
            } else {
                $ex->comment('Attachment Path not found');
            }
            $totalMissingFiles = count($missingFiles);
            if ($totalMissingFiles > 0) {
                $ex->comment('Missing files detected.  See ./missing_files.txt for full list.');
                $ex->comment(sprintf('Total missing files %d', $totalMissingFiles));
                file_put_contents('missing-files.txt', implode("\n", $missingFiles));
            }

        }
    }

    protected function _exportPolls() {
        $ex = $this->ex;
        $fp = $ex->file;
//      $fp = fopen('php://output', 'ab');

        $poll_Map = array(
            'pollid' => 'PollID',
            'question' => 'Name',
            'threadid' => 'DiscussionID',
            'anonymous' => 'Anonymous',
            'dateline' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'postuserid' => 'InsertUserID'
        );
        $ex->exportTable('Poll',
            "select
            p.*,
            t.threadid,
            t.postuserid,
            !p.public as anonymous
         from :_poll p
         join :_thread t
            on p.pollid = t.pollid", $poll_Map);

        $pollOption_Map = array(
            'optionid' => 'PollOptionID', // calc
            'pollid' => 'PollID',
            'body' => 'Body', // calc
            'sort' => 'Sort', // calc
            'dateline' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'postuserid' => 'InsertUserID'
        );
        $sql = "select
         p.*,
         'BBCode' as Format,
         t.postuserid
      from :_poll p
      join :_thread t
         on p.pollid = t.pollid";

        // Some custom programming needs to be done here so let's do that.
        $exportStructure = $ex->getExportStructure($pollOption_Map, 'PollOption', $pollOption_Map);
        $revMappings = $ex->flipMappings($pollOption_Map);

        $ex->writeBeginTable($fp, 'PollOption', $exportStructure);

        $r = $ex->query($sql);
        $rowCount = 0;
        while ($row = mysql_fetch_assoc($r)) {
            $options = explode('|||', $row['options']);

            foreach ($options as $i => $option) {
                $row['optionid'] = $row['pollid'] * 1000 + $i + 1;
                $row['body'] = $option;
                $row['sort'] = $i;

                $ex->writeRow($fp, $row, $exportStructure, $revMappings);

                $rowCount++;
            }
        }
        mysql_free_result($r);
        $ex->writeEndTable($fp);
        $ex->comment("Exported Table: PollOption ($rowCount rows)");

        $pollVote_Map = array(
            'userid' => 'UserID',
            'optionid' => 'PollOptionID',
            'votedate' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate')
        );
        $ex->exportTable('PollVote',
            "select pv.*, pollid * 1000 + voteoption as optionid
         from :_pollvote pv", $pollVote_Map);
    }

    /**
     * Filter used by $media_Map to build attachment path.
     *
     * vBulletin 3.0+ organizes its attachments by descending 1 level per digit
     * of the userid, named as the attachmentid with a '.attach' extension.
     * Example: User #312's attachments would be in the directory /3/1/2.
     *
     * In vBulletin 2.x, files were stored as an md5 hash in the root
     * attachment directory with a '.file' extension. Existing files were not
     * moved when upgrading to 3.x so older forums will need those too.
     *
     * @access public
     * @see ExportModel::_exportTable
     *
     * @param string $value Ignored.
     * @param string $field Ignored.
     * @param array $row Contents of the current attachment record.
     * @return string Future path to file.
     */
    public function buildMediaPath($value, $field, $row) {
        if (isset($row['hash']) && $row['hash'] != '') {
            // Old school! (2.x)
            $filePath = $row['hash'] . '.' . $row['extension'];
        } else { // Newer than 3.0
            // Build user directory path
            $n = strlen($row['userid']);
            $dirParts = array();
            for ($i = 0; $i < $n; $i++) {
                $dirParts[] = $row['userid']{$i};
            }

            // 3.x uses attachmentid, 4.x uses filedataid
            $identity = (isset($row['filedataid'])) ? $row['filedataid'] : $row['attachmentid'];

            // If we're exporting blobs, simplify the folder structure.
            // Otherwise, we need to preserve vBulletin's eleventy subfolders.
            $separator = ($this->param('files', false)) ? '' : '/';
            $filePath = implode($separator, $dirParts) . '/' . $identity . '.' . $row['extension'];
        }

        // Use 'cdn' parameter to define path prefix, ex: ?cdn=~cf/
        $cdn = $this->param('cdn', '');

        return $cdn . 'attachments/' . $filePath;
    }

    /**
     * Don't allow image dimensions to creep in for non-images.
     *
     * @param $value
     * @param $field
     * @param $row
     */
    public function buildMediaDimension($value, $field, $row) {
        // Non-images get no height/width
        $ex = $this->ex;
        if ($ex->exists('attachment', array('extension'))) {
            $extension = $row['extension'];
        } else {
            $extension = end(explode('.', $row['filename']));
        }
        if (in_array(strtolower($extension), array('jpg', 'gif', 'png', 'jpeg'))) {
            return null;
        }

        return $value;
    }

    /**
     * Set valid MIME type for images.
     *
     * @access public
     * @see ExportModel::_exportTable
     *
     * @param string $value Extension from vBulletin.
     * @param string $field Ignored.
     * @param array $row Ignored.
     * @return string Extension or accurate MIME type.
     */
    public function buildMimeType($value, $field, $row) {
        switch (strtolower($value)) {
            case 'jpg':
            case 'gif':
            case 'png':
                $value = 'image/' . $value;
                break;
            case 'pdf':
            case 'zip':
                $value = 'application/' . $value;
                break;
            case 'doc':
                $value = 'application/msword';
                break;
            case 'xls':
                $value = 'application/vnd.ms-excel';
                break;
            case 'txt':
                $value = 'text/plain';
                break;
        }

        return $value;
    }

    /**
     * Filter used by $Media_Map to replace value for ThumbPath and ThumbWidth when the file is not an image.
     *
     * @access public
     * @see ExportModel::_exportTable
     *
     * @param string $value Current value
     * @param string $field Current field
     * @param array $row Contents of the current record.
     * @return string|null Return the supplied value if the record's file is an image. Return null otherwise
     */
    public function filterThumbnailData($value, $field, $row) {
        if (strpos(mimeTypeFromExtension(strtolower($row['extension'])), 'image/') === 0) {
            return $value;
        } else {
            return null;
        }
    }

    /**
     * Determine if this usergroup could likely sign in to forum based on its name.
     *
     * @param $value
     * @param $field
     * @param $row
     * @return bool
     */
    public function signInPermission($value, $field, $row) {
        $result = true;
        if (stripos($row['title'], 'unregistered') !== false) {
            $result = false;
        } elseif (stripos($row['title'], 'banned') !== false) {
            $result = false;
        }

        return $result;
    }

    /**
     * Retrieve a value from the vBulletin setting table.
     *
     * @param string $name Variable for which we want the value.
     * @return mixed Value or FALSE if not found.
     */
    public function getConfig($name) {
        $sql = "select * from :_setting where varname = '$name'";
        $result = $this->ex->query($sql, true);
        if ($row = mysql_fetch_assoc($result)) {
            return $row['value'];
        }

        return false;
    }

    /**
     * @param $value
     * @param $field
     * @param $row
     * @return bool
     */
    public function filterPermissions($value, $field, $row) {
        if (!isset(self::$permissions2[$field])) {
            return 0;
        }

        $column = self::$permissions2[$field][0];
        $mask = self::$permissions2[$field][1];

        $value = ($row[$column] & $mask) == $mask;

        return $value;
    }

    /**
     * @param $columnGroups
     * @param $map
     */
    public function addPermissionColumns($columnGroups, &$map) {
        $permissions2 = array();

        foreach ($columnGroups as $columnGroup => $columns) {
            foreach ($columns as $mask => $columnArray) {
                $columnArray = (array)$columnArray;
                foreach ($columnArray as $column) {
                    $map[$column] = array(
                        'Column' => $column,
                        'Type' => 'tinyint(1)',
                        'Filter' => array($this, 'filterPermissions')
                    );

                    $permissions2[$column] = array($columnGroup, $mask);
                }
            }
        }
        self::$permissions2 = $permissions2;
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * vBulletin 5 Connect exporter tool.
 *
 * Add this 301 route to sidestep vB4->5 upgrade category redirects.
 *    Expression: forumdisplay\.php\?([0-9]+)-([a-zA-Z0-9-_]+)
 *    Target: /categories/$2
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['vbulletin5'] = array('name' => 'vBulletin 5 Connect', 'prefix' => 'vb_');
$supported['vbulletin5']['CommandLine'] = array(
    //'noexport' => array('Whether or not to skip the export.', 'Sx' => '::'),
);
$supported['vbulletin5']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Attachments' => 1,
    'PrivateMessages' => 1,
    'Bookmarks' => 1,
    'Ranks' => 1,
    'Passwords' => 1,
    'Polls' => 1,
);

class VBulletin5 extends VBulletin {
    /** @var array Required tables => columns. */
    protected $sourceTables = array(
        'contenttype' => array('contenttypeid', 'class'),
        'node' => array('nodeid', 'description', 'title', 'description', 'userid', 'publishdate'),
        'text' => array('nodeid', 'rawtext'),
        'user' => array(
            'userid',
            'username',
            'email',
            'referrerid',
            'timezoneoffset',
            'posts',
            'birthday_search',
            'joindate',
            'lastvisit',
            'lastactivity',
            'membergroupids',
            'usergroupid',
            'usertitle',
            'avatarid',
        ),
        'userfield' => array('userid'),
        'usergroup' => array('usergroupid', 'title', 'description'),
        'usertitle' => array(),
    );

    /**
     *
     * @param ExportModel $ex
     */
    public function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('nodes');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->beginExport('', 'vBulletin 5 Connect');

        $this->exportBlobs(
            $this->param('files'),
            $this->param('avatars')
        );

        if ($this->param('noexport')) {
            $ex->comment('Skipping the export.');
            $ex->endExport();

            return;
        }

        $cdn = $this->param('cdn', '');


        // Grab all of the ranks.
        $ranks = $ex->get("select * from :_usertitle order by minposts desc", 'usertitleid');


        // Users
        $user_Map = array(
            'userid' => 'UserID',
            'username' => 'Name',
            'password2' => 'Password',
            'email' => 'Email',
            'referrerid' => 'InviteUserID',
            'timezoneoffset' => 'HourOffset',
            'ipaddress' => 'LastIPAddress',
            'ipaddress2' => 'InsertIPAddress',
            'usertitle' => 'Title',
            'posts' => array(
                'Column' => 'RankID',
                'Filter' => function ($value) use ($ranks) {
                    // Look  up the posts in the ranks table.
                    foreach ($ranks as $rankID => $row) {
                        if ($value >= $row['minposts']) {
                            return $rankID;
                        }
                    }

                    return null;
                }
            )
        );

        // Use file avatar or the result of our blob export?
        if ($this->getConfig('usefileavatar')) {
            $user_Map['filephoto'] = 'Photo';
        } else {
            $user_Map['customphoto'] = 'Photo';
        }

        // vBulletin 5.1 changes the hash to crypt(md5(password), hash).
        // Switches from password & salt to token (and scheme & secret).
        // The scheme appears to be crypt()'s default and secret looks uselessly redundant.
        if ($ex->exists('user', 'token') !== true) {
            $passwordSQL = "concat(`password`, salt) as password2, 'vbulletin' as HashMethod,";
        } else {
            // vB 5.1 already concats the salt to the password as token, BUT ADDS A SPACE OF COURSE.
            $passwordSQL = "replace(token, ' ', '') as password2, case when scheme = 'legacy' then 'vbulletin' else 'vbulletin5' end as HashMethod,";
        }

        $ex->exportTable('User', "
            select
                u.*,
                ipaddress as ipaddress2,
                $passwordSQL
                DATE_FORMAT(birthday_search,GET_FORMAT(DATE,'ISO')) as DateOfBirth,
                FROM_UNIXTIME(joindate) as DateFirstVisit,
                FROM_UNIXTIME(lastvisit) as DateLastActive,
                FROM_UNIXTIME(joindate) as DateInserted,
                FROM_UNIXTIME(lastactivity) as DateUpdated,
                case when avatarrevision > 0 then concat('$cdn', 'userpics/avatar', u.userid, '_', avatarrevision, '.gif')
                    when av.avatarpath is not null then av.avatarpath
                    else null
                end as filephoto,
                {$this->avatarSelect},
                case when ub.userid is not null then 1 else 0 end as Banned
            from :_user u
                left join :_customavatar a on u.userid = a.userid
                left join :_avatar av on u.avatarid = av.avatarid
                left join :_userban ub
                    on u.userid = ub.userid
                    and ub.liftdate <= now()
         ;", $user_Map);  // ":_" will be replaced by database prefix
        //ipdata - contains all IP records for user actions: view,visit,register,logon,logoff


        // Roles
        $role_Map = array(
            'usergroupid' => 'RoleID',
            'title' => 'Name',
            'description' => 'Description'
        );
        $ex->exportTable('Role', 'select * from :_usergroup', $role_Map);


        // UserRoles
        $userRole_Map = array(
            'userid' => 'UserID',
            'usergroupid' => 'RoleID'
        );
        $ex->query("CREATE TEMPORARY TABLE VbulletinRoles (userid INT UNSIGNED not null, usergroupid INT UNSIGNED not null)");
        # Put primary groups into tmp table
        $ex->query("insert into VbulletinRoles (userid, usergroupid) select userid, usergroupid from :_user");
        # Put stupid CSV column into tmp table
        $secondaryRoles = $ex->query("select userid, usergroupid, membergroupids from :_user", true);
        if (is_resource($secondaryRoles)) {
            while (($row = @mysql_fetch_assoc($secondaryRoles)) !== false) {
                if ($row['membergroupids'] != '') {
                    $groups = explode(',', $row['membergroupids']);
                    foreach ($groups as $groupID) {
                        $ex->query("insert into VbulletinRoles (userid, usergroupid) values({$row['userid']},{$groupID})",
                            true);
                    }
                }
            }
        }
        # Export from our tmp table and drop
        $ex->exportTable('UserRole', 'select distinct userid, usergroupid from VbulletinRoles', $userRole_Map);
        $ex->query("DROP TABLE IF EXISTS VbulletinRoles");


        // Permissions.
        $permissions_Map = array(
            'usergroupid' => 'RoleID',
            'title' => array('Column' => 'Garden.SignIn.Allow', 'Filter' => array($this, 'signInPermission')),
            'genericpermissions' => array('Column' => 'GenericPermissions', 'type' => 'int'),
            'forumpermissions' => array('Column' => 'ForumPermissions', 'type' => 'int')
        );
        $this->addPermissionColumns(self::$permissions, $permissions_Map);
        $ex->exportTable('Permission', 'select * from :_usergroup', $permissions_Map);


        // UserMeta
        /*$ex->Query("CREATE TEMPORARY TABLE VbulletinUserMeta (`UserID` INT not null ,`Name` VARCHAR( 255 ) not null ,`Value` text not null)");
        # Standard vB user data
        $UserFields = array('usertitle' => 'Title', 'homepage' => 'Website', 'skype' => 'Skype', 'styleid' => 'StyleID');
        foreach($UserFields as $Field => $InsertAs)
           $ex->Query("insert into VbulletinUserMeta (UserID, Name, Value) select userid, 'Profile.$InsertAs', $Field from :_user where $Field != ''");
        # Dynamic vB user data (userfield)
        $ProfileFields = $ex->Query("select varname, text from :_phrase where product='vbulletin' and fieldname='cprofilefield' and varname like 'field%_title'");
        if (is_resource($ProfileFields)) {
           $ProfileQueries = array();
           while ($Field = @mysql_fetch_assoc($ProfileFields)) {
              $Column = str_replace('_title', '', $Field['varname']);
              $Name = preg_replace('/[^a-zA-Z0-9_-\s]/', '', $Field['text']);
              $ProfileQueries[] = "insert into VbulletinUserMeta (UserID, Name, Value)
                 select userid, 'Profile.".$Name."', ".$Column." from :_userfield where ".$Column." != ''";
           }
           foreach ($ProfileQueries as $Query) {
              $ex->Query($Query);
           }
        }*/


        // Ranks
        $rank_Map = array(
            'usertitleid' => 'RankID',
            'title' => 'Name',
            'title2' => 'Label',
            'minposts' => array(
                'Column' => 'Attributes',
                'Filter' => function ($value) {
                    $result = array(
                        'Criteria' => array(
                            'CountPosts' => $value
                        )
                    );

                    return serialize($result);
                }
            ),
            'level' => array(
                'Column' => 'Level',
                'Filter' => function ($value) {
                    static $level = 1;

                    return $level++;
                }
            )
        );
        $ex->exportTable('Rank', "
            select
                ut.*,
                ut.title as title2,
                0 as level
            from :_usertitle ut
            order by ut.minposts
         ;", $rank_Map);


        /// Signatures
        // usertextfields.signature

        // Ignore
        // usertextfields.ignorelist

        /// Notes

        /// Warnings

        /// Activity (Wall)


        // Category.
        $channels = array();
        $categoryIDs = array();
        $homeID = 0;
        $privateMessagesID = 0;

        // Filter Channels down to Forum tree
        $channelResult = $ex->query("
            select
                n.*
            from :_node n
                left join :_contenttype ct on n.contenttypeid = ct.contenttypeid
            where ct.class = 'Channel'
        ;");

        while ($channel = mysql_fetch_array($channelResult)) {
            $channels[$channel['nodeid']] = $channel;
            if ($channel['title'] == 'Forum') {
                $homeID = $channel['nodeid'];
            }
            if ($channel['title'] == 'Private Messages') {
                $privateMessagesID = $channel['nodeid'];
            }
        }

        if (!$homeID) {
            exit("Missing node 'Forum'");
        }

        // Go through the category list 6 times to build a (up to) 6-deep hierarchy
        $categoryIDs[] = $homeID;
        for ($i = 0; $i < 6; $i++) {
            foreach ($channels as $channel) {
                if (in_array($channel['nodeid'], $categoryIDs)) {
                    continue;
                }
                if (in_array($channel['parentid'], $categoryIDs)) {
                    $categoryIDs[] = $channel['nodeid'];
                }
            }
        }
        // Drop 'Forum' from the tree
        if (($key = array_search($homeID, $categoryIDs)) !== false) {
            unset($categoryIDs[$key]);
        }

        $category_Map = array(
            'nodeid' => 'CategoryID',
            'title' => 'Name',
            'description' => 'Description',
            'userid' => 'InsertUserID',
            'parentid' => 'ParentCategoryID',
            'urlident' => 'UrlCode',
            'displayorder' => array('Column' => 'Sort', 'Type' => 'int'),
            'lastcontentid' => 'LastDiscussionID',
            'textcount' => 'CountComments', // ???
            'totalcount' => 'CountDiscussions', // ???
        );

        // Categories are Channels that were found in the Forum tree
        // If parent was 'Forum' set the parent to Root instead (-1)
        $ex->exportTable('Category', "
            select
                n.*,
                FROM_UNIXTIME(publishdate) as DateInserted,
                if(parentid={$homeID},-1,parentid) as parentid
            from :_node n
            where nodeid in (" . implode(',', $categoryIDs) . ")
        ;", $category_Map);


        /// Permission
        //permission - nodeid,(user)groupid, and it gets worse from there.


        // Discussion.
        $discussion_Map = array(
            'nodeid' => 'DiscussionID',
            'type' => 'Type',
            'title' => 'Name',
            'userid' => 'InsertUserID',
            'rawtext' => 'Body',
            'parentid' => 'CategoryID',
            'lastcontentid' => 'LastCommentID',
            'lastauthorid' => 'LastCommentUserID',
            // htmlstate - on,off,on_nl2br
            // infraction
            // attach
            // reportnodeid
        );
        $discussionQuery = "
            select
                n.nodeid,
                null as type,
                n.title,
                n.userid,
                t.rawtext,
                n.parentid,
                n.lastcontentid,
                n.lastauthorid,
                'BBCode' as Format,
                FROM_UNIXTIME(publishdate) as DateInserted,
                v.count as CountViews,
                convert(ABS(n.open-1),char(1)) as Closed,
                if(convert(n.sticky,char(1))>0,2,0) as Announce,
                null as PollID
            from :_node n
                left join :_contenttype ct on n.contenttypeid = ct.contenttypeid
                left join :_nodeview v on v.nodeid = n.nodeid
                left join :_text t on t.nodeid = n.nodeid
            where ct.class = 'Text'
                and n.showpublished = 1
                and parentid in (".implode(',', $categoryIDs).")
        ;";

        // Polls need to be wrapped in a discussion so we are gonna need to postpone discussion creations
        if ($this->_getPollsCount()) {
            // NOTE: Only polls that are directly under a channel (discussion) will be exported.
            // Vanilla poll plugin does not support polls as comments.

            $ex->query("drop table if exists vBulletinDiscussionTable;");

            // Create a temporary table to hold old discussions and to create new discussions for polls
            $ex->query("
                create table `vBulletinDiscussionTable` (
                    `nodeid` int(10) unsigned not null AUTO_INCREMENT,
                    `type` varchar(10) default null,
                    `title` varchar(255) default null,
                    `userid` int(10) unsigned default null,
                    `rawtext` mediumtext,
                    `parentid` int(11) not null,
                    `lastcontentid` int(11) not null default '0',
                    `lastauthorid` int(10) unsigned not null default '0',
                    `Format` varchar(10) not null,
                    `DateInserted` datetime not null,
                    `CountViews` int(11) not null default '1',
                    `Closed` tinyint(4) not null default '0',
                    `Announce` tinyint(4) not null default '0',
                    `PollID` int(10) unsigned, /* used to create poll->discussion mapping */
                    primary key (`nodeid`)
                )
            ;");
            $ex->query("insert into vBulletinDiscussionTable $discussionQuery");

            $this->_generatePollsDiscussion();

            // Export discussions
            $sql = "
                select
                    nodeid,
                    type,
                    title,
                    userid,
                    rawtext,
                    parentid,
                    lastcontentid,
                    lastauthorid,
                    Format,
                    DateInserted,
                    CountViews,
                    Closed,
                    Announce
                from vBulletinDiscussionTable
            ;";
            $ex->exportTable('Discussion', $sql, $discussion_Map);

            // Export polls
            $this->_exportPolls();

            // Cleanup tmp table
            $ex->query("drop table vBulletinDiscussionTable;");
        } else {
            $ex->exportTable('Discussion', $discussionQuery, $discussion_Map);
        }

        // UserDiscussion
        $userDiscussion_Map = array(
            'discussionid' => 'DiscussionID',
            'userid' => 'InsertUserID',
        );
        // Should be able to inner join `discussionread` for DateLastViewed
        // but it's blank in my sample data so I don't trust it.
        $ex->exportTable('UserDiscussion', "
            select
                s.*,
                1 as Bookmarked,
                NOW() as DateLastViewed
            from :_subscribediscussion s
        ;", $userDiscussion_Map);


        // Comment.
        // Detect inner comments (Can happen if a plugin is used)
        $innerCommentQuery = "
            select
                node.nodeid,
                nodePP.nodeid as parentid,
                node.userid,
                t.rawtext,
                'BBCode' as Format,
                FROM_UNIXTIME(node.publishdate) as DateInserted
            from :_node as node
                inner join :_contenttype as ct on ct.contenttypeid = node.contenttypeid and ct.class = 'Text' /*Inner Comment*/
                inner join :_node as nodeP on nodeP.nodeid = node.parentid
                inner join :_contenttype as ctP on ctP.contenttypeid = nodeP.contenttypeid and ctP.class = 'Text'/*Comment*/
                inner join :_node as nodePP on nodePP.nodeid = nodeP.parentid
                inner join :_contenttype as ctPP on ctPP.contenttypeid = nodePP.contenttypeid and ctPP.class = 'Text'/*Discussion*/
                inner join :_node as nodePPP on nodePPP.nodeid = nodePP.parentid
                inner join :_contenttype as ctPPP on ctPPP.contenttypeid = nodePPP.contenttypeid and ctPPP.class = 'Channel'/*Category*/
                left join :_text t on t.nodeid = node.nodeid
            where node.showpublished = 1
        ";
        $result = $ex->query($innerCommentQuery.' limit 1', true);

        $innerCommentSQLFix = null;
        if (mysql_num_rows($result)) {
            $ex->query("
                create table `vBulletinInnerCommentTable` (
                    `nodeid` int(10) unsigned not null,
                    `parentid` int(11) not null,
                    `userid` int(10) unsigned default null,
                    `rawtext` mediumtext,
                    `Format` varchar(10) not null,
                    `DateInserted` datetime not null,
                    primary key (`nodeid`)
                )
            ;");
            $ex->query("insert into vBulletinInnerCommentTable $innerCommentQuery");

            $innerCommentSQLFix = "
                and n.nodeid not in (select nodeid from vBulletinInnerCommentTable)

            union all

            select * from vBulletinInnerCommentTable
            ";
        }

        $comment_Map = array(
            'nodeid' => 'CommentID',
            'rawtext' => 'Body',
            'userid' => 'InsertUserID',
            'parentid' => 'DiscussionID',
        );

        $ex->exportTable('Comment', "
            select
                n.nodeid,
                n.parentid,
                n.userid,
                t.rawtext,
                'BBCode' as Format,
                FROM_UNIXTIME(publishdate) as DateInserted
            from :_node n
                left join :_contenttype c on n.contenttypeid = c.contenttypeid
                left join :_text t on t.nodeid = n.nodeid
            where c.class = 'Text'
                and n.showpublished = 1
                and parentid not in (".implode(',', $categoryIDs).")
                $innerCommentSQLFix
        ", $comment_Map);

        if ($innerCommentSQLFix !== null) {
            $ex->query("drop table if exists vBulletinInnerCommentTable");
        }

        /// Drafts
        // autosavetext table

        $instance = $this;
        // Media
        $media_Map = array(
            'nodeid' => 'MediaID',
            'filename' => 'Name',
            'extension' => array('Column' => 'Type', 'Filter' => array($this, 'buildMimeType')),
            'Path2' => array('Column' => 'Path', 'Filter' => array($this, 'buildMediaPath')),
            'ThumbPath2' => array(
                'Column' => 'ThumbPath',
                'Filter' => function($value, $field, $row) use ($instance) {
                    $filteredData = $this->filterThumbnailData($value, $field, $row);

                    if ($filteredData) {
                        return $instance->buildMediaPath($value, $field, $row);
                    } else {
                        return null;
                    }
                }
            ),
            'thumb_width' => array('Column' => 'ThumbWidth', 'Filter' => array($this, 'filterThumbnailData')),
            'width' => 'ImageWidth',
            'height' => 'ImageHeight',
            'filesize' => 'Size',
        );
        $ex->exportTable('Media', "
            select
                a.*,
                filename as Path2,
                filename as ThumbPath2,
                128 as thumb_width,
                FROM_UNIXTIME(f.dateline) as DateInserted,
                f.userid as userid,
                f.userid as InsertUserID,
                if (f.width,f.width,1) as width,
                if (f.height,f.height,1) as height,
                n.parentid as ForeignID,
                f.extension,
                f.filesize,
                if(n2.parentid in (" . implode(',', $categoryIDs) . "),'discussion','comment') as ForeignTable
            from :_attach a
                left join :_node n on n.nodeid = a.nodeid
                left join :_filedata f on f.filedataid = a.filedataid
                left join :_node n2 on n.parentid = n2.nodeid
            where a.visible = 1
        ;", $media_Map);
        // left join :_contenttype c on n.contenttypeid = c.contenttypeid


        // Conversations.
        $conversation_Map = array(
            'nodeid' => 'ConversationID',
            'userid' => 'InsertUserID',
            'totalcount' => 'CountMessages',
            'title' => 'Subject',
        );
        $ex->exportTable('Conversation', "
            select
                n.*,
                n.nodeid as FirstMessageID,
                FROM_UNIXTIME(n.publishdate) as DateInserted
            from :_node n
                left join :_text t on t.nodeid = n.nodeid
            where parentid = $privateMessagesID
                and t.rawtext <> ''
        ;", $conversation_Map);


        // Conversation Messages.
        $conversationMessage_Map = array(
            'nodeid' => 'MessageID',
            'rawtext' => 'Body',
            'userid' => 'InsertUserID'
        );
        $ex->exportTable('ConversationMessage', "
            select
                n.*,
                t.rawtext,
                'BBCode' as Format,
                if(n.parentid<>$privateMessagesID,n.parentid,n.nodeid) as ConversationID,
                FROM_UNIXTIME(n.publishdate) as DateInserted
            from :_node n
                left join :_contenttype c on n.contenttypeid = c.contenttypeid
                left join :_text t on t.nodeid = n.nodeid
            where c.class = 'PrivateMessage'
                and t.rawtext <> ''
        ;", $conversationMessage_Map);


        // User Conversation.
        $userConversation_Map = array(
            'userid' => 'UserID',
            'nodeid' => 'ConversationID',
            'deleted' => 'Deleted'
        );
        // would be nicer to do an intermediary table to sum s.msgread for uc.CountReadMessages
        $ex->exportTable('UserConversation', "
            select
                s.*
            from :_sentto s
        ;", $userConversation_Map);


        /// Groups
        // class='SocialGroup'
        // class='SocialGroupDiscussion'
        // class='SocialGroupMessage'


        $ex->endExport();
    }

    /**
     * @return int Number of poll that can be exported by the porter.
     */
    protected function _getPollsCount() {
        $count = 0;

        $sql = "show tables like ':_poll';";
        $result = $this->ex->query($sql, true);

        if (mysql_num_rows($result) === 1) {
            $sql = "
                select count(*) AS Count
                from :_poll as p
                    inner join :_node as n on n.nodeid = p.nodeid
                    inner join :_node as pn on pn.nodeid = n.parentid
                    inner join :_contenttype as ct on ct.contenttypeid = pn.contenttypeid
                where ct.class = 'Channel'
            ;";

            $result = $this->ex->query($sql);
            if ($row = mysql_fetch_assoc($result)) {
                $count = $row['Count'];
            }
        }

        return $count;
    }

    /**
     * Generate discussions for polls.
     */
    protected function _generatePollsDiscussion() {
        $ex = $this->ex;

        $pollsThatNeedWrappingQuery = "
            select
                'poll' as type,
                n.title,
                n.userid,
                t.rawtext,
                n.parentid,
                n.lastcontentid,
                n.lastauthorid,
                'BBCode' as Format,
                FROM_UNIXTIME(n.publishdate) as DateInserted,
                v.count as CountViews,
                convert(ABS(n.open-1),char(1)) as Closed,
                if(convert(n.sticky,char(1))>0,2,0) as Announce,
                n.nodeid as PollID

            from :_poll as p
                inner join :_node as n on n.nodeid = p.nodeid
                inner join :_node as pn on pn.nodeid = n.parentid
                inner join :_contenttype as ct on ct.contenttypeid = pn.contenttypeid
                left join :_nodeview v on v.nodeid = n.nodeid
                left join :_text t on t.nodeid = n.nodeid
            where ct.class = 'Channel'
        ;";

        $sql = "
            insert into vBulletinDiscussionTable(
                /* `nodeid`, will be auto generated */
                `type`,
                `title`,
                `userid`,
                `rawtext`,
                `parentid`,
                `lastcontentid`,
                `lastauthorid`,
                `Format`,
                `DateInserted`,
                `CountViews`,
                `Closed`,
                `Announce`,
                `PollID`
            ) $pollsThatNeedWrappingQuery
        ";

        $ex->query($sql);
    }

    protected function _exportPolls() {
        $ex = $this->ex;
        $fp = $ex->file;

        $poll_Map = array(
            'nodeid' => 'PollID',
            'title' => 'Name',
            'discussionid' => 'DiscussionID',
            'anonymous' => 'Anonymous',
            'created' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'userid' => 'InsertUserId',
        );
        $ex->exportTable('Poll', "
            select
                p.nodeid,
                n.title,
                vbdt.nodeid as discussionid,
                !p.public as anonymous,
                n.created,
                n.userid
            from :_poll as p
                inner join :_node as n on n.nodeid = p.nodeid
                inner join :_node as pn on pn.nodeid = n.parentid
                inner join :_contenttype as pct on pct.contenttypeid = pn.contenttypeid
                /* by inner joining on this table we are only exporting polls that could be wrapped in a discussion */
                inner join vBulletinDiscussionTable as vbdt on vbdt.PollID = p.nodeid
        ;", $poll_Map);

        $pollOption_Map = array(
            'polloptionid' => 'PollOptionID',
            'nodeid' => 'PollID',
            'title' => 'Body',
            'format' => 'Format',
            'sort' => 'Sort',
            'created' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'userid' => 'InsertUserID',
        );
        $sql = "
            select
                po.polloptionid,
                po.nodeid,
                po.title,
                'BBCode' as format,
                null as Sort,
                n.created,
                n.userid
            from :_polloption as po
                left join :_node as n on n.nodeid = po.nodeid
        ;";

        // We have to generate a sort order so let's do the exportation manually line by line....
        $exportStructure = $ex->getExportStructure($pollOption_Map, 'PollOption', $pollOption_Map);
        $revMappings = $ex->flipMappings($pollOption_Map);

        $ex->writeBeginTable($fp, 'PollOption', $exportStructure);

        $result = $ex->query($sql);
        $currentPollID = null;
        $currentSortID = 0;
        while ($row = mysql_fetch_assoc($result)) {

            if ($currentPollID !== $row['nodeid']) {
                $currentPollID = $row['nodeid'];
                $currentSortID = 0;
            }

            $row['sort'] = ++$currentSortID;

            $ex->writeRow($fp, $row, $exportStructure, $revMappings);
        }
        $ex->writeEndTable($fp);
        $ex->comment("Exported Table: PollOption (".mysql_num_rows($result)." rows)");
        mysql_free_result($result);

        $pollVote_Map = array(
            'userid' => 'UserID',
            'polloptionid' => 'PollOptionID',
            'votedate' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate')
        );
        $ex->exportTable('PollVote', "
            select
                pv.userid,
                pv.polloptionid,
                pv.votedate
            from :_pollvote pv
        ;", $pollVote_Map);
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * WebWiz exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['webwiz'] = array('name' => 'Web Wiz Forums', 'prefix' => 'tbl');
$supported['webwiz']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'PrivateMessages' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
);

class WebWiz extends ExportController {
    /**
     *
     * @param ExportModel $ex
     */
    public function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('Topic');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->beginExport('', 'Web Wiz Forums');
        $ex->sourcePrefix = 'tbl';

//      // Permissions.
//      $Permission_Map = array(
//          'group_id' => 'RoleID',
//          'can_access_cp' => 'Garden.Settings.View',
//          'can_access_edit' => 'Vanilla.Discussions.Edit',
//          'can_edit_all_comments' => 'Vanilla.Comments.Edit',
//          'can_access_admin' => 'Garden.Settings.Manage',
//          'can_admin_members' => 'Garden.Users.Edit',
//          'can_moderate_comments' => 'Garden.Moderation.Manage',
//          'can_view_profiles' => 'Garden.Profiles.View',
//          'can_post_comments' => 'Vanilla.Comments.Add',
//          'can_view_online_system' => 'Vanilla.Discussions.View',
//          'can_sign_in' => 'Garden.SignIn.Allow',
//          'can_view_profiles3' => 'Garden.Activity.View',
//          'can_post_comments2' => 'Vanilla.Discussions.Add'
//      );
//      $Permission_Map = $ex->FixPermissionColumns($Permission_Map);
//      foreach ($Permission_Map as $Column => &$Info) {
//         if (is_array($Info) && isset($Info['Column']))
//            $Info['Filter'] = array($this, 'Bool');
//      }
//
//      $ex->ExportTable('Permission', "
//         select
//            g.can_view_profiles as can_view_profiles2,
//            g.can_view_profiles as can_view_profiles3,
//            g.can_post_comments as can_post_comments2,
//            g.can_post_comments as can_sign_in,
//            case when can_access_admin = 'y' then 'all' when can_view_online_system = 'y' then 'view' end as _Permissions,
//            g.*
//         from forum_member_groups g
//      ", $Permission_Map);


        // User.
        $user_Map = array(
            'Author_ID' => 'UserID',
            'Username' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'Real_name' => array('Column' => 'FullName', 'Type' => 'varchar(50)', 'Filter' => 'HTMLDecoder'),
            'Password2' => 'Password',
            'Gender2' => 'Gender',
            'Author_email' => 'Email',
            'Photo2' => array('Column' => 'Photo', 'Filter' => 'HTMLDecoder'),
            'Login_IP' => 'LastIPAddress',
            'Banned' => 'Banned',
            'Join_date' => array('Column' => 'DateInserted'),
            'Last_visit' => array('Column' => 'DateLastActive'),
            'Location' => array('Column' => 'Location', 'Filter' => 'HTMLDecoder'),
            'DOB' => 'DateOfBirth',
            'Show_email' => 'ShowEmail'
        );
        $ex->exportTable('User', "
         select
            concat(Salt, '$', Password) as Password2,
            case u.Gender when 'Male' then 'm' when 'Female' then 'f' else 'u' end as Gender2,
         case when Avatar like 'http%' then Avatar when Avatar > '' then concat('webwiz/', Avatar) else null end as Photo2,
            'webwiz' as HashMethod,
            u.*
         from :_Author u
         ", $user_Map);


        // Role.
        $role_Map = array(
            'Group_ID' => 'RoleID',
            'Name' => 'Name'
        );
        $ex->exportTable('Role', "
         select *
         from :_Group", $role_Map);

        // User Role.
        $userRole_Map = array(
            'Author_ID' => 'UserID',
            'Group_ID' => 'RoleID'
        );
        $ex->exportTable('UserRole', "
         select u.*
         from :_Author u", $userRole_Map);

        // UserMeta
        $ex->exportTable('UserMeta', "
         select
            Author_ID as UserID,
            'Plugin.Signatures.Sig' as `Name`,
            Signature as `Value`
         from :_Author
         where Signature <> ''");

        // Category.
        $category_Map = array(
            'Forum_ID' => 'CategoryID',
            'Forum_name' => 'Name',
            'Forum_description' => 'Description',
            'Parent_ID' => 'ParentCategoryID',
            'Forum_order' => 'Sort'
        );
        $ex->exportTable('Category', "
         select
            f.Forum_ID,
            f.Cat_ID * 1000 as Parent_ID,
            f.Forum_order,
            f.Forum_name,
            f.Forum_description
         from :_Forum f

         union all

         select
            c.Cat_ID * 1000,
            null,
            c.Cat_order,
            c.Cat_name,
            null
         from :_Category c
         ", $category_Map);

        // Discussion.
        $discussion_Map = array(
            'Topic_ID' => 'DiscussionID',
            'Forum_ID' => 'CategoryID',
            'Author_ID' => 'InsertUserID',
            'Subject' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'IP_addr' => 'InsertIPAddress',
            'Message' => array('Column' => 'Body'),
            'Format' => 'Format',
            'Message_date' => array('Column' => 'DateInserted'),
            'No_of_views' => 'CountViews',
            'Locked' => 'Closed',

        );
        $ex->exportTable('Discussion', "
         select
            th.Author_ID,
            th.Message,
            th.Message_date,
            th.IP_addr,
            'Html' as Format,
            t.*
         from :_Topic t
         join :_Thread th
            on t.Start_Thread_ID = th.Thread_ID", $discussion_Map);

        // Comment.
        $comment_Map = array(
            'Thread_ID' => 'CommentID',
            'Topic_ID' => 'DiscussionID',
            'Author_ID' => 'InsertUserID',
            'IP_addr' => 'InsertIPAddress',
            'Message' => array('Column' => 'Body'),
            'Format' => 'Format',
            'Message_date' => array('Column' => 'DateInserted')
        );
        $ex->exportTable('Comment', "
      select
         th.*,
         'Html' as Format
      from :_Thread th
      join :_Topic t
         on t.Topic_ID = th.Topic_ID
      where th.Thread_ID <> t.Start_Thread_ID", $comment_Map);

        $this->exportConversations();

        $ex->endExport();
    }

    public function exportConversations() {
        $ex = $this->ex;

        $this->_exportConversationTemps();

        // Conversation.
        $conversation_Map = array(
            'PM_ID' => 'ConversationID',
            'Title' => array('Column' => 'Subject', 'Type' => 'varchar(255)'),
            'Author_ID' => 'InsertUserID',
            'PM_Message_Date' => array('Column' => 'DateInserted')
        );
        $ex->exportTable('Conversation', "
         select
            pm.*,
            g.Title
         from :_PMMessage pm
         join z_pmgroup g
            on pm.PM_ID = g.Group_ID;", $conversation_Map);

        // User Conversation.
        $userConversation_Map = array(
            'Group_ID' => 'ConversationID',
            'User_ID' => 'UserID'
        );
        $ex->exportTable('UserConversation', "
         select
            g.Group_ID,
            t.User_ID
         from z_pmto t
         join z_pmgroup g
            on g.Group_ID = t.PM_ID;", $userConversation_Map);

        // Conversation Message.
        $message_Map = array(
            'Group_ID' => 'ConversationID',
            'PM_ID' => 'MessageID',
            'PM_Message' => 'Body',
            'Format' => 'Format',
            'PM_Message_Date' => array('Column' => 'DateInserted'),
            'Author_ID' => 'InsertUserID'
        );
        $ex->exportTable('ConversationMessage', "
         select
            pm.*,
            pm2.Group_ID,
            'Html' as Format
          from :_PMMessage pm
          join z_pmtext pm2
            on pm.PM_ID = pm2.PM_ID;", $message_Map);
    }

    protected function _exportConversationTemps() {
        $sql = "
         drop table if exists z_pmto;

         create table z_pmto (
            PM_ID int unsigned,
            User_ID int,
            primary key(PM_ID, User_ID)
            );

         insert ignore z_pmto (
            PM_ID,
            User_ID
         )
         select
            PM_ID,
            Author_ID
         from :_PMMessage;

         insert ignore z_pmto (
            PM_ID,
            User_ID
         )
         select
            PM_ID,
            From_ID
         from :_PMMessage;

         drop table if exists z_pmto2;
         create table z_pmto2 (
            PM_ID int unsigned,
             UserIDs varchar(250),
             primary key (PM_ID)
         );

         replace z_pmto2 (
            PM_ID,
            UserIDs
         )
         select
            PM_ID,
            group_concat(User_ID order by User_ID)
         from z_pmto
         group by PM_ID;

         drop table if exists z_pmtext;
         create table z_pmtext (
            PM_ID int unsigned,
            Title varchar(250),
             Title2 varchar(250),
             UserIDs varchar(250),
             Group_ID int unsigned
         );

         insert z_pmtext (
            PM_ID,
            Title,
            Title2
         )
         select
            PM_ID,
            PM_Tittle,
            case when PM_Tittle like 'Re:%' then trim(substring(PM_Tittle, 4)) else PM_Tittle end as Title2
         from :_PMMessage;

         create index z_idx_pmtext on z_pmtext (PM_ID);

         update z_pmtext pm
         join z_pmto2 t
            on pm.PM_ID = t.PM_ID
         set pm.UserIDs = t.UserIDs;

         drop table if exists z_pmgroup;

         create table z_pmgroup (
                 Group_ID int unsigned,
                 Title varchar(250),
                 UserIDs varchar(250)
               );

         insert z_pmgroup (
                 Group_ID,
                 Title,
                 UserIDs
               )
               select
                 min(pm.PM_ID),
                 pm.Title2,
                 t2.UserIDs
               from z_pmtext pm
               join z_pmto2 t2
                 on pm.PM_ID = t2.PM_ID
               group by pm.Title2, t2.UserIDs;

         create index z_idx_pmgroup on z_pmgroup (Title, UserIDs);
         create index z_idx_pmgroup2 on z_pmgroup (Group_ID);

         update z_pmtext pm
               join z_pmgroup g
                 on pm.Title2 = g.Title and pm.UserIDs = g.UserIDs
               set pm.Group_ID = g.Group_ID;";

        $this->ex->queryN($sql);
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * WordPress exporter tool.
 *
 * @copyright Vanilla Forums Inc. 2010-2015
 * @license GNU GPL2
 * @package VanillaPorter
 * @see functions.commandline.php for command line usage.
 */

$supported['wordpress'] = array(
    'name' => 'WordPress',
    'prefix' => 'wp_'
);
$supported['wordpress']['CommandLine'] = array(
    'importguest' => array(
        'Create users for guest comments and import their content',
        'Sx' => '::'
    )
);
$supported['wordpress']['features'] = array(
    'Categories' => 1,
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1
);
class Wordpress extends ExportController {
    /**
     * Main export process.
     *
     * @param ExportModel $ex
     * @see $_Structures in ExportModel for allowed destination tables & columns.
     */
    public function forumExport($ex) {
        $importguest = $this->param('importguest', '');
        $cdn = $this->param('cdn', '~cf/');

        // Get the characterset for the comments.
        $characterSet = $ex->getCharacterSet('comments');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        // Reiterate the platform name here to be included in the porter file header.
        $ex->beginExport('', 'WordPress');

        // User.
        if ($importguest) {
            $ex->query("drop table if exists z_User");
            $ex->query("create table z_User (
                UserID int(11) not null auto_increment,
                Name varchar(50) not null,
                Password varbinary(100) not null,
                HashMethod varchar(10) default null,
                Email varchar(100) not null,
                DateInserted datetime not null,
                Guest tinyint(4) not null default '0',
                primary key (UserID),
                unique key Email (Email)
            ) engine=InnoDB");

            $ex->query("
                insert into z_User (UserID, Name, Password, HashMethod, Email, DateInserted, Guest)

                select ID as UserID, user_nicename as Name, user_pass as Password, 'Vanilla' as HashMethod,
		            case when user_email = '' then
			            concat(user_nicename, '@forum')
		            else
			            user_email
		            end as Email, user_registered as DateInserted, 0 as Guest
                from :_users");

            $ex->query("
                insert ignore into z_User (Name, Password, HashMethod, Email, DateInserted, Guest)

                select comment_author as Name,  '' as Password, 'Reset' as HashMethod, comment_author_email as Email,
                    now() as DateInserted, 1 as Guest
                from :_comments
                where user_id < 1");

            $user_Map = array();
            $ex->exportTable('User', "
                select *
                from z_User", $user_Map);
        } else {
            $user_Map = array();
            $ex->exportTable('User', "
                select user_nicename as Name, user_email as Email, user_pass as Password,
                    'Vanilla' as HashMethod, user_registered as DateInserted
                from :_users", $user_Map);
        }

        // Role.
        $ex->query("drop table if exists z_Role");
        $ex->query("create table z_Role (
            RoleID int(11) not null auto_increment,
            Name varchar(100) collate utf8_unicode_ci not null,
            Description varchar(500) collate utf8_unicode_ci default null,
            Type enum('guest','unconfirmed','applicant','member','moderator','administrator') collate utf8_unicode_ci default null,
            Sort int(11) default null,
            Deletable tinyint(4) not null default '1',
            CanSession tinyint(4) not null default '1',
            PersonalInfo tinyint(4) not null default '0',
            primary key (`RoleID`)
            ) engine=InnoDB default charset=utf8 collate=utf8_unicode_ci");
        $ex->comment("Generating Vanilla roles...");
        $ex->query("insert into z_Role (RoleID, Name, Description, Type, Sort, Deletable, CanSession, PersonalInfo)
            values
            (2, 'Guest', 'Guests can only view content. Anyone browsing the site who is not signed in is considered to be a \"Guest\".', 'guest', 1, 0, 0, 0),
            (3, 'Unconfirmed', 'Users must confirm their emails before becoming full members. They get assigned to this role.', 'unconfirmed', 2, 0, 1, 0),
            (4, 'Applicant', 'Users who have applied for membership, but have not yet been accepted. They have the same permissions as guests.', 'applicant', 3, 0, 1, 0),
            (8, 'Member', 'Members can participate in discussions.', 'member', 4, 1, 1, 0),
            (16, 'Administrator', 'Administrators have permission to do anything.', 'administrator', 6, 1, 1, 0),
            (32, 'Moderator', 'Moderators have permission to edit most content.', 'moderator', 5, 1, 1, 0);");
        $ex->exportTable('Role', "select * from z_Role", $user_Map);

        // UserRole.
        $userRole_Map = array(
            'SerializedRole' => array(
                'Column' => 'RoleID',
                'Filter' => function ($value, $field, $row) {
                    $roleID = '8';

                    if ($role = unserialize($value)) {
                        switch ($role) {
                            case 'administrator':
                                $roleID = '16';
                                break;
                            case 'editor':
                                $roleID = '32';
                                break;
                        }
                    }

                    return $roleID;
                }
            )
        );

        if ($importguest) {
            $ex->exportTable(
                'UserRole', "
                select u.UserID, um.meta_value as SerializedRole
                from z_User u
	                left join :_usermeta um on u.UserID = um.user_id and um.meta_key = 'wp_capabilities'", $userRole_Map
            );
        } else {
            $ex->exportTable(
                'UserRole', "
                SELECT u.ID AS UserID, um.meta_value AS SerializedRole
                FROM :_users u
	                LEFT JOIN :_usermeta um ON u.ID = um.user_id AND um.meta_key = 'wp_capabilities'", $userRole_Map
            );
        }

        // Category
        $category_Map = array();
        $ex->exportTable('Category', "
            select term_id as CategoryID, name as Name, slug as UrlCode,
                if(parent = 0, -1, parent) as ParentCategoryID
            from :_terms t left join :_term_taxonomy tt using (term_id)
            where tt.taxonomy = 'category'", $category_Map);


        // Discussion
        $discussion_Map = array();
        $ex->exportTable('Discussion', "
            select id as DiscussionID, post_author as InsertUserID, post_date_gmt as DateInserted, post_content as Body,
                post_title as Name, 'Html' as Format, c.term_id as CategoryID,
                if(p.comment_status = 'open',0,1) as Closed,
                md5(p.guid) as ForeignID
            from :_posts p
                left join (select object_id as post_id, term_id
                    from :_term_relationships tr
                    left join :_term_taxonomy tt on tr.term_taxonomy_id = tt.term_taxonomy_id
                    where tt.taxonomy = 'category') as c on p.id = c.post_id
            where post_status = 'publish'
            and post_type = 'post'", $discussion_Map);


        // Comment
        $comment_Map = array();
        if ($importguest) {
            $ex->exportTable('Comment', "
            select comment_id as CommentID, comment_post_id as DiscussionID, user_id as InsertUserID,
	            comment_content as Body, 'Html' as Format, comment_date as DateInserted
            from wp_comments
            where user_id > 0 and comment_type not in ('pingback', 'trackback')

            union

            select c.comment_id as CommentID, c.comment_post_id as DiscussionID, u.UserID as InsertUserID,
	            c.comment_content as Body, 'Html' as Format, c.comment_date as DateInserted
            from wp_comments c
	            join z_User u on c.comment_author_email = u.Email
            where user_id < 1 and comment_type not in ('pingback', 'trackback')", $comment_Map);
        } else {
            $ex->exportTable('Comment', "
            select comment_id as CommentID, comment_post_id as DiscussionID, user_id as InsertUserID,
                comment_content as Body, 'Html' as Format, comment_date_gmt as DateInserted
            from :_comments
            where user_id > 0 and comment_type not in ('pingback', 'trackback')", $comment_Map);
        }


        // Tag
        $tag_Map = array();
        $ex->exportTable('Tag', "
            select term_id as TagID, name as FullName, slug as Name
            from :_terms t left join :_term_taxonomy tt using (term_id)
            where tt.taxonomy = 'post_tag'", $tag_Map);


        // TagDiscussion
        $tagDiscussion_Map = array();
        $ex->exportTable('TagDiscussion', "
            select term_id as TagID, object_id as DiscussionID
            from :_term_relationships tr left join :_term_taxonomy tt using (term_taxonomy_id)
            where tt.taxonomy = 'post_tag'", $tagDiscussion_Map);


        // End
        $ex->endExport();
    }
}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * Xenforo exporter tool.
 *
 * To export avatars, provide ?avatars=1&folder=/path/to/avatars
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['xenforo'] = array('name' => 'Xenforo', 'prefix' => 'xf_');
$supported['xenforo']['CommandLine'] = array(
    'avatarpath' => array('Full path of source avatars to process.', 'Sx' => ':', 'Field' => 'avatarpath'),
);
$supported['xenforo']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Passwords' => 1,
    'PrivateMessages' => 1,
    'Permissions' => 1,
    'Signatures' => 1,
);

class Xenforo extends ExportController {

    protected $processed;
    protected $sourceFolder;
    protected $targetFolder;
    protected $folders;
    protected $types;

    /**
     * Export avatars into vanilla-compatibles names
     */
    public function doAvatars() {

        // Check source folder
        $this->sourceFolder = $this->param('avatarpath');
        if (!is_dir($this->sourceFolder)) {
            trigger_error("Source avatar folder '{$this->sourceFolder}' does not exist.");
        }

        // Set up a target folder
        $this->targetFolder = combinePaths(array($this->sourceFolder, 'xf'));
        if (!is_dir($this->targetFolder)) {
            @$made = mkdir($this->targetFolder, 0777, true);
            if (!$made) {
                trigger_error("Target avatar folder '{$this->targetFolder}' could not be created.");
            }
        }

        // Iterate
        $this->folders = array(
            'Thumb' => 'm',
            'Profile' => 'l'
        );

        $this->types = array(
            'Thumb' => 'n',
            'Profile' => 'p'
        );

        foreach ($this->folders as $type => $folder) {

            $this->processed = 0;
            $errors = array();

            $typeSourceFolder = combinePaths(array($this->sourceFolder, $folder));
            echo "Processing '{$type}' files in {$typeSourceFolder}:\n";
            $this->avatarFolder($typeSourceFolder, $type, $errors);

            $nErrors = sizeof($errors);
            if ($nErrors) {
                echo "{$nErrors} errors:\n";
                foreach ($errors as $error) {
                    echo "{$error}\n";
                }
            }

        }
    }

    protected function avatarFolder($folder, $type, &$errors) {
        if (!is_dir($folder)) {
            trigger_error("Target avatar folder '{$folder}' does not exist.");
        }
        $resFolder = opendir($folder);

        $errors = array();
        while (($file = readdir($resFolder)) !== false) {
            if ($file == '.' || $file == '..') {
                continue;
            }

            $fullPath = combinePaths(array($folder, $file));

            // Folder? Recurse
            if (is_dir($fullPath)) {
                $this->avatarFolder($fullPath, $type, $errors);
                continue;
            }

            $this->processed++;

            // Determine target paths and name
            $photo = trim($file);
            $photoSrc = combinePaths(array($folder, $photo));
            $photoFileName = basename($photoSrc);
            $photoPath = dirname($photoSrc);

            $stubFolder = getValue($type, $this->folders);
            $trimFolder = combinePaths(array($this->sourceFolder, $stubFolder));
            $photoPath = str_replace($trimFolder, '', $photoPath);
            $photoFolder = combinePaths(array($this->targetFolder, $photoPath));
            @mkdir($photoFolder, 0777, true);

            if (!file_exists($photoSrc)) {
                $errors[] = "Missing file: {$photoSrc}";
                continue;
            }

            $typePrefix = getValue($type, $this->types);
            $photoDest = combinePaths(array($photoFolder, "{$typePrefix}{$photoFileName}"));
            $copied = @copy($photoSrc, $photoDest);
            if (!$copied) {
                $errors[] = "! failed to copy photo '{$photoSrc}' (-> {$photoDest}).";
            }

            if (!($this->processed % 100)) {
                echo " - processed {$this->processed}\n";
            }
        }
    }

    /*
     * Forum-specific export format.
     * @param ExportModel $ex
     */

    protected function forumExport($ex) {
        $this->ex = $ex;

        $cdn = $this->cdnPrefix();

        $characterSet = $ex->getCharacterSet('posts');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->sourcePrefix = 'xf_';
//      $ex->UseCompression(FALSE);
        // Begin
        $ex->beginExport('', 'xenforo', array('HashMethod' => 'xenforo'));

        // Export avatars
        if ($this->param('avatars')) {
            $this->doAvatars();
        }

        // Users.
        $user_Map = array(
            'user_id' => 'UserID',
            'username' => 'Name',
            'email' => 'Email',
            'gender' => array(
                'Column' => 'Gender',
                'Filter' => function ($value) {
                    switch ($value) {
                        case 'male':
                            return 'm';
                        case 'female':
                            return 'f';
                        default:
                            return 'u';
                    }
                }
            ),
            'custom_title' => 'Title',
            'register_date' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'last_activity' => array('Column' => 'DateLastActive', 'Filter' => 'timestampToDate'),
            'is_admin' => 'Admin',
            'is_banned' => 'Banned',
            'password' => 'Password',
            'hash_method' => 'HashMethod',
            'avatar' => 'Photo'
        );
        $ex->exportTable('User', "
         select
            u.*,
            ua.data as password,
            'xenforo' as hash_method,
            case when u.avatar_date > 0 then concat('{$cdn}xf/', u.user_id div 1000, '/', u.user_id, '.jpg') else null end as avatar
         from :_user u
         left join :_user_authenticate ua
            on u.user_id = ua.user_id", $user_Map);

        // Roles.
        $role_Map = array(
            'user_group_id' => 'RoleID',
            'title' => 'Name'
        );
        $ex->exportTable('Role', "
         select *
         from :_user_group", $role_Map);

        // User Roles.
        $userRole_Map = array(
            'user_id' => 'UserID',
            'user_group_id' => 'RoleID'
        );

        $ex->exportTable('UserRole', "
         select user_id, user_group_id
         from :_user

         union all

         select u.user_id, ua.user_group_id
         from :_user u
         join :_user_group ua
            on find_in_set(ua.user_group_id, u.secondary_group_ids)", $userRole_Map);

        // Permission.
        $this->exportPermissions();

        // User Meta.
        $this->exportUserMeta();

        // Categories.
        $category_Map = array(
            'node_id' => 'CategoryID',
            'title' => 'Name',
            'description' => 'Description',
            'parent_node_id' => array(
                'Column' => 'ParentCategoryID',
                'Filter' => function ($value) {
                    return $value ? $value : null;
                }
            ),
            'display_order' => 'Sort',
            'display_in_list' => array('Column' => 'HideAllDiscussions', 'Filter' => 'NotFilter')
        );
        $ex->exportTable('Category', "
         select n.*
         from :_node n
         ", $category_Map);

        // Discussions.
        $discussion_Map = array(
            'thread_id' => 'DiscussionID',
            'node_id' => 'CategoryID',
            'title' => 'Name',
            'view_count' => 'CountViews',
            'user_id' => 'InsertUserID',
            'post_date' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'sticky' => 'Announce',
            'discussion_open' => array('Column' => 'Closed', 'Filter' => 'NotFilter'),
            'last_post_date' => array('Column' => 'DateLastComment', 'Filter' => 'timestampToDate'),
            'message' => 'Body',
            'format' => 'Format',
            'ip' => array('Column' => 'InsertIPAddress', 'Filter' => 'long2ipf')
        );
        $ex->exportTable('Discussion', "
         select
            t.*,
            p.message,
            'BBCode' as format,
            ip.ip
         from :_thread t
         join :_post p
            on t.first_post_id = p.post_id
         left join :_ip ip
            on p.ip_id = ip.ip_id", $discussion_Map);


        // Comments.
        $comment_Map = array(
            'post_id' => 'CommentID',
            'thread_id' => 'DiscussionID',
            'user_id' => 'InsertUserID',
            'post_date' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'message' => 'Body',
            'format' => 'Format',
            'ip' => array('Column' => 'InsertIPAddress', 'Filter' => 'long2ipf')
        );
        $ex->exportTable('Comment', "
         select
            p.*,
            'BBCode' as format,
            ip.ip
         from :_post p
         join :_thread t
            on p.thread_id = t.thread_id
         left join :_ip ip
            on p.ip_id = ip.ip_id
         where p.post_id <> t.first_post_id
            and message_state = 'visible'", $comment_Map);

        // Conversation.
        $conversation_Map = array(
            'conversation_id' => 'ConversationID',
            'title' => 'Subject',
            'user_id' => 'InsertUserID',
            'start_date' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate')
        );
        $ex->exportTable('Conversation', "
         select *
         from :_conversation_master", $conversation_Map);

        $conversationMessage_Map = array(
            'message_id' => 'MessageID',
            'conversation_id' => 'ConversationID',
            'message_date' => array('Column' => 'DateInserted', 'Filter' => 'timestampToDate'),
            'user_id' => 'InsertUserID',
            'message' => 'Body',
            'format' => 'Format',
            'ip' => array('Column' => 'InsertIPAddress', 'Filter' => 'long2ipf')
        );
        $ex->exportTable('ConversationMessage', "
         select
            m.*,
            'BBCode' as format,
            ip.ip
         from :_conversation_message m
         left join :_ip ip
            on m.ip_id = ip.ip_id", $conversationMessage_Map);

        $userConversation_Map = array(
            'conversation_id' => 'ConversationID',
            'user_id' => 'UserID',
            'Deleted' => 'Deleted'
        );
        $ex->exportTable('UserConversation', "
         select
            r.conversation_id,
            user_id,
            case when r.recipient_state = 'deleted' then 1 else 0 end as Deleted
         from :_conversation_recipient r

         union all

         select
            cu.conversation_id,
            cu.owner_user_id,
            0
         from :_conversation_user cu
         ", $userConversation_Map);

        $ex->endExport();
    }

    public function exportPermissions() {
        $ex = $this->ex;

        $permissions = array();

        // Export the global permissions.
        $r = $ex->query("
         select
            pe.*,
            g.title
         from :_permission_entry pe
         join :_user_group g
            on pe.user_group_id = g.user_group_id");
        $this->_exportPermissions($r, $permissions);

        $r = $ex->query("
          select
            pe.*,
            g.title
         from :_permission_entry_content pe
         join :_user_group g
            on pe.user_group_id = g.user_group_id");
        $this->_exportPermissions($r, $permissions);


        if (count($permissions) == 0) {
            return;
        }

        $permissions = array_values($permissions);

        // Now that we have all of the permission in an array let's export them.
        $columns = $this->_exportPermissions(false);

        foreach ($columns as $index => $column) {
            if (strpos($column, '.') !== false) {
                $columns[$index] = array('Column' => $column, 'Type' => 'tinyint');
            }
        }
        $structure = $ex->getExportStructure($columns, 'Permission', $columns, 'Permission');
        $revMappings = $ex->flipMappings($columns);

        $ex->writeBeginTable($ex->file, 'Permission', $structure);
        $count = 0;
        foreach ($permissions as $row) {
            $ex->writeRow($ex->file, $row, $structure, $revMappings);
            $count++;
        }
        $ex->writeEndTable($ex->file);
        $ex->comment("Exported Table: Permission ($count rows)");

//       var_export($permissions);
    }

    public function exportUserMeta() {
        $ex = $this->ex;

        $sql = "
         select
           user_id as UserID,
           'Plugin.Signatures.Sig' as Name,
           signature as Value
         from :_user_profile
         where nullif(signature, '') is not null

         union

         select
           user_id,
           'Plugin.Signatures.Format',
           'BBCode'
         from :_user_profile
         where nullif(signature, '') is not null";

        $ex->exportTable('UserMeta', $sql);
    }

    protected function _exportPermissions($r, &$perms = null) {
        $map = array(
            'general.viewNode' => 'Vanilla.Discussions.View',
            'forum.deleteAnyPost' => 'Vanilla.Comments.Delete',
            'forum.deleteAnyThread' => 'Vanilla.Discussions.Delete',
            'forum.editAnyPost' => array('Vanilla.Discussions.Edit', 'Vanilla.Comments.Edit'),
            'forum.lockUnlockThread' => 'Vanilla.Discussions.Close',
            'forum.postReply' => array('Vanilla.Comments.Add'),
            'forum.postThread' => 'Vanilla.Discussions.Add',
            'forum.stickUnstickThread' => array('Vanilla.Discussions.Announce', 'Vanilla.Discussions.Sink'),
            'forum.uploadAttachment' => 'Plugins.Attachments.Upload.Allow',
            'forum.viewAttachment' => 'Plugins.Attachments.Download.Allow',
            'general.editSignature' => 'Plugins.Signatures.Edit',
            'general.viewProfile' => 'Garden.Profiles.View',
            'profilePost.deleteAny' => 'Garden.Activity.Delete',
            'profilePost.post' => array('Garden.Email.View', 'Garden.SignIn.Allow', 'Garden.Profiles.Edit')
        );

        if ($r === false) {
            $result = array(
                'RoleID' => 'RoleID',
                'JunctionTable' => 'JunctionTable',
                'JunctionColumn' => 'JunctionColumn',
                'JunctionID' => 'JunctionID',
                '_Permissions' => '_Permissions',
                'Garden.Moderation.Manage' => 'Garden.Moderation.Manage'
            );

            // Return an array of fieldnames.
            foreach ($map as $columns) {
                $columns = (array)$columns;
                foreach ($columns as $column) {
                    $result[$column] = $column;
                }
            }

            return $result;
        }

        while ($row = mysql_fetch_assoc($r)) {
            $roleID = $row['user_group_id'];

            $perm = "{$row['permission_group_id']}.{$row['permission_id']}";

            if (!isset($map[$perm])) {
                continue;
            }

            $names = (array)$map[$perm];

            foreach ($names as $name) {
                if (isset($row['content_id'])) {
                    if ($row['content_type'] != 'node') {
                        continue;
                    }

                    $categoryID = $row['content_id'];
                } else {
                    $categoryID = null;
                }

                // Is this a per-category permission?
                if (strpos($name, 'Vanilla.Discussions.') !== false || strpos($name, 'Vanilla.Comments.') !== false) {
                    if (!$categoryID) {
                        $categoryID = -1;
                    }
                } else {
                    $categoryID = null;
                }


                $key = "{$roleID}_{$categoryID}";

                $perms[$key]['RoleID'] = $roleID;
                $permRow = &$perms[$key];
                if ($categoryID) {
                    $permRow['JunctionTable'] = 'Category';
                    $permRow['JunctionColumn'] = 'PermissionCategoryID';
                    $permRow['JunctionID'] = $categoryID;
                }

                $title = $row['title'];
                $permRow['Title'] = $title;
                if (stripos($title, 'Admin') !== false) {
                    $permRow['_Permissions'] = 'all';
                }
                if (!$categoryID && stripos($title, 'Mod') !== false) {
                    $permRow['Garden.Moderation.Manage'] = true;
                }

                // Set all of the permissions.
                $permValue = $row['permission_value'];
                if ($permValue == 'deny') {
                    $permRow[$name] = false;
                } elseif (in_array($permValue, array('allow', 'content_allow'))) {
                    if (!isset($permRow[$name]) || $permRow[$name] !== false) {
                        $permRow[$name] = true;
                    }
                } elseif (!isset($permRow[$name])) {
                    $permRow[$name] = null;
                }
            }
        }
    }

}

// Closing PHP tag required. (make.php)
?>
<?php
/**
 * YetAnotherForum.NET exporter tool
 *
 * @copyright 2009-2016 Vanilla Forums Inc.
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$supported['yaf'] = array('name' => 'YAF.NET', 'prefix' => 'yaf_'); // (Yet Another Forum)
$supported['yaf']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'PrivateMessages' => 1,
    'Signatures' => 1,
    'Ranks' => 1,
    'Passwords' => 1,
);

class Yaf extends ExportController {
    public static $passwordFormats = array(0 => 'md5', 1 => 'sha1', 2 => 'sha256', 3 => 'sha384', 4 => 'sha512');

    /**
     *
     * @param ExportModel $ex
     */
    public function forumExport($ex) {

        $characterSet = $ex->getCharacterSet('Topic');
        if ($characterSet) {
            $ex->characterSet = $characterSet;
        }

        $ex->beginExport('', 'YAF.NET (Yet Another Forum)');
        $ex->sourcePrefix = 'yaf_';

        // User.
        $user_Map = array(
            'UserID' => 'UserID',
            'Name' => 'Name',
            'Email' => 'Email',
            'Joined' => 'DateInserted',
            'LastVisit' => array('Column' => 'DateLastVisit', 'Type' => 'datetime'),
            'IP' => 'InsertIPAddress',
            'Avatar' => 'Photo',
            'RankID' => array('Column' => 'RankID', 'Type' => 'int'),
            'Points' => array('Column' => 'Points', 'Type' => 'int'),
            'LastActivity' => 'DateLastActive',
            'Password2' => array('Column' => 'Password', 'Filter' => array($this, 'convertPassword')),
            'HashMethod' => 'HashMethod'
        );
        $ex->exportTable('User', "
         select
            u.*,
            m.Password as Password2,
            m.PasswordSalt,
            m.PasswordFormat,
            m.LastActivity,
            'yaf' as HashMethod
         from :_User u
         left join :_prov_Membership m
            on u.ProviderUserKey = m.UserID;", $user_Map);

        // Role.
        $role_Map = array(
            'GroupID' => 'RoleID',
            'Name' => 'Name'
        );
        $ex->exportTable('Role', "
         select *
         from :_Group;", $role_Map);

        // UserRole.
        $userRole_Map = array(
            'UserID' => 'UserID',
            'GroupID' => 'RoleID'
        );
        $ex->exportTable('UserRole', 'select * from :_UserGroup', $userRole_Map);

        // Rank.
        $rank_Map = array(
            'RankID' => 'RankID',
            'Level' => 'Level',
            'Name' => 'Name',
            'Label' => 'Label'
        );
        $ex->exportTable('Rank', "
         select
            r.*,
            RankID as Level,
            Name as Label
         from :_Rank r;", $rank_Map);

        // Signatures.
        $ex->exportTable('UserMeta', "
         select
            UserID,
            'Plugin.Signatures.Sig' as `Name`,
            Signature as `Value`
         from :_User
         where Signature <> ''

         union all

         select
            UserID,
            'Plugin.Signatures.Format' as `Name`,
            'BBCode' as `Value`
         from :_User
         where Signature <> '';");

        // Category.
        $category_Map = array(
            'ForumID' => 'CategoryID',
            'ParentID' => 'ParentCategoryID',
            'Name' => 'Name',
            'Description' => 'Description',
            'SortOrder' => 'Sort'
        );

        $ex->exportTable('Category', "
         select
            f.ForumID,
            case when f.ParentID = 0 then f.CategoryID * 1000 else f.ParentID end as ParentID,
            f.Name,
            f.Description,
            f.SortOrder
         from :_Forum f

         union all

         select
            c.CategoryID * 1000,
            null,
            c.Name,
            null,
            c.SortOrder
         from :_Category c;", $category_Map);

        // Discussion.
        $discussion_Map = array(
            'TopicID' => 'DiscussionID',
            'ForumID' => 'CategoryID',
            'UserID' => 'InsertUserID',
            'Posted' => 'DateInserted',
            'Topic' => 'Name',
            'Views' => 'CountViews',
            'Announce' => 'Announce'
        );
        $ex->exportTable('Discussion', "
         select
            case when t.Priority > 0 then 1 else 0 end as Announce,
            t.Flags & 1 as Closed,
            t.*
         from :_Topic t
         where t.IsDeleted = 0;", $discussion_Map);

        // Comment.
        $comment_Map = array(
            'MessageID' => 'CommentID',
            'TopicID' => 'DiscussionID',
            'ReplyTo' => array('Column' => 'ReplyToCommentID', 'Type' => 'int'),
            'UserID' => 'InsertUserID',
            'Posted' => 'DateInserted',
            'Message' => 'Body',
            'Format' => 'Format',
            'IP' => 'InsertIPAddress',
            'Edited' => array('Column' => 'DateUpdated', 'Filter' => array($this, 'cleanDate')),
            'EditedBy' => 'UpdateUserID'
        );
        $ex->exportTable('Comment', "
         select
            case when m.Flags & 1 = 1 then 'Html' else 'BBCode' end as Format,
            m.*
         from :_Message m
         where IsDeleted = 0;", $comment_Map);

        // Conversation.
        $this->_exportConversationTemps();

        $conversation_Map = array(
            'PMessageID' => 'ConversationID',
            'FromUserID' => 'InsertUserID',
            'Created' => 'DateInserted',
            'Title' => array('Column' => 'Subject', 'Type' => 'varchar(512)')
        );
        $ex->exportTable('Conversation', "
         select
            pm.*,
            g.Title
         from z_pmgroup g
         join :_PMessage pm
            on g.Group_ID = pm.PMessageID;", $conversation_Map);

        // UserConversation.
        $userConversation_Map = array(
            'PM_ID' => 'ConversationID',
            'User_ID' => 'UserID',
            'Deleted' => 'Deleted'
        );
        $ex->exportTable('UserConversation', "
         select pto.*
         from z_pmto pto
         join z_pmgroup g
            on pto.PM_ID = g.Group_ID;", $userConversation_Map);

        // ConversationMessage.
        $conversationMessage_Map = array(
            'PMessageID' => 'MessageID',
            'Group_ID' => 'ConversationID',
            'FromUserID' => 'InsertUserID',
            'Created' => 'DateInserted',
            'Body' => 'Body',
            'Format' => 'Format'
        );
        $ex->exportTable('ConversationMessage', "
         select
            pm.*,
            case when pm.Flags & 1 = 1 then 'Html' else 'BBCode' end as Format,
            t.Group_ID
         from :_PMessage pm
         join z_pmtext t
            on t.PM_ID = pm.PMessageID;", $conversationMessage_Map);

        $ex->endExport();
    }

    public function cleanDate($value) {
        if (!$value) {
            return null;
        }
        if (substr($value, 0, 4) == '0000') {
            return null;
        }

        return $value;
    }

    public function convertPassword($hash, $columnName, &$row) {
        $salt = $row['PasswordSalt'];
        $hash = $row['Password2'];
        $method = $row['PasswordFormat'];
        if (isset(self::$passwordFormats[$method])) {
            $method = self::$passwordFormats[$method];
        } else {
            $method = 'sha1';
        }
        $result = $method . '$' . $salt . '$' . $hash . '$';

        return $result;
    }

    protected function _exportConversationTemps() {
        $sql = "
         drop table if exists z_pmto;

         create table z_pmto (
            PM_ID int unsigned,
            User_ID int,
            Deleted tinyint,
            primary key(PM_ID, User_ID)
            );

         insert ignore z_pmto (
            PM_ID,
            User_ID,
            Deleted
         )
         select
            PMessageID,
            FromUserID,
            0
         from :_PMessage;

         replace z_pmto (
            PM_ID,
            User_ID,
            Deleted
         )
         select
            PMessageID,
            UserID,
            IsDeleted
         from :_UserPMessage;

         drop table if exists z_pmto2;
         create table z_pmto2 (
            PM_ID int unsigned,
             UserIDs varchar(250),
             primary key (PM_ID)
         );

         replace z_pmto2 (
            PM_ID,
            UserIDs
         )
         select
            PM_ID,
            group_concat(User_ID order by User_ID)
         from z_pmto
         group by PM_ID;

         drop table if exists z_pmtext;
         create table z_pmtext (
            PM_ID int unsigned,
            Title varchar(250),
             Title2 varchar(250),
             UserIDs varchar(250),
             Group_ID int unsigned
         );

         insert z_pmtext (
            PM_ID,
            Title,
            Title2
         )
         select
            PMessageID,
            Subject,
            case when Subject like 'Re:%' then trim(substring(Subject, 4)) else Subject end as Title2
         from :_PMessage;

         create index z_idx_pmtext on z_pmtext (PM_ID);

         update z_pmtext pm
         join z_pmto2 t
            on pm.PM_ID = t.PM_ID
         set pm.UserIDs = t.UserIDs;

         drop table if exists z_pmgroup;

         create table z_pmgroup (
                 Group_ID int unsigned,
                 Title varchar(250),
                 UserIDs varchar(250)
               );

         insert z_pmgroup (
                 Group_ID,
                 Title,
                 UserIDs
               )
               select
                 min(pm.PM_ID),
                 pm.Title2,
                 t2.UserIDs
               from z_pmtext pm
               join z_pmto2 t2
                 on pm.PM_ID = t2.PM_ID
               group by pm.Title2, t2.UserIDs;

         create index z_idx_pmgroup on z_pmgroup (Title, UserIDs);
         create index z_idx_pmgroup2 on z_pmgroup (Group_ID);

         update z_pmtext pm
               join z_pmgroup g
                 on pm.Title2 = g.Title and pm.UserIDs = g.UserIDs
               set pm.Group_ID = g.Group_ID;";

        $this->ex->queryN($sql);
    }
}

// Closing PHP tag required. (make.php)
?>
<?php 

// If running from cli, execute its command.
if (defined('CONSOLE')) {
    parseCommandLine();
}

// Instantiate the appropriate controller or display the input page.
$method = 'DoExport';
if (isset($_REQUEST['features'])) {
    // Feature list or table.
    $set = (isset($_REQUEST['cloud'])) ? array('core', 'addons', 'cloud') : false;
    $set = vanillaFeatures($set);

    if (isset($_REQUEST['type'])) {
        viewFeatureList($_REQUEST['type'], $set);
    } else {
        viewFeatureTable($set);
    }
} elseif (isset($_POST['type'])) {
    if (array_key_exists($_POST['type'], $supported)) {
        // Mini-Factory for conducting exports.
        $class = ucwords($_POST['type']);
        $controller = new $class();
        if (!method_exists($controller, $method)) {
            echo "This datasource type does not support {$method}.\n";
            exit();
        }
        $controller->$method();
    } else {
        echo 'Invalid type specified: ' . $_POST['type'];
    }
} else {
    // Show the web UI to start an export.
    $canWrite = testWrite();
    viewForm(array('Supported' => $supported, 'CanWrite' => $canWrite));
}

// Console output should end in newline.
if (defined('CONSOLE')) {
    echo "\n";
}
